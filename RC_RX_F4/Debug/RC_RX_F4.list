
RC_RX_F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000de08  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b54  0800df98  0800df98  0001df98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eaec  0800eaec  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800eaec  0800eaec  0001eaec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eaf4  0800eaf4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800eaf4  0800eaf4  0001eaf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800eafc  0800eafc  0001eafc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800eb04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00002640  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002820  20002820  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 14 .debug_info   00022364  00000000  00000000  00020253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004cc8  00000000  00000000  000425b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001ae8  00000000  00000000  00047280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000150b  00000000  00000000  00048d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00028c96  00000000  00000000  0004a273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00025204  00000000  00000000  00072f09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000db881  00000000  00000000  0009810d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008610  00000000  00000000  00173990  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  0017bfa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800df80 	.word	0x0800df80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800df80 	.word	0x0800df80

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ea8:	f3bf 8f4f 	dsb	sy
}
 8000eac:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <__NVIC_SystemReset+0x24>)
 8000eb0:	68db      	ldr	r3, [r3, #12]
 8000eb2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000eb6:	4904      	ldr	r1, [pc, #16]	; (8000ec8 <__NVIC_SystemReset+0x24>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000eb8:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <__NVIC_SystemReset+0x28>)
 8000eba:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000ebc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ebe:	f3bf 8f4f 	dsb	sy
}
 8000ec2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000ec4:	bf00      	nop
 8000ec6:	e7fd      	b.n	8000ec4 <__NVIC_SystemReset+0x20>
 8000ec8:	e000ed00 	.word	0xe000ed00
 8000ecc:	05fa0004 	.word	0x05fa0004

08000ed0 <_ZN3bfs6SbusTxC1EP20__UART_HandleTypeDef>:
  uint8_t buf_[BUF_LEN_];
  int16_t ch_[NUM_SBUS_CH_];
  bool failsafe_ = false, lost_frame_ = false, ch17_ = false, ch18_ = false;

 public:
  explicit SbusTx(UART_HandleTypeDef *bus) : uart_(bus) {}
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	683a      	ldr	r2, [r7, #0]
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2200      	movs	r2, #0
 8000eec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2200      	movs	r2, #0
 8000efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4618      	mov	r0, r3
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <_ZN3bfs6SbusTx8failsafeEb>:
  void Write();
  static constexpr int8_t NUM_CH() {return NUM_SBUS_CH_;}
  inline void failsafe(const bool val) {failsafe_ = val;}
 8000f0e:	b480      	push	{r7}
 8000f10:	b083      	sub	sp, #12
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
 8000f16:	460b      	mov	r3, r1
 8000f18:	70fb      	strb	r3, [r7, #3]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	78fa      	ldrb	r2, [r7, #3]
 8000f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <_ZN3bfs6SbusTx10lost_frameEb>:
  inline void lost_frame(const bool val) {lost_frame_ = val;}
 8000f2e:	b480      	push	{r7}
 8000f30:	b083      	sub	sp, #12
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
 8000f36:	460b      	mov	r3, r1
 8000f38:	70fb      	strb	r3, [r7, #3]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	78fa      	ldrb	r2, [r7, #3]
 8000f3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <_ZN3bfs6SbusTx6set_chEhs>:
  inline void ch(int16_t* cmd) {memcpy(ch_, cmd,NUM_SBUS_CH_);}
  /**
   * Set a specific channel in the map.
   * IT IS 1 BASED
   */
  inline void set_ch(uint8_t ch, int16_t val){ch_[ch-1]=val;}
 8000f4e:	b480      	push	{r7}
 8000f50:	b083      	sub	sp, #12
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
 8000f56:	460b      	mov	r3, r1
 8000f58:	70fb      	strb	r3, [r7, #3]
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	803b      	strh	r3, [r7, #0]
 8000f5e:	78fb      	ldrb	r3, [r7, #3]
 8000f60:	3b01      	subs	r3, #1
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	330c      	adds	r3, #12
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	4413      	add	r3, r2
 8000f6a:	883a      	ldrh	r2, [r7, #0]
 8000f6c:	80da      	strh	r2, [r3, #6]
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
	...

08000f7c <_Z10nRF24_CE_Lv>:
inline void Delay_ms(uint32_t ms) 
{ 
    HAL_Delay(ms); 
}

inline void nRF24_CE_L() {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(nRF_cePort, nRF_cePin, GPIO_PIN_RESET);
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <_Z10nRF24_CE_Lv+0x18>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a04      	ldr	r2, [pc, #16]	; (8000f98 <_Z10nRF24_CE_Lv+0x1c>)
 8000f86:	8811      	ldrh	r1, [r2, #0]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f005 fbfc 	bl	8006788 <HAL_GPIO_WritePin>
}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20002698 	.word	0x20002698
 8000f98:	200026a0 	.word	0x200026a0

08000f9c <_Z10nRF24_CE_Hv>:

inline void nRF24_CE_H() {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(nRF_cePort, nRF_cePin, GPIO_PIN_SET);
 8000fa0:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <_Z10nRF24_CE_Hv+0x18>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <_Z10nRF24_CE_Hv+0x1c>)
 8000fa6:	8811      	ldrh	r1, [r2, #0]
 8000fa8:	2201      	movs	r2, #1
 8000faa:	4618      	mov	r0, r3
 8000fac:	f005 fbec 	bl	8006788 <HAL_GPIO_WritePin>
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20002698 	.word	0x20002698
 8000fb8:	200026a0 	.word	0x200026a0

08000fbc <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fe2:	d205      	bcs.n	8000ff0 <_ZSt16__deque_buf_sizej+0x1c>
 8000fe4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fee:	e000      	b.n	8000ff2 <_ZSt16__deque_buf_sizej+0x1e>
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
	...

08001000 <_Z12setStatusLedhhh>:


/* Private user code ---------------------------------------------------------*/


void setStatusLed(uint8_t R, uint8_t G, uint8_t B) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
 800100a:	460b      	mov	r3, r1
 800100c:	71bb      	strb	r3, [r7, #6]
 800100e:	4613      	mov	r3, r2
 8001010:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(SLEDR_GPIO_Port, SLEDR_Pin,(R ? GPIO_PIN_SET : GPIO_PIN_RESET));
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <_Z12setStatusLedhhh+0x1c>
 8001018:	2301      	movs	r3, #1
 800101a:	e000      	b.n	800101e <_Z12setStatusLedhhh+0x1e>
 800101c:	2300      	movs	r3, #0
 800101e:	461a      	mov	r2, r3
 8001020:	2110      	movs	r1, #16
 8001022:	480e      	ldr	r0, [pc, #56]	; (800105c <_Z12setStatusLedhhh+0x5c>)
 8001024:	f005 fbb0 	bl	8006788 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SLEDG_GPIO_Port, SLEDG_Pin,(G ? GPIO_PIN_SET : GPIO_PIN_RESET));
 8001028:	79bb      	ldrb	r3, [r7, #6]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <_Z12setStatusLedhhh+0x32>
 800102e:	2301      	movs	r3, #1
 8001030:	e000      	b.n	8001034 <_Z12setStatusLedhhh+0x34>
 8001032:	2300      	movs	r3, #0
 8001034:	461a      	mov	r2, r3
 8001036:	2108      	movs	r1, #8
 8001038:	4808      	ldr	r0, [pc, #32]	; (800105c <_Z12setStatusLedhhh+0x5c>)
 800103a:	f005 fba5 	bl	8006788 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SLEDB_GPIO_Port, SLEDB_Pin,(B ? GPIO_PIN_SET : GPIO_PIN_RESET));
 800103e:	797b      	ldrb	r3, [r7, #5]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <_Z12setStatusLedhhh+0x48>
 8001044:	2301      	movs	r3, #1
 8001046:	e000      	b.n	800104a <_Z12setStatusLedhhh+0x4a>
 8001048:	2300      	movs	r3, #0
 800104a:	461a      	mov	r2, r3
 800104c:	2104      	movs	r1, #4
 800104e:	4803      	ldr	r0, [pc, #12]	; (800105c <_Z12setStatusLedhhh+0x5c>)
 8001050:	f005 fb9a 	bl	8006788 <HAL_GPIO_WritePin>
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40021000 	.word	0x40021000

08001060 <_Z14common_nRFInitv>:

void common_nRFInit() {
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
	nRF24_CE_L();
 8001064:	f7ff ff8a 	bl	8000f7c <_Z10nRF24_CE_Lv>
	delay(20);
 8001068:	2014      	movs	r0, #20
 800106a:	f004 fee3 	bl	8005e34 <HAL_Delay>
	if (!nRF24_Check()) {
 800106e:	f009 f97d 	bl	800a36c <_Z11nRF24_Checkv>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	bf0c      	ite	eq
 8001078:	2301      	moveq	r3, #1
 800107a:	2300      	movne	r3, #0
 800107c:	b2db      	uxtb	r3, r3
 800107e:	2b00      	cmp	r3, #0
 8001080:	d006      	beq.n	8001090 <_Z14common_nRFInitv+0x30>
		UART_SendStr("NRF Module not found");
 8001082:	481b      	ldr	r0, [pc, #108]	; (80010f0 <_Z14common_nRFInitv+0x90>)
 8001084:	f000 f84c 	bl	8001120 <_Z12UART_SendStrPc>
		Error_Handler();
 8001088:	2157      	movs	r1, #87	; 0x57
 800108a:	481a      	ldr	r0, [pc, #104]	; (80010f4 <_Z14common_nRFInitv+0x94>)
 800108c:	f002 ff8a 	bl	8003fa4 <_Error_Handler>
	}

	nRF24_Init();
 8001090:	f009 f91f 	bl	800a2d2 <_Z10nRF24_Initv>

	// Set RF channel
	nRF24_SetRFChannel(40);
 8001094:	2028      	movs	r0, #40	; 0x28
 8001096:	f009 fa42 	bl	800a51e <_Z18nRF24_SetRFChannelh>

	// Set data rate
	nRF24_SetDataRate(nRF24_DR_1Mbps);
 800109a:	2000      	movs	r0, #0
 800109c:	f009 fac7 	bl	800a62e <_Z17nRF24_SetDataRateh>

	// Set CRC scheme
	nRF24_SetCRCScheme(nRF24_CRC_2byte);
 80010a0:	200c      	movs	r0, #12
 80010a2:	f009 fa1e 	bl	800a4e2 <_Z18nRF24_SetCRCSchemeh>

	// Set address width, its common for all pipes (RX and TX)
	nRF24_SetAddrWidth(3);
 80010a6:	2003      	movs	r0, #3
 80010a8:	f009 fa47 	bl	800a53a <_Z18nRF24_SetAddrWidthh>

	// Configure RX PIPE
	if (!isTransmitter) {
		nRF24_SetAddr(nRF24_PIPE0, nrfAddress); 	// Set RX Pipe
 80010ac:	4912      	ldr	r1, [pc, #72]	; (80010f8 <_Z14common_nRFInitv+0x98>)
 80010ae:	2000      	movs	r0, #0
 80010b0:	f009 fa54 	bl	800a55c <_Z13nRF24_SetAddrhPKh>
	} else {
		nRF24_SetAddr(nRF24_PIPE0, nrfAddress); 	// Set RX Pipe
		nRF24_SetAddr(nRF24_PIPETX, nrfAddress);   // Set TX Pipe
		nRF24_SetAutoRetr(nRF24_ARD_250us, 10);
	}
	nRF24_SetRXPipe(nRF24_PIPE0, nRF24_AA_ON, 32); // Auto-ACK: enabled, payload length: 32 bytes
 80010b4:	2220      	movs	r2, #32
 80010b6:	2101      	movs	r1, #1
 80010b8:	2000      	movs	r0, #0
 80010ba:	f009 fad3 	bl	800a664 <_Z15nRF24_SetRXPipehhh>

	// Set TX power
	nRF24_SetTXPower(nRF24_TXPWR_0dBm);
 80010be:	2006      	movs	r0, #6
 80010c0:	f009 fa9a 	bl	800a5f8 <_Z16nRF24_SetTXPowerh>

	// Enable DPL
	nRF24_SetDynamicPayloadLength(nRF24_DPL_ON);
 80010c4:	2001      	movs	r0, #1
 80010c6:	f009 f9c0 	bl	800a44a <_Z29nRF24_SetDynamicPayloadLengthh>

	nRF24_SetPayloadWithAck(1);
 80010ca:	2001      	movs	r0, #1
 80010cc:	f009 f9e7 	bl	800a49e <_Z23nRF24_SetPayloadWithAckh>

	// Enable Auto-ACK for pipe#0 (for ACK packets)
	nRF24_EnableAA(nRF24_PIPE0);
 80010d0:	2000      	movs	r0, #0
 80010d2:	f009 fb1b 	bl	800a70c <_Z14nRF24_EnableAAh>

	if (!isTransmitter) {
		// Set operational mode (PRX == receiver)
		nRF24_SetOperationalMode(nRF24_MODE_RX);
 80010d6:	2001      	movs	r0, #1
 80010d8:	f009 f999 	bl	800a40e <_Z24nRF24_SetOperationalModeh>
		nRF24_SetAutoRetr(nRF24_ARD_250us, 3);

		nRF24_SetOperationalMode(nRF24_MODE_TX);
	}
	// Clear any pending IRQ flags
	nRF24_ClearIRQFlags();
 80010dc:	f009 fb4e 	bl	800a77c <_Z19nRF24_ClearIRQFlagsv>

	// Wake the transceiver
	nRF24_SetPowerMode(nRF24_PWR_UP);
 80010e0:	2002      	movs	r0, #2
 80010e2:	f009 f975 	bl	800a3d0 <_Z18nRF24_SetPowerModeh>

	//nRF24_DumpConfig();
	if (!isTransmitter) {
		// Put the transceiver to the RX mode
		nRF24_CE_H();
 80010e6:	f7ff ff59 	bl	8000f9c <_Z10nRF24_CE_Hv>
	}
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	0800df98 	.word	0x0800df98
 80010f4:	0800dfb0 	.word	0x0800dfb0
 80010f8:	20000004 	.word	0x20000004

080010fc <_Z13UART_SendCharc>:

void UART_SendChar(char b) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, (uint8_t*) &b, 1, 200);
 8001106:	1df9      	adds	r1, r7, #7
 8001108:	23c8      	movs	r3, #200	; 0xc8
 800110a:	2201      	movs	r2, #1
 800110c:	4803      	ldr	r0, [pc, #12]	; (800111c <_Z13UART_SendCharc+0x20>)
 800110e:	f007 fdd3 	bl	8008cb8 <HAL_UART_Transmit>
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200025ac 	.word	0x200025ac

08001120 <_Z12UART_SendStrPc>:

void UART_SendStr(char *string) {
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) string, (uint16_t) strlen(string), 200);
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f7ff f8a1 	bl	8000270 <strlen>
 800112e:	4603      	mov	r3, r0
 8001130:	b29a      	uxth	r2, r3
 8001132:	23c8      	movs	r3, #200	; 0xc8
 8001134:	6879      	ldr	r1, [r7, #4]
 8001136:	4803      	ldr	r0, [pc, #12]	; (8001144 <_Z12UART_SendStrPc+0x24>)
 8001138:	f007 fdbe 	bl	8008cb8 <HAL_UART_Transmit>
}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	200025ac 	.word	0x200025ac

08001148 <_Z9setOutputht>:

void setOutput(uint8_t index, uint16_t outputValue) {
 8001148:	b5b0      	push	{r4, r5, r7, lr}
 800114a:	b092      	sub	sp, #72	; 0x48
 800114c:	af02      	add	r7, sp, #8
 800114e:	4603      	mov	r3, r0
 8001150:	460a      	mov	r2, r1
 8001152:	71fb      	strb	r3, [r7, #7]
 8001154:	4613      	mov	r3, r2
 8001156:	80bb      	strh	r3, [r7, #4]
	channelOutputConfig choc = channelsOutputConfig[index];
 8001158:	79fa      	ldrb	r2, [r7, #7]
 800115a:	4991      	ldr	r1, [pc, #580]	; (80013a0 <_Z9setOutputht+0x258>)
 800115c:	4613      	mov	r3, r2
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	4413      	add	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	440b      	add	r3, r1
 8001166:	f107 0408 	add.w	r4, r7, #8
 800116a:	461d      	mov	r5, r3
 800116c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800116e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001170:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001172:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001174:	682b      	ldr	r3, [r5, #0]
 8001176:	6023      	str	r3, [r4, #0]
	uint32_t channelValue = outputValue;
 8001178:	88bb      	ldrh	r3, [r7, #4]
 800117a:	633b      	str	r3, [r7, #48]	; 0x30
	channelValue += 1000;
 800117c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800117e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001182:	633b      	str	r3, [r7, #48]	; 0x30
	channelValues[index - 1] = channelValue;
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	3b01      	subs	r3, #1
 8001188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800118a:	b291      	uxth	r1, r2
 800118c:	4a85      	ldr	r2, [pc, #532]	; (80013a4 <_Z9setOutputht+0x25c>)
 800118e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	if (channelValue == 2023) {
 8001192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001194:	f240 72e7 	movw	r2, #2023	; 0x7e7
 8001198:	4293      	cmp	r3, r2
 800119a:	d106      	bne.n	80011aa <_Z9setOutputht+0x62>
		channelValues[index - 1] = 0;
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	3b01      	subs	r3, #1
 80011a0:	4a80      	ldr	r2, [pc, #512]	; (80013a4 <_Z9setOutputht+0x25c>)
 80011a2:	2100      	movs	r1, #0
 80011a4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		return;
 80011a8:	e0f7      	b.n	800139a <_Z9setOutputht+0x252>
	}

	channelConfigs* channelConfig = &settings.model[settings.activeModel].channel_settings[index - 1];
 80011aa:	4b7f      	ldr	r3, [pc, #508]	; (80013a8 <_Z9setOutputht+0x260>)
 80011ac:	789b      	ldrb	r3, [r3, #2]
 80011ae:	4619      	mov	r1, r3
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	1e5a      	subs	r2, r3, #1
 80011b4:	4613      	mov	r3, r2
 80011b6:	00db      	lsls	r3, r3, #3
 80011b8:	1a9b      	subs	r3, r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	f240 320b 	movw	r2, #779	; 0x30b
 80011c0:	fb01 f202 	mul.w	r2, r1, r2
 80011c4:	4413      	add	r3, r2
 80011c6:	3310      	adds	r3, #16
 80011c8:	4a77      	ldr	r2, [pc, #476]	; (80013a8 <_Z9setOutputht+0x260>)
 80011ca:	4413      	add	r3, r2
 80011cc:	3308      	adds	r3, #8
 80011ce:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (choc.currentOutputMode == OUTPUTMODE_RC) {
 80011d0:	7a3b      	ldrb	r3, [r7, #8]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d10b      	bne.n	80011ee <_Z9setOutputht+0xa6>
		if (choc.timOutput == 0) return;
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	f000 80db 	beq.w	8001394 <_Z9setOutputht+0x24c>

		*choc.timOutput = channelValues[index - 1];
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	3b01      	subs	r3, #1
 80011e2:	4a70      	ldr	r2, [pc, #448]	; (80013a4 <_Z9setOutputht+0x25c>)
 80011e4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	e0d5      	b.n	800139a <_Z9setOutputht+0x252>
	} else if (choc.currentOutputMode == OUTPUTMODE_IO) {
 80011ee:	7a3b      	ldrb	r3, [r7, #8]
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d111      	bne.n	8001218 <_Z9setOutputht+0xd0>
		if (choc.timOutput == 0)
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f000 80ce 	beq.w	8001398 <_Z9setOutputht+0x250>
			return;
		if (channelValue > 1500) {
 80011fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011fe:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001202:	4293      	cmp	r3, r2
 8001204:	d904      	bls.n	8001210 <_Z9setOutputht+0xc8>
			*choc.timOutput = 7000; // Max output
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	f641 3258 	movw	r2, #7000	; 0x1b58
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	e0c4      	b.n	800139a <_Z9setOutputht+0x252>
		} else {
			*choc.timOutput = 0;
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	e0c0      	b.n	800139a <_Z9setOutputht+0x252>
		}
	}
	else if (choc.currentOutputMode == OUTPUTMODE_DAC) {
 8001218:	7a3b      	ldrb	r3, [r7, #8]
 800121a:	2b05      	cmp	r3, #5
 800121c:	d112      	bne.n	8001244 <_Z9setOutputht+0xfc>
		if (choc.miscOutput != 0) *choc.miscOutput = map(channelValue, 1000, 2000, 0,4095);
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	2b00      	cmp	r3, #0
 8001222:	f000 80ba 	beq.w	800139a <_Z9setOutputht+0x252>
 8001226:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001228:	f640 73ff 	movw	r3, #4095	; 0xfff
 800122c:	9300      	str	r3, [sp, #0]
 800122e:	2300      	movs	r3, #0
 8001230:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001234:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001238:	f002 fec1 	bl	8003fbe <map>
 800123c:	4602      	mov	r2, r0
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	e0aa      	b.n	800139a <_Z9setOutputht+0x252>
	}
	else if(choc.currentOutputMode == OUTPUTMODE_STEP){
 8001244:	7a3b      	ldrb	r3, [r7, #8]
 8001246:	2b04      	cmp	r3, #4
 8001248:	d160      	bne.n	800130c <_Z9setOutputht+0x1c4>
		uint32_t frequency = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	63fb      	str	r3, [r7, #60]	; 0x3c
		if(channelConfig->centeredStick){
 800124e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001250:	7adb      	ldrb	r3, [r3, #11]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d02a      	beq.n	80012ac <_Z9setOutputht+0x164>
			if(channelValue > 1500) frequency = map(channelValue, 1500, 2000, channelConfig->stepperConfig.minFrequency, channelConfig->stepperConfig.maxFrequency);
 8001256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001258:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800125c:	4293      	cmp	r3, r2
 800125e:	d90f      	bls.n	8001280 <_Z9setOutputht+0x138>
 8001260:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001264:	691b      	ldr	r3, [r3, #16]
 8001266:	461a      	mov	r2, r3
 8001268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800126a:	695b      	ldr	r3, [r3, #20]
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	4613      	mov	r3, r2
 8001270:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001274:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001278:	f002 fea1 	bl	8003fbe <map>
 800127c:	4603      	mov	r3, r0
 800127e:	63fb      	str	r3, [r7, #60]	; 0x3c
			if(channelValue < 1500) frequency = map(channelValue, 1500, 1000, channelConfig->stepperConfig.minFrequency, channelConfig->stepperConfig.maxFrequency);
 8001280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001282:	f240 52db 	movw	r2, #1499	; 0x5db
 8001286:	4293      	cmp	r3, r2
 8001288:	d81e      	bhi.n	80012c8 <_Z9setOutputht+0x180>
 800128a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800128c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800128e:	691b      	ldr	r3, [r3, #16]
 8001290:	461a      	mov	r2, r3
 8001292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	9300      	str	r3, [sp, #0]
 8001298:	4613      	mov	r3, r2
 800129a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800129e:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80012a2:	f002 fe8c 	bl	8003fbe <map>
 80012a6:	4603      	mov	r3, r0
 80012a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012aa:	e00d      	b.n	80012c8 <_Z9setOutputht+0x180>
		} else{
			map(channelValue, 1000, 2000, channelConfig->stepperConfig.minFrequency, channelConfig->stepperConfig.maxFrequency);
 80012ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80012ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012b0:	691b      	ldr	r3, [r3, #16]
 80012b2:	461a      	mov	r2, r3
 80012b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012b6:	695b      	ldr	r3, [r3, #20]
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	4613      	mov	r3, r2
 80012bc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80012c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012c4:	f002 fe7b 	bl	8003fbe <map>
		}
		TIM_setOverflow(choc.miscTimConf, frequency, TimerFormat_t::HERTZ_FORMAT);
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	2202      	movs	r2, #2
 80012cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80012ce:	4618      	mov	r0, r3
 80012d0:	f004 faa6 	bl	8005820 <_Z15TIM_setOverflowP17TIM_HandleTypeDefm13TimerFormat_t>
		uint32_t dutyCycle = 50;
 80012d4:	2332      	movs	r3, #50	; 0x32
 80012d6:	63bb      	str	r3, [r7, #56]	; 0x38
		if(channelConfig->centeredStick && channelValue == 1500) 
 80012d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012da:	7adb      	ldrb	r3, [r3, #11]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d006      	beq.n	80012ee <_Z9setOutputht+0x1a6>
 80012e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012e2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d101      	bne.n	80012ee <_Z9setOutputht+0x1a6>
		{
			dutyCycle = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	63bb      	str	r3, [r7, #56]	; 0x38
		}
		if(channelValue == 1000) 
 80012ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012f4:	d101      	bne.n	80012fa <_Z9setOutputht+0x1b2>
		{
			dutyCycle = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	63bb      	str	r3, [r7, #56]	; 0x38
		}
		TIM_setCaptureCompare(choc.miscTimConf,choc.miscTimCH, dutyCycle, TimerCompareFormat_t::PERCENT_COMPARE_FORMAT);
 80012fa:	69f8      	ldr	r0, [r7, #28]
 80012fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001300:	4619      	mov	r1, r3
 8001302:	2383      	movs	r3, #131	; 0x83
 8001304:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001306:	f004 faeb 	bl	80058e0 <_Z21TIM_setCaptureCompareP17TIM_HandleTypeDefmm20TimerCompareFormat_t>
 800130a:	e046      	b.n	800139a <_Z9setOutputht+0x252>
	} 
	else if(choc.currentOutputMode == OUTPUTMODE_PWM)
 800130c:	7a3b      	ldrb	r3, [r7, #8]
 800130e:	2b03      	cmp	r3, #3
 8001310:	d143      	bne.n	800139a <_Z9setOutputht+0x252>
	{
		uint32_t duty = 0;
 8001312:	2300      	movs	r3, #0
 8001314:	637b      	str	r3, [r7, #52]	; 0x34

		if(channelConfig->centeredStick){
 8001316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001318:	7adb      	ldrb	r3, [r3, #11]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d024      	beq.n	8001368 <_Z9setOutputht+0x220>
			if(channelValue > 1500) duty = map(channelValue, 1500, 2000, 0, 1023);
 800131e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001320:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001324:	4293      	cmp	r3, r2
 8001326:	d90c      	bls.n	8001342 <_Z9setOutputht+0x1fa>
 8001328:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800132a:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	2300      	movs	r3, #0
 8001332:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001336:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800133a:	f002 fe40 	bl	8003fbe <map>
 800133e:	4603      	mov	r3, r0
 8001340:	637b      	str	r3, [r7, #52]	; 0x34
			if(channelValue < 1500) duty = map(channelValue, 1500, 1000, 0, 1023);
 8001342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001344:	f240 52db 	movw	r2, #1499	; 0x5db
 8001348:	4293      	cmp	r3, r2
 800134a:	d81a      	bhi.n	8001382 <_Z9setOutputht+0x23a>
 800134c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800134e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	2300      	movs	r3, #0
 8001356:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800135a:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800135e:	f002 fe2e 	bl	8003fbe <map>
 8001362:	4603      	mov	r3, r0
 8001364:	637b      	str	r3, [r7, #52]	; 0x34
 8001366:	e00c      	b.n	8001382 <_Z9setOutputht+0x23a>
		} else{
			duty = map(channelValue, 1000, 2000, 0, 1023);
 8001368:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800136a:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	2300      	movs	r3, #0
 8001372:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001376:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800137a:	f002 fe20 	bl	8003fbe <map>
 800137e:	4603      	mov	r3, r0
 8001380:	637b      	str	r3, [r7, #52]	; 0x34
		}
		TIM_setCaptureCompare(choc.miscTimConf,choc.miscTimCH, duty, TimerCompareFormat_t::RESOLUTION_10B_COMPARE_FORMAT);
 8001382:	69f8      	ldr	r0, [r7, #28]
 8001384:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001388:	4619      	mov	r1, r3
 800138a:	230a      	movs	r3, #10
 800138c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800138e:	f004 faa7 	bl	80058e0 <_Z21TIM_setCaptureCompareP17TIM_HandleTypeDefmm20TimerCompareFormat_t>
 8001392:	e002      	b.n	800139a <_Z9setOutputht+0x252>
		if (choc.timOutput == 0) return;
 8001394:	bf00      	nop
 8001396:	e000      	b.n	800139a <_Z9setOutputht+0x252>
			return;
 8001398:	bf00      	nop
	}
}
 800139a:	3740      	adds	r7, #64	; 0x40
 800139c:	46bd      	mov	sp, r7
 800139e:	bdb0      	pop	{r4, r5, r7, pc}
 80013a0:	20000224 	.word	0x20000224
 80013a4:	200005b8 	.word	0x200005b8
 80013a8:	20000628 	.word	0x20000628

080013ac <_Z13parseRFPacketPhh14nRF24_RXResult>:


uint16_t receivedSettingsPacket;
void parseRFPacket(uint8_t *buf, uint8_t length, nRF24_RXResult pipeLine) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b090      	sub	sp, #64	; 0x40
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	70fb      	strb	r3, [r7, #3]
 80013b8:	4613      	mov	r3, r2
 80013ba:	70bb      	strb	r3, [r7, #2]
	if (pipeLine == nRF24_RX_EMPTY) {
 80013bc:	78bb      	ldrb	r3, [r7, #2]
 80013be:	2bff      	cmp	r3, #255	; 0xff
 80013c0:	d103      	bne.n	80013ca <_Z13parseRFPacketPhh14nRF24_RXResult+0x1e>
		printf("Pipeline is empty");
 80013c2:	481b      	ldr	r0, [pc, #108]	; (8001430 <_Z13parseRFPacketPhh14nRF24_RXResult+0x84>)
 80013c4:	f00a fc94 	bl	800bcf0 <iprintf>
		return;
 80013c8:	e3c3      	b.n	8001b52 <_Z13parseRFPacketPhh14nRF24_RXResult+0x7a6>
	}
	if (length == 6) {
 80013ca:	78fb      	ldrb	r3, [r7, #3]
 80013cc:	2b06      	cmp	r3, #6
 80013ce:	d115      	bne.n	80013fc <_Z13parseRFPacketPhh14nRF24_RXResult+0x50>
		for (int i = 0; i < length; i++) {
 80013d0:	2300      	movs	r3, #0
 80013d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80013d4:	e00a      	b.n	80013ec <_Z13parseRFPacketPhh14nRF24_RXResult+0x40>
			printf(" %02d ", buf[i]);
 80013d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	4413      	add	r3, r2
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	4619      	mov	r1, r3
 80013e0:	4814      	ldr	r0, [pc, #80]	; (8001434 <_Z13parseRFPacketPhh14nRF24_RXResult+0x88>)
 80013e2:	f00a fc85 	bl	800bcf0 <iprintf>
		for (int i = 0; i < length; i++) {
 80013e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013e8:	3301      	adds	r3, #1
 80013ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80013ec:	78fb      	ldrb	r3, [r7, #3]
 80013ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80013f0:	429a      	cmp	r2, r3
 80013f2:	dbf0      	blt.n	80013d6 <_Z13parseRFPacketPhh14nRF24_RXResult+0x2a>
		}
		UART_SendChar('\n');
 80013f4:	200a      	movs	r0, #10
 80013f6:	f7ff fe81 	bl	80010fc <_Z13UART_SendCharc>
 80013fa:	e3aa      	b.n	8001b52 <_Z13parseRFPacketPhh14nRF24_RXResult+0x7a6>
	} else {
		memmove(transmitterData.bytesUnion.u8, buf, 32);
 80013fc:	2220      	movs	r2, #32
 80013fe:	6879      	ldr	r1, [r7, #4]
 8001400:	480d      	ldr	r0, [pc, #52]	; (8001438 <_Z13parseRFPacketPhh14nRF24_RXResult+0x8c>)
 8001402:	f00a fddb 	bl	800bfbc <memmove>
		uint8_t packetId = transmitterData.bytesUnion.u8[0] & 0b1111;
 8001406:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <_Z13parseRFPacketPhh14nRF24_RXResult+0x8c>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	f003 030f 	and.w	r3, r3, #15
 800140e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		switch (packetId) {
 8001412:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001416:	2b03      	cmp	r3, #3
 8001418:	f000 81f0 	beq.w	80017fc <_Z13parseRFPacketPhh14nRF24_RXResult+0x450>
 800141c:	2b03      	cmp	r3, #3
 800141e:	f300 8398 	bgt.w	8001b52 <_Z13parseRFPacketPhh14nRF24_RXResult+0x7a6>
 8001422:	2b01      	cmp	r3, #1
 8001424:	d00a      	beq.n	800143c <_Z13parseRFPacketPhh14nRF24_RXResult+0x90>
 8001426:	2b02      	cmp	r3, #2
 8001428:	f000 824d 	beq.w	80018c6 <_Z13parseRFPacketPhh14nRF24_RXResult+0x51a>
 800142c:	e391      	b.n	8001b52 <_Z13parseRFPacketPhh14nRF24_RXResult+0x7a6>
 800142e:	bf00      	nop
 8001430:	0800dfc8 	.word	0x0800dfc8
 8001434:	0800dfdc 	.word	0x0800dfdc
 8001438:	200005e8 	.word	0x200005e8
		case CHANNELDATAID: {
			HAL_GPIO_TogglePin(IO_DBG_1_GPIO_Port, IO_DBG_1_Pin);
 800143c:	2140      	movs	r1, #64	; 0x40
 800143e:	48b9      	ldr	r0, [pc, #740]	; (8001724 <_Z13parseRFPacketPhh14nRF24_RXResult+0x378>)
 8001440:	f005 f9bb 	bl	80067ba <HAL_GPIO_TogglePin>
			setOutput(1, transmitterData.ch_data.channel1);
 8001444:	4bb8      	ldr	r3, [pc, #736]	; (8001728 <_Z13parseRFPacketPhh14nRF24_RXResult+0x37c>)
 8001446:	881b      	ldrh	r3, [r3, #0]
 8001448:	f3c3 1309 	ubfx	r3, r3, #4, #10
 800144c:	b29b      	uxth	r3, r3
 800144e:	4619      	mov	r1, r3
 8001450:	2001      	movs	r0, #1
 8001452:	f7ff fe79 	bl	8001148 <_Z9setOutputht>
			setOutput(2, transmitterData.ch_data.channel2);
 8001456:	4bb4      	ldr	r3, [pc, #720]	; (8001728 <_Z13parseRFPacketPhh14nRF24_RXResult+0x37c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f3c3 3389 	ubfx	r3, r3, #14, #10
 800145e:	b29b      	uxth	r3, r3
 8001460:	4619      	mov	r1, r3
 8001462:	2002      	movs	r0, #2
 8001464:	f7ff fe70 	bl	8001148 <_Z9setOutputht>
			setOutput(3, transmitterData.ch_data.channel3);
 8001468:	4baf      	ldr	r3, [pc, #700]	; (8001728 <_Z13parseRFPacketPhh14nRF24_RXResult+0x37c>)
 800146a:	78da      	ldrb	r2, [r3, #3]
 800146c:	791b      	ldrb	r3, [r3, #4]
 800146e:	f003 0303 	and.w	r3, r3, #3
 8001472:	021b      	lsls	r3, r3, #8
 8001474:	4313      	orrs	r3, r2
 8001476:	b29b      	uxth	r3, r3
 8001478:	4619      	mov	r1, r3
 800147a:	2003      	movs	r0, #3
 800147c:	f7ff fe64 	bl	8001148 <_Z9setOutputht>
			setOutput(4, transmitterData.ch_data.channel4);
 8001480:	4ba9      	ldr	r3, [pc, #676]	; (8001728 <_Z13parseRFPacketPhh14nRF24_RXResult+0x37c>)
 8001482:	889b      	ldrh	r3, [r3, #4]
 8001484:	f3c3 0389 	ubfx	r3, r3, #2, #10
 8001488:	b29b      	uxth	r3, r3
 800148a:	4619      	mov	r1, r3
 800148c:	2004      	movs	r0, #4
 800148e:	f7ff fe5b 	bl	8001148 <_Z9setOutputht>
			setOutput(5, transmitterData.ch_data.channel5);
 8001492:	4ba5      	ldr	r3, [pc, #660]	; (8001728 <_Z13parseRFPacketPhh14nRF24_RXResult+0x37c>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f3c3 3309 	ubfx	r3, r3, #12, #10
 800149a:	b29b      	uxth	r3, r3
 800149c:	4619      	mov	r1, r3
 800149e:	2005      	movs	r0, #5
 80014a0:	f7ff fe52 	bl	8001148 <_Z9setOutputht>
			setOutput(6, transmitterData.ch_data.channel6);
 80014a4:	4ba0      	ldr	r3, [pc, #640]	; (8001728 <_Z13parseRFPacketPhh14nRF24_RXResult+0x37c>)
 80014a6:	88db      	ldrh	r3, [r3, #6]
 80014a8:	f3c3 1389 	ubfx	r3, r3, #6, #10
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	4619      	mov	r1, r3
 80014b0:	2006      	movs	r0, #6
 80014b2:	f7ff fe49 	bl	8001148 <_Z9setOutputht>
			setOutput(7, transmitterData.ch_data.channel7);
 80014b6:	4b9c      	ldr	r3, [pc, #624]	; (8001728 <_Z13parseRFPacketPhh14nRF24_RXResult+0x37c>)
 80014b8:	891b      	ldrh	r3, [r3, #8]
 80014ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014be:	b29b      	uxth	r3, r3
 80014c0:	4619      	mov	r1, r3
 80014c2:	2007      	movs	r0, #7
 80014c4:	f7ff fe40 	bl	8001148 <_Z9setOutputht>
			setOutput(8, transmitterData.ch_data.channel8);
 80014c8:	4b97      	ldr	r3, [pc, #604]	; (8001728 <_Z13parseRFPacketPhh14nRF24_RXResult+0x37c>)
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f3c3 2389 	ubfx	r3, r3, #10, #10
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	4619      	mov	r1, r3
 80014d4:	2008      	movs	r0, #8
 80014d6:	f7ff fe37 	bl	8001148 <_Z9setOutputht>
			setOutput(9, transmitterData.ch_data.channel9);
 80014da:	4b93      	ldr	r3, [pc, #588]	; (8001728 <_Z13parseRFPacketPhh14nRF24_RXResult+0x37c>)
 80014dc:	895b      	ldrh	r3, [r3, #10]
 80014de:	f3c3 1309 	ubfx	r3, r3, #4, #10
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	4619      	mov	r1, r3
 80014e6:	2009      	movs	r0, #9
 80014e8:	f7ff fe2e 	bl	8001148 <_Z9setOutputht>
			setOutput(10, transmitterData.ch_data.channel10);
 80014ec:	4b8e      	ldr	r3, [pc, #568]	; (8001728 <_Z13parseRFPacketPhh14nRF24_RXResult+0x37c>)
 80014ee:	7ada      	ldrb	r2, [r3, #11]
 80014f0:	0992      	lsrs	r2, r2, #6
 80014f2:	b2d2      	uxtb	r2, r2
 80014f4:	7b1b      	ldrb	r3, [r3, #12]
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4313      	orrs	r3, r2
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	4619      	mov	r1, r3
 80014fe:	200a      	movs	r0, #10
 8001500:	f7ff fe22 	bl	8001148 <_Z9setOutputht>
			setOutput(11, transmitterData.ch_data.channel11);
 8001504:	4b88      	ldr	r3, [pc, #544]	; (8001728 <_Z13parseRFPacketPhh14nRF24_RXResult+0x37c>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	f3c3 2309 	ubfx	r3, r3, #8, #10
 800150c:	b29b      	uxth	r3, r3
 800150e:	4619      	mov	r1, r3
 8001510:	200b      	movs	r0, #11
 8001512:	f7ff fe19 	bl	8001148 <_Z9setOutputht>
			setOutput(12, transmitterData.ch_data.channel12);
 8001516:	4b84      	ldr	r3, [pc, #528]	; (8001728 <_Z13parseRFPacketPhh14nRF24_RXResult+0x37c>)
 8001518:	89db      	ldrh	r3, [r3, #14]
 800151a:	f3c3 0389 	ubfx	r3, r3, #2, #10
 800151e:	b29b      	uxth	r3, r3
 8001520:	4619      	mov	r1, r3
 8001522:	200c      	movs	r0, #12
 8001524:	f7ff fe10 	bl	8001148 <_Z9setOutputht>
			setOutput(13, transmitterData.ch_data.channel13);
 8001528:	4b7f      	ldr	r3, [pc, #508]	; (8001728 <_Z13parseRFPacketPhh14nRF24_RXResult+0x37c>)
 800152a:	7bda      	ldrb	r2, [r3, #15]
 800152c:	0912      	lsrs	r2, r2, #4
 800152e:	b2d2      	uxtb	r2, r2
 8001530:	7c1b      	ldrb	r3, [r3, #16]
 8001532:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001536:	011b      	lsls	r3, r3, #4
 8001538:	4313      	orrs	r3, r2
 800153a:	b29b      	uxth	r3, r3
 800153c:	4619      	mov	r1, r3
 800153e:	200d      	movs	r0, #13
 8001540:	f7ff fe02 	bl	8001148 <_Z9setOutputht>
			setOutput(14, transmitterData.ch_data.channel14);
 8001544:	4b78      	ldr	r3, [pc, #480]	; (8001728 <_Z13parseRFPacketPhh14nRF24_RXResult+0x37c>)
 8001546:	8a1b      	ldrh	r3, [r3, #16]
 8001548:	f3c3 1389 	ubfx	r3, r3, #6, #10
 800154c:	b29b      	uxth	r3, r3
 800154e:	4619      	mov	r1, r3
 8001550:	200e      	movs	r0, #14
 8001552:	f7ff fdf9 	bl	8001148 <_Z9setOutputht>
			setOutput(15, transmitterData.ch_data.channel15);
 8001556:	4b74      	ldr	r3, [pc, #464]	; (8001728 <_Z13parseRFPacketPhh14nRF24_RXResult+0x37c>)
 8001558:	8a5b      	ldrh	r3, [r3, #18]
 800155a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800155e:	b29b      	uxth	r3, r3
 8001560:	4619      	mov	r1, r3
 8001562:	200f      	movs	r0, #15
 8001564:	f7ff fdf0 	bl	8001148 <_Z9setOutputht>
			setOutput(16, transmitterData.ch_data.channel16);
 8001568:	4b6f      	ldr	r3, [pc, #444]	; (8001728 <_Z13parseRFPacketPhh14nRF24_RXResult+0x37c>)
 800156a:	7cda      	ldrb	r2, [r3, #19]
 800156c:	0892      	lsrs	r2, r2, #2
 800156e:	b2d2      	uxtb	r2, r2
 8001570:	7d1b      	ldrb	r3, [r3, #20]
 8001572:	f003 030f 	and.w	r3, r3, #15
 8001576:	019b      	lsls	r3, r3, #6
 8001578:	4313      	orrs	r3, r2
 800157a:	b29b      	uxth	r3, r3
 800157c:	4619      	mov	r1, r3
 800157e:	2010      	movs	r0, #16
 8001580:	f7ff fde2 	bl	8001148 <_Z9setOutputht>
			setOutput(17, transmitterData.ch_data.channel17);
 8001584:	4b68      	ldr	r3, [pc, #416]	; (8001728 <_Z13parseRFPacketPhh14nRF24_RXResult+0x37c>)
 8001586:	8a9b      	ldrh	r3, [r3, #20]
 8001588:	f3c3 1309 	ubfx	r3, r3, #4, #10
 800158c:	b29b      	uxth	r3, r3
 800158e:	4619      	mov	r1, r3
 8001590:	2011      	movs	r0, #17
 8001592:	f7ff fdd9 	bl	8001148 <_Z9setOutputht>
			setOutput(18, transmitterData.ch_data.channel18);
 8001596:	4b64      	ldr	r3, [pc, #400]	; (8001728 <_Z13parseRFPacketPhh14nRF24_RXResult+0x37c>)
 8001598:	695b      	ldr	r3, [r3, #20]
 800159a:	f3c3 3389 	ubfx	r3, r3, #14, #10
 800159e:	b29b      	uxth	r3, r3
 80015a0:	4619      	mov	r1, r3
 80015a2:	2012      	movs	r0, #18
 80015a4:	f7ff fdd0 	bl	8001148 <_Z9setOutputht>
			setOutput(19, transmitterData.ch_data.channel19);
 80015a8:	4b5f      	ldr	r3, [pc, #380]	; (8001728 <_Z13parseRFPacketPhh14nRF24_RXResult+0x37c>)
 80015aa:	7dda      	ldrb	r2, [r3, #23]
 80015ac:	7e1b      	ldrb	r3, [r3, #24]
 80015ae:	f003 0303 	and.w	r3, r3, #3
 80015b2:	021b      	lsls	r3, r3, #8
 80015b4:	4313      	orrs	r3, r2
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	4619      	mov	r1, r3
 80015ba:	2013      	movs	r0, #19
 80015bc:	f7ff fdc4 	bl	8001148 <_Z9setOutputht>
			setOutput(20, transmitterData.ch_data.channel20);
 80015c0:	4b59      	ldr	r3, [pc, #356]	; (8001728 <_Z13parseRFPacketPhh14nRF24_RXResult+0x37c>)
 80015c2:	8b1b      	ldrh	r3, [r3, #24]
 80015c4:	f3c3 0389 	ubfx	r3, r3, #2, #10
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	4619      	mov	r1, r3
 80015cc:	2014      	movs	r0, #20
 80015ce:	f7ff fdbb 	bl	8001148 <_Z9setOutputht>
			setOutput(21, transmitterData.ch_data.channel21);
 80015d2:	4b55      	ldr	r3, [pc, #340]	; (8001728 <_Z13parseRFPacketPhh14nRF24_RXResult+0x37c>)
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	f3c3 3309 	ubfx	r3, r3, #12, #10
 80015da:	b29b      	uxth	r3, r3
 80015dc:	4619      	mov	r1, r3
 80015de:	2015      	movs	r0, #21
 80015e0:	f7ff fdb2 	bl	8001148 <_Z9setOutputht>
			setOutput(22, transmitterData.ch_data.channel22);
 80015e4:	4b50      	ldr	r3, [pc, #320]	; (8001728 <_Z13parseRFPacketPhh14nRF24_RXResult+0x37c>)
 80015e6:	8b5b      	ldrh	r3, [r3, #26]
 80015e8:	f3c3 1389 	ubfx	r3, r3, #6, #10
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	4619      	mov	r1, r3
 80015f0:	2016      	movs	r0, #22
 80015f2:	f7ff fda9 	bl	8001148 <_Z9setOutputht>
			setOutput(23, transmitterData.ch_data.channel23);
 80015f6:	4b4c      	ldr	r3, [pc, #304]	; (8001728 <_Z13parseRFPacketPhh14nRF24_RXResult+0x37c>)
 80015f8:	8b9b      	ldrh	r3, [r3, #28]
 80015fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015fe:	b29b      	uxth	r3, r3
 8001600:	4619      	mov	r1, r3
 8001602:	2017      	movs	r0, #23
 8001604:	f7ff fda0 	bl	8001148 <_Z9setOutputht>
			setOutput(24, transmitterData.ch_data.channel24);
 8001608:	4b47      	ldr	r3, [pc, #284]	; (8001728 <_Z13parseRFPacketPhh14nRF24_RXResult+0x37c>)
 800160a:	69db      	ldr	r3, [r3, #28]
 800160c:	f3c3 2389 	ubfx	r3, r3, #10, #10
 8001610:	b29b      	uxth	r3, r3
 8001612:	4619      	mov	r1, r3
 8001614:	2018      	movs	r0, #24
 8001616:	f7ff fd97 	bl	8001148 <_Z9setOutputht>

			uint32_t now = HAL_GetTick();
 800161a:	f004 fbff 	bl	8005e1c <HAL_GetTick>
 800161e:	6138      	str	r0, [r7, #16]
			uint8_t txBuf[6];
			txBuf[0] = 0;
 8001620:	2300      	movs	r3, #0
 8001622:	723b      	strb	r3, [r7, #8]
			txBuf[1] = 0;
 8001624:	2300      	movs	r3, #0
 8001626:	727b      	strb	r3, [r7, #9]
			txBuf[2] = now >> 24 & 0xFF;
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	0e1b      	lsrs	r3, r3, #24
 800162c:	b2db      	uxtb	r3, r3
 800162e:	72bb      	strb	r3, [r7, #10]
			txBuf[3] = now >> 16 & 0xFF;
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	0c1b      	lsrs	r3, r3, #16
 8001634:	b2db      	uxtb	r3, r3
 8001636:	72fb      	strb	r3, [r7, #11]
			txBuf[4] = now >> 8 & 0xFF;
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	0a1b      	lsrs	r3, r3, #8
 800163c:	b2db      	uxtb	r3, r3
 800163e:	733b      	strb	r3, [r7, #12]
			txBuf[5] = now >> 0 & 0xFF;
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	b2db      	uxtb	r3, r3
 8001644:	737b      	strb	r3, [r7, #13]
			nRF24_WriteAckPayload(pipeLine, txBuf, 6);
 8001646:	f107 0108 	add.w	r1, r7, #8
 800164a:	78bb      	ldrb	r3, [r7, #2]
 800164c:	2206      	movs	r2, #6
 800164e:	4618      	mov	r0, r3
 8001650:	f009 f915 	bl	800a87e <_Z21nRF24_WriteAckPayload14nRF24_RXResultPhh>
			sbusTx.set_ch(1, transmitterData.ch_data.channel1);
 8001654:	4b34      	ldr	r3, [pc, #208]	; (8001728 <_Z13parseRFPacketPhh14nRF24_RXResult+0x37c>)
 8001656:	881b      	ldrh	r3, [r3, #0]
 8001658:	f3c3 1309 	ubfx	r3, r3, #4, #10
 800165c:	b29b      	uxth	r3, r3
 800165e:	b21b      	sxth	r3, r3
 8001660:	461a      	mov	r2, r3
 8001662:	2101      	movs	r1, #1
 8001664:	4831      	ldr	r0, [pc, #196]	; (800172c <_Z13parseRFPacketPhh14nRF24_RXResult+0x380>)
 8001666:	f7ff fc72 	bl	8000f4e <_ZN3bfs6SbusTx6set_chEhs>
			sbusTx.set_ch(2, transmitterData.ch_data.channel2);
 800166a:	4b2f      	ldr	r3, [pc, #188]	; (8001728 <_Z13parseRFPacketPhh14nRF24_RXResult+0x37c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f3c3 3389 	ubfx	r3, r3, #14, #10
 8001672:	b29b      	uxth	r3, r3
 8001674:	b21b      	sxth	r3, r3
 8001676:	461a      	mov	r2, r3
 8001678:	2102      	movs	r1, #2
 800167a:	482c      	ldr	r0, [pc, #176]	; (800172c <_Z13parseRFPacketPhh14nRF24_RXResult+0x380>)
 800167c:	f7ff fc67 	bl	8000f4e <_ZN3bfs6SbusTx6set_chEhs>
			sbusTx.set_ch(3, transmitterData.ch_data.channel3);
 8001680:	4b29      	ldr	r3, [pc, #164]	; (8001728 <_Z13parseRFPacketPhh14nRF24_RXResult+0x37c>)
 8001682:	78da      	ldrb	r2, [r3, #3]
 8001684:	791b      	ldrb	r3, [r3, #4]
 8001686:	f003 0303 	and.w	r3, r3, #3
 800168a:	021b      	lsls	r3, r3, #8
 800168c:	4313      	orrs	r3, r2
 800168e:	b29b      	uxth	r3, r3
 8001690:	b21b      	sxth	r3, r3
 8001692:	461a      	mov	r2, r3
 8001694:	2103      	movs	r1, #3
 8001696:	4825      	ldr	r0, [pc, #148]	; (800172c <_Z13parseRFPacketPhh14nRF24_RXResult+0x380>)
 8001698:	f7ff fc59 	bl	8000f4e <_ZN3bfs6SbusTx6set_chEhs>
			sbusTx.set_ch(4, transmitterData.ch_data.channel4);
 800169c:	4b22      	ldr	r3, [pc, #136]	; (8001728 <_Z13parseRFPacketPhh14nRF24_RXResult+0x37c>)
 800169e:	889b      	ldrh	r3, [r3, #4]
 80016a0:	f3c3 0389 	ubfx	r3, r3, #2, #10
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	b21b      	sxth	r3, r3
 80016a8:	461a      	mov	r2, r3
 80016aa:	2104      	movs	r1, #4
 80016ac:	481f      	ldr	r0, [pc, #124]	; (800172c <_Z13parseRFPacketPhh14nRF24_RXResult+0x380>)
 80016ae:	f7ff fc4e 	bl	8000f4e <_ZN3bfs6SbusTx6set_chEhs>
			sbusTx.set_ch(5, transmitterData.ch_data.channel5);
 80016b2:	4b1d      	ldr	r3, [pc, #116]	; (8001728 <_Z13parseRFPacketPhh14nRF24_RXResult+0x37c>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f3c3 3309 	ubfx	r3, r3, #12, #10
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	b21b      	sxth	r3, r3
 80016be:	461a      	mov	r2, r3
 80016c0:	2105      	movs	r1, #5
 80016c2:	481a      	ldr	r0, [pc, #104]	; (800172c <_Z13parseRFPacketPhh14nRF24_RXResult+0x380>)
 80016c4:	f7ff fc43 	bl	8000f4e <_ZN3bfs6SbusTx6set_chEhs>
			sbusTx.set_ch(6, transmitterData.ch_data.channel6);
 80016c8:	4b17      	ldr	r3, [pc, #92]	; (8001728 <_Z13parseRFPacketPhh14nRF24_RXResult+0x37c>)
 80016ca:	88db      	ldrh	r3, [r3, #6]
 80016cc:	f3c3 1389 	ubfx	r3, r3, #6, #10
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	b21b      	sxth	r3, r3
 80016d4:	461a      	mov	r2, r3
 80016d6:	2106      	movs	r1, #6
 80016d8:	4814      	ldr	r0, [pc, #80]	; (800172c <_Z13parseRFPacketPhh14nRF24_RXResult+0x380>)
 80016da:	f7ff fc38 	bl	8000f4e <_ZN3bfs6SbusTx6set_chEhs>
			sbusTx.set_ch(7, transmitterData.ch_data.channel7);
 80016de:	4b12      	ldr	r3, [pc, #72]	; (8001728 <_Z13parseRFPacketPhh14nRF24_RXResult+0x37c>)
 80016e0:	891b      	ldrh	r3, [r3, #8]
 80016e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	b21b      	sxth	r3, r3
 80016ea:	461a      	mov	r2, r3
 80016ec:	2107      	movs	r1, #7
 80016ee:	480f      	ldr	r0, [pc, #60]	; (800172c <_Z13parseRFPacketPhh14nRF24_RXResult+0x380>)
 80016f0:	f7ff fc2d 	bl	8000f4e <_ZN3bfs6SbusTx6set_chEhs>
			sbusTx.set_ch(8, transmitterData.ch_data.channel8);
 80016f4:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <_Z13parseRFPacketPhh14nRF24_RXResult+0x37c>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f3c3 2389 	ubfx	r3, r3, #10, #10
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	b21b      	sxth	r3, r3
 8001700:	461a      	mov	r2, r3
 8001702:	2108      	movs	r1, #8
 8001704:	4809      	ldr	r0, [pc, #36]	; (800172c <_Z13parseRFPacketPhh14nRF24_RXResult+0x380>)
 8001706:	f7ff fc22 	bl	8000f4e <_ZN3bfs6SbusTx6set_chEhs>
			sbusTx.set_ch(9, transmitterData.ch_data.channel9);
 800170a:	4b07      	ldr	r3, [pc, #28]	; (8001728 <_Z13parseRFPacketPhh14nRF24_RXResult+0x37c>)
 800170c:	895b      	ldrh	r3, [r3, #10]
 800170e:	f3c3 1309 	ubfx	r3, r3, #4, #10
 8001712:	b29b      	uxth	r3, r3
 8001714:	b21b      	sxth	r3, r3
 8001716:	461a      	mov	r2, r3
 8001718:	2109      	movs	r1, #9
 800171a:	4804      	ldr	r0, [pc, #16]	; (800172c <_Z13parseRFPacketPhh14nRF24_RXResult+0x380>)
 800171c:	f7ff fc17 	bl	8000f4e <_ZN3bfs6SbusTx6set_chEhs>
 8001720:	e006      	b.n	8001730 <_Z13parseRFPacketPhh14nRF24_RXResult+0x384>
 8001722:	bf00      	nop
 8001724:	40020c00 	.word	0x40020c00
 8001728:	200005e8 	.word	0x200005e8
 800172c:	20001ea0 	.word	0x20001ea0
			sbusTx.set_ch(10, transmitterData.ch_data.channel10);
 8001730:	4ba1      	ldr	r3, [pc, #644]	; (80019b8 <_Z13parseRFPacketPhh14nRF24_RXResult+0x60c>)
 8001732:	7ada      	ldrb	r2, [r3, #11]
 8001734:	0992      	lsrs	r2, r2, #6
 8001736:	b2d2      	uxtb	r2, r2
 8001738:	7b1b      	ldrb	r3, [r3, #12]
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4313      	orrs	r3, r2
 800173e:	b29b      	uxth	r3, r3
 8001740:	b21b      	sxth	r3, r3
 8001742:	461a      	mov	r2, r3
 8001744:	210a      	movs	r1, #10
 8001746:	489d      	ldr	r0, [pc, #628]	; (80019bc <_Z13parseRFPacketPhh14nRF24_RXResult+0x610>)
 8001748:	f7ff fc01 	bl	8000f4e <_ZN3bfs6SbusTx6set_chEhs>
			sbusTx.set_ch(11, transmitterData.ch_data.channel11);
 800174c:	4b9a      	ldr	r3, [pc, #616]	; (80019b8 <_Z13parseRFPacketPhh14nRF24_RXResult+0x60c>)
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	f3c3 2309 	ubfx	r3, r3, #8, #10
 8001754:	b29b      	uxth	r3, r3
 8001756:	b21b      	sxth	r3, r3
 8001758:	461a      	mov	r2, r3
 800175a:	210b      	movs	r1, #11
 800175c:	4897      	ldr	r0, [pc, #604]	; (80019bc <_Z13parseRFPacketPhh14nRF24_RXResult+0x610>)
 800175e:	f7ff fbf6 	bl	8000f4e <_ZN3bfs6SbusTx6set_chEhs>
			sbusTx.set_ch(12, transmitterData.ch_data.channel12);
 8001762:	4b95      	ldr	r3, [pc, #596]	; (80019b8 <_Z13parseRFPacketPhh14nRF24_RXResult+0x60c>)
 8001764:	89db      	ldrh	r3, [r3, #14]
 8001766:	f3c3 0389 	ubfx	r3, r3, #2, #10
 800176a:	b29b      	uxth	r3, r3
 800176c:	b21b      	sxth	r3, r3
 800176e:	461a      	mov	r2, r3
 8001770:	210c      	movs	r1, #12
 8001772:	4892      	ldr	r0, [pc, #584]	; (80019bc <_Z13parseRFPacketPhh14nRF24_RXResult+0x610>)
 8001774:	f7ff fbeb 	bl	8000f4e <_ZN3bfs6SbusTx6set_chEhs>
			sbusTx.set_ch(13, transmitterData.ch_data.channel13);
 8001778:	4b8f      	ldr	r3, [pc, #572]	; (80019b8 <_Z13parseRFPacketPhh14nRF24_RXResult+0x60c>)
 800177a:	7bda      	ldrb	r2, [r3, #15]
 800177c:	0912      	lsrs	r2, r2, #4
 800177e:	b2d2      	uxtb	r2, r2
 8001780:	7c1b      	ldrb	r3, [r3, #16]
 8001782:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001786:	011b      	lsls	r3, r3, #4
 8001788:	4313      	orrs	r3, r2
 800178a:	b29b      	uxth	r3, r3
 800178c:	b21b      	sxth	r3, r3
 800178e:	461a      	mov	r2, r3
 8001790:	210d      	movs	r1, #13
 8001792:	488a      	ldr	r0, [pc, #552]	; (80019bc <_Z13parseRFPacketPhh14nRF24_RXResult+0x610>)
 8001794:	f7ff fbdb 	bl	8000f4e <_ZN3bfs6SbusTx6set_chEhs>
			sbusTx.set_ch(14, transmitterData.ch_data.channel14);
 8001798:	4b87      	ldr	r3, [pc, #540]	; (80019b8 <_Z13parseRFPacketPhh14nRF24_RXResult+0x60c>)
 800179a:	8a1b      	ldrh	r3, [r3, #16]
 800179c:	f3c3 1389 	ubfx	r3, r3, #6, #10
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	b21b      	sxth	r3, r3
 80017a4:	461a      	mov	r2, r3
 80017a6:	210e      	movs	r1, #14
 80017a8:	4884      	ldr	r0, [pc, #528]	; (80019bc <_Z13parseRFPacketPhh14nRF24_RXResult+0x610>)
 80017aa:	f7ff fbd0 	bl	8000f4e <_ZN3bfs6SbusTx6set_chEhs>
			sbusTx.set_ch(15, transmitterData.ch_data.channel15);
 80017ae:	4b82      	ldr	r3, [pc, #520]	; (80019b8 <_Z13parseRFPacketPhh14nRF24_RXResult+0x60c>)
 80017b0:	8a5b      	ldrh	r3, [r3, #18]
 80017b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	b21b      	sxth	r3, r3
 80017ba:	461a      	mov	r2, r3
 80017bc:	210f      	movs	r1, #15
 80017be:	487f      	ldr	r0, [pc, #508]	; (80019bc <_Z13parseRFPacketPhh14nRF24_RXResult+0x610>)
 80017c0:	f7ff fbc5 	bl	8000f4e <_ZN3bfs6SbusTx6set_chEhs>
			sbusTx.set_ch(16, transmitterData.ch_data.channel16);
 80017c4:	4b7c      	ldr	r3, [pc, #496]	; (80019b8 <_Z13parseRFPacketPhh14nRF24_RXResult+0x60c>)
 80017c6:	7cda      	ldrb	r2, [r3, #19]
 80017c8:	0892      	lsrs	r2, r2, #2
 80017ca:	b2d2      	uxtb	r2, r2
 80017cc:	7d1b      	ldrb	r3, [r3, #20]
 80017ce:	f003 030f 	and.w	r3, r3, #15
 80017d2:	019b      	lsls	r3, r3, #6
 80017d4:	4313      	orrs	r3, r2
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	b21b      	sxth	r3, r3
 80017da:	461a      	mov	r2, r3
 80017dc:	2110      	movs	r1, #16
 80017de:	4877      	ldr	r0, [pc, #476]	; (80019bc <_Z13parseRFPacketPhh14nRF24_RXResult+0x610>)
 80017e0:	f7ff fbb5 	bl	8000f4e <_ZN3bfs6SbusTx6set_chEhs>
			sbusTx.failsafe(false);
 80017e4:	2100      	movs	r1, #0
 80017e6:	4875      	ldr	r0, [pc, #468]	; (80019bc <_Z13parseRFPacketPhh14nRF24_RXResult+0x610>)
 80017e8:	f7ff fb91 	bl	8000f0e <_ZN3bfs6SbusTx8failsafeEb>
			sbusTx.lost_frame(false);
 80017ec:	2100      	movs	r1, #0
 80017ee:	4873      	ldr	r0, [pc, #460]	; (80019bc <_Z13parseRFPacketPhh14nRF24_RXResult+0x610>)
 80017f0:	f7ff fb9d 	bl	8000f2e <_ZN3bfs6SbusTx10lost_frameEb>
			chPacketReceived = true;
 80017f4:	4b72      	ldr	r3, [pc, #456]	; (80019c0 <_Z13parseRFPacketPhh14nRF24_RXResult+0x614>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	701a      	strb	r2, [r3, #0]
//					receiverData.bytesUnion.u8[0] = SETTINGSDATAID;
//					nRF24_WriteAckPayload(pipeLine, receiverData.bytesUnion.u8, 6);
//					memset(&receivedSettings, 0, sizeof(Settings));
			break;
 80017fa:	e1aa      	b.n	8001b52 <_Z13parseRFPacketPhh14nRF24_RXResult+0x7a6>
		}
		case SETTINGSDATASETUPID: {
			uint16_t crc = gencrc(transmitterData.bytesUnion.u8, RFPACKETLENGTH - 2);
 80017fc:	211e      	movs	r1, #30
 80017fe:	486e      	ldr	r0, [pc, #440]	; (80019b8 <_Z13parseRFPacketPhh14nRF24_RXResult+0x60c>)
 8001800:	f008 fbe8 	bl	8009fd4 <gencrc>
 8001804:	4603      	mov	r3, r0
 8001806:	85bb      	strh	r3, [r7, #44]	; 0x2c
			uint16_t recCRC = transmitterData.settingsData.crc;
 8001808:	4b6b      	ldr	r3, [pc, #428]	; (80019b8 <_Z13parseRFPacketPhh14nRF24_RXResult+0x60c>)
 800180a:	8bdb      	ldrh	r3, [r3, #30]
 800180c:	857b      	strh	r3, [r7, #42]	; 0x2a
			if(crc != recCRC){
 800180e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001810:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001812:	429a      	cmp	r2, r3
 8001814:	d025      	beq.n	8001862 <_Z13parseRFPacketPhh14nRF24_RXResult+0x4b6>
				printf("MODULO CRC Incorrect. Calc 0x%02X. Received 0x%02X\r\n", recCRC,crc);
 8001816:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001818:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800181a:	4619      	mov	r1, r3
 800181c:	4869      	ldr	r0, [pc, #420]	; (80019c4 <_Z13parseRFPacketPhh14nRF24_RXResult+0x618>)
 800181e:	f00a fa67 	bl	800bcf0 <iprintf>
				printf("packet_%d: ", receivedSettingsPacket);
 8001822:	4b69      	ldr	r3, [pc, #420]	; (80019c8 <_Z13parseRFPacketPhh14nRF24_RXResult+0x61c>)
 8001824:	881b      	ldrh	r3, [r3, #0]
 8001826:	4619      	mov	r1, r3
 8001828:	4868      	ldr	r0, [pc, #416]	; (80019cc <_Z13parseRFPacketPhh14nRF24_RXResult+0x620>)
 800182a:	f00a fa61 	bl	800bcf0 <iprintf>
				for (int b = 0; b < 32; b++) printf("0x%02X ", transmitterData.bytesUnion.u8[b]);
 800182e:	2300      	movs	r3, #0
 8001830:	63bb      	str	r3, [r7, #56]	; 0x38
 8001832:	e00a      	b.n	800184a <_Z13parseRFPacketPhh14nRF24_RXResult+0x49e>
 8001834:	4a60      	ldr	r2, [pc, #384]	; (80019b8 <_Z13parseRFPacketPhh14nRF24_RXResult+0x60c>)
 8001836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001838:	4413      	add	r3, r2
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	4619      	mov	r1, r3
 800183e:	4864      	ldr	r0, [pc, #400]	; (80019d0 <_Z13parseRFPacketPhh14nRF24_RXResult+0x624>)
 8001840:	f00a fa56 	bl	800bcf0 <iprintf>
 8001844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001846:	3301      	adds	r3, #1
 8001848:	63bb      	str	r3, [r7, #56]	; 0x38
 800184a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800184c:	2b1f      	cmp	r3, #31
 800184e:	ddf1      	ble.n	8001834 <_Z13parseRFPacketPhh14nRF24_RXResult+0x488>
				printf("\r\n");
 8001850:	4860      	ldr	r0, [pc, #384]	; (80019d4 <_Z13parseRFPacketPhh14nRF24_RXResult+0x628>)
 8001852:	f00a fab3 	bl	800bdbc <puts>
				receiverData.settingsDataAck.settingsPacket = 0; // Invalid packet
 8001856:	4b60      	ldr	r3, [pc, #384]	; (80019d8 <_Z13parseRFPacketPhh14nRF24_RXResult+0x62c>)
 8001858:	2200      	movs	r2, #0
 800185a:	705a      	strb	r2, [r3, #1]
 800185c:	2200      	movs	r2, #0
 800185e:	709a      	strb	r2, [r3, #2]
				receiverData.bytesUnion.u8[0] = SETTINGSDATAID;
				nRF24_WriteAckPayload(pipeLine, receiverData.bytesUnion.u8, 1);
				memset(receivedSettings, 0, sizeof(Settings));
				printf("PS %d MOD %d\r\n", readingSettingsPacketAmount,	readingSettingsPacketAmountRest);
			}
			break;
 8001860:	e177      	b.n	8001b52 <_Z13parseRFPacketPhh14nRF24_RXResult+0x7a6>
				HAL_GPIO_TogglePin(IO_DBG_2_GPIO_Port, IO_DBG_2_Pin);
 8001862:	2180      	movs	r1, #128	; 0x80
 8001864:	485d      	ldr	r0, [pc, #372]	; (80019dc <_Z13parseRFPacketPhh14nRF24_RXResult+0x630>)
 8001866:	f004 ffa8 	bl	80067ba <HAL_GPIO_TogglePin>
				readingSettings = 1;
 800186a:	4b5d      	ldr	r3, [pc, #372]	; (80019e0 <_Z13parseRFPacketPhh14nRF24_RXResult+0x634>)
 800186c:	2201      	movs	r2, #1
 800186e:	701a      	strb	r2, [r3, #0]
				readingSettingsPacketAmount = (transmitterData.bytesUnion.u8[1] << 8) | transmitterData.bytesUnion.u8[2];
 8001870:	4b51      	ldr	r3, [pc, #324]	; (80019b8 <_Z13parseRFPacketPhh14nRF24_RXResult+0x60c>)
 8001872:	785b      	ldrb	r3, [r3, #1]
 8001874:	021b      	lsls	r3, r3, #8
 8001876:	b21a      	sxth	r2, r3
 8001878:	4b4f      	ldr	r3, [pc, #316]	; (80019b8 <_Z13parseRFPacketPhh14nRF24_RXResult+0x60c>)
 800187a:	789b      	ldrb	r3, [r3, #2]
 800187c:	b21b      	sxth	r3, r3
 800187e:	4313      	orrs	r3, r2
 8001880:	b21b      	sxth	r3, r3
 8001882:	b29a      	uxth	r2, r3
 8001884:	4b57      	ldr	r3, [pc, #348]	; (80019e4 <_Z13parseRFPacketPhh14nRF24_RXResult+0x638>)
 8001886:	801a      	strh	r2, [r3, #0]
				readingSettingsPacketAmountRest = transmitterData.bytesUnion.u8[3];
 8001888:	4b4b      	ldr	r3, [pc, #300]	; (80019b8 <_Z13parseRFPacketPhh14nRF24_RXResult+0x60c>)
 800188a:	78da      	ldrb	r2, [r3, #3]
 800188c:	4b56      	ldr	r3, [pc, #344]	; (80019e8 <_Z13parseRFPacketPhh14nRF24_RXResult+0x63c>)
 800188e:	701a      	strb	r2, [r3, #0]
				receiverData.bytesUnion.u8[0] = SETTINGSDATAID;
 8001890:	4b51      	ldr	r3, [pc, #324]	; (80019d8 <_Z13parseRFPacketPhh14nRF24_RXResult+0x62c>)
 8001892:	2202      	movs	r2, #2
 8001894:	701a      	strb	r2, [r3, #0]
				nRF24_WriteAckPayload(pipeLine, receiverData.bytesUnion.u8, 1);
 8001896:	78bb      	ldrb	r3, [r7, #2]
 8001898:	2201      	movs	r2, #1
 800189a:	494f      	ldr	r1, [pc, #316]	; (80019d8 <_Z13parseRFPacketPhh14nRF24_RXResult+0x62c>)
 800189c:	4618      	mov	r0, r3
 800189e:	f008 ffee 	bl	800a87e <_Z21nRF24_WriteAckPayload14nRF24_RXResultPhh>
				memset(receivedSettings, 0, sizeof(Settings));
 80018a2:	4b52      	ldr	r3, [pc, #328]	; (80019ec <_Z13parseRFPacketPhh14nRF24_RXResult+0x640>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f641 025b 	movw	r2, #6235	; 0x185b
 80018aa:	2100      	movs	r1, #0
 80018ac:	4618      	mov	r0, r3
 80018ae:	f00a fb9f 	bl	800bff0 <memset>
				printf("PS %d MOD %d\r\n", readingSettingsPacketAmount,	readingSettingsPacketAmountRest);
 80018b2:	4b4c      	ldr	r3, [pc, #304]	; (80019e4 <_Z13parseRFPacketPhh14nRF24_RXResult+0x638>)
 80018b4:	881b      	ldrh	r3, [r3, #0]
 80018b6:	4619      	mov	r1, r3
 80018b8:	4b4b      	ldr	r3, [pc, #300]	; (80019e8 <_Z13parseRFPacketPhh14nRF24_RXResult+0x63c>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	461a      	mov	r2, r3
 80018be:	484c      	ldr	r0, [pc, #304]	; (80019f0 <_Z13parseRFPacketPhh14nRF24_RXResult+0x644>)
 80018c0:	f00a fa16 	bl	800bcf0 <iprintf>
			break;
 80018c4:	e145      	b.n	8001b52 <_Z13parseRFPacketPhh14nRF24_RXResult+0x7a6>
		}
		case SETTINGSDATAID: {
			memset(receiverData.bytesUnion.u8, 0, 32);
 80018c6:	2220      	movs	r2, #32
 80018c8:	2100      	movs	r1, #0
 80018ca:	4843      	ldr	r0, [pc, #268]	; (80019d8 <_Z13parseRFPacketPhh14nRF24_RXResult+0x62c>)
 80018cc:	f00a fb90 	bl	800bff0 <memset>
			receiverData.bytesUnion.u8[0] = SETTINGSDATAID;
 80018d0:	4b41      	ldr	r3, [pc, #260]	; (80019d8 <_Z13parseRFPacketPhh14nRF24_RXResult+0x62c>)
 80018d2:	2202      	movs	r2, #2
 80018d4:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(IO_DBG_2_GPIO_Port, IO_DBG_2_Pin);
 80018d6:	2180      	movs	r1, #128	; 0x80
 80018d8:	4840      	ldr	r0, [pc, #256]	; (80019dc <_Z13parseRFPacketPhh14nRF24_RXResult+0x630>)
 80018da:	f004 ff6e 	bl	80067ba <HAL_GPIO_TogglePin>
			if (readingSettings == 0) {
 80018de:	4b40      	ldr	r3, [pc, #256]	; (80019e0 <_Z13parseRFPacketPhh14nRF24_RXResult+0x634>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d103      	bne.n	80018ee <_Z13parseRFPacketPhh14nRF24_RXResult+0x542>
				printf("SETTINGS SETUP NOT DONE");
 80018e6:	4843      	ldr	r0, [pc, #268]	; (80019f4 <_Z13parseRFPacketPhh14nRF24_RXResult+0x648>)
 80018e8:	f00a fa02 	bl	800bcf0 <iprintf>
 80018ec:	e12a      	b.n	8001b44 <_Z13parseRFPacketPhh14nRF24_RXResult+0x798>
			} else {
				receivedSettingsPacket = transmitterData.settingsData.packetNumber;
 80018ee:	4b32      	ldr	r3, [pc, #200]	; (80019b8 <_Z13parseRFPacketPhh14nRF24_RXResult+0x60c>)
 80018f0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80018f4:	b29a      	uxth	r2, r3
 80018f6:	4b34      	ldr	r3, [pc, #208]	; (80019c8 <_Z13parseRFPacketPhh14nRF24_RXResult+0x61c>)
 80018f8:	801a      	strh	r2, [r3, #0]
//				printf("packet_%d: ", receivedSettingsPacket);
//				for (int b = 0; b < 32; b++) printf("0x%02X ", transmitterData.bytesUnion.u8[b]);
//				printf("\r\n");
				receiverData.settingsDataAck.settingsPacket = receivedSettingsPacket;
 80018fa:	4b33      	ldr	r3, [pc, #204]	; (80019c8 <_Z13parseRFPacketPhh14nRF24_RXResult+0x61c>)
 80018fc:	881a      	ldrh	r2, [r3, #0]
 80018fe:	4b36      	ldr	r3, [pc, #216]	; (80019d8 <_Z13parseRFPacketPhh14nRF24_RXResult+0x62c>)
 8001900:	f8a3 2001 	strh.w	r2, [r3, #1]
				uint8_t *receivedSettingsPtr = (uint8_t*)receivedSettings;
 8001904:	4b39      	ldr	r3, [pc, #228]	; (80019ec <_Z13parseRFPacketPhh14nRF24_RXResult+0x640>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
				uint8_t *tdPtr = (uint8_t*)transmitterData.settingsData.data;
 800190a:	4b3b      	ldr	r3, [pc, #236]	; (80019f8 <_Z13parseRFPacketPhh14nRF24_RXResult+0x64c>)
 800190c:	623b      	str	r3, [r7, #32]
				if (receivedSettingsPacket == readingSettingsPacketAmount) { // If settings packet received is the last packet
 800190e:	4b2e      	ldr	r3, [pc, #184]	; (80019c8 <_Z13parseRFPacketPhh14nRF24_RXResult+0x61c>)
 8001910:	881a      	ldrh	r2, [r3, #0]
 8001912:	4b34      	ldr	r3, [pc, #208]	; (80019e4 <_Z13parseRFPacketPhh14nRF24_RXResult+0x638>)
 8001914:	881b      	ldrh	r3, [r3, #0]
 8001916:	429a      	cmp	r2, r3
 8001918:	d172      	bne.n	8001a00 <_Z13parseRFPacketPhh14nRF24_RXResult+0x654>
					if (readingSettingsPacketAmountRest != 0) { // If there is rest data
 800191a:	4b33      	ldr	r3, [pc, #204]	; (80019e8 <_Z13parseRFPacketPhh14nRF24_RXResult+0x63c>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	f000 8110 	beq.w	8001b44 <_Z13parseRFPacketPhh14nRF24_RXResult+0x798>
						printf("CONFMOD\r\n");
 8001924:	4835      	ldr	r0, [pc, #212]	; (80019fc <_Z13parseRFPacketPhh14nRF24_RXResult+0x650>)
 8001926:	f00a fa49 	bl	800bdbc <puts>
//						receivedSettingsPtr += ((receivedSettingsPacket - 1) * SETTINGSDATASIZE) + readingSettingsPacketAmountRest;
						receivedSettingsPtr += ((receivedSettingsPacket) * SETTINGSDATASIZE);
 800192a:	4b27      	ldr	r3, [pc, #156]	; (80019c8 <_Z13parseRFPacketPhh14nRF24_RXResult+0x61c>)
 800192c:	881b      	ldrh	r3, [r3, #0]
 800192e:	461a      	mov	r2, r3
 8001930:	4613      	mov	r3, r2
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	4413      	add	r3, r2
 8001936:	00da      	lsls	r2, r3, #3
 8001938:	4413      	add	r3, r2
 800193a:	461a      	mov	r2, r3
 800193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193e:	4413      	add	r3, r2
 8001940:	627b      	str	r3, [r7, #36]	; 0x24

						uint16_t crc = gencrc(transmitterData.bytesUnion.u8, RFPACKETLENGTH - 2);
 8001942:	211e      	movs	r1, #30
 8001944:	481c      	ldr	r0, [pc, #112]	; (80019b8 <_Z13parseRFPacketPhh14nRF24_RXResult+0x60c>)
 8001946:	f008 fb45 	bl	8009fd4 <gencrc>
 800194a:	4603      	mov	r3, r0
 800194c:	82fb      	strh	r3, [r7, #22]
						uint16_t recCRC = transmitterData.settingsData.crc;
 800194e:	4b1a      	ldr	r3, [pc, #104]	; (80019b8 <_Z13parseRFPacketPhh14nRF24_RXResult+0x60c>)
 8001950:	8bdb      	ldrh	r3, [r3, #30]
 8001952:	82bb      	strh	r3, [r7, #20]

						if(crc != recCRC){
 8001954:	8afa      	ldrh	r2, [r7, #22]
 8001956:	8abb      	ldrh	r3, [r7, #20]
 8001958:	429a      	cmp	r2, r3
 800195a:	d025      	beq.n	80019a8 <_Z13parseRFPacketPhh14nRF24_RXResult+0x5fc>
							printf("MODULO CRC Incorrect. Calc 0x%02X. Received 0x%02X\r\n", crc, recCRC);
 800195c:	8afb      	ldrh	r3, [r7, #22]
 800195e:	8aba      	ldrh	r2, [r7, #20]
 8001960:	4619      	mov	r1, r3
 8001962:	4818      	ldr	r0, [pc, #96]	; (80019c4 <_Z13parseRFPacketPhh14nRF24_RXResult+0x618>)
 8001964:	f00a f9c4 	bl	800bcf0 <iprintf>
							printf("packet_%d: ", receivedSettingsPacket);
 8001968:	4b17      	ldr	r3, [pc, #92]	; (80019c8 <_Z13parseRFPacketPhh14nRF24_RXResult+0x61c>)
 800196a:	881b      	ldrh	r3, [r3, #0]
 800196c:	4619      	mov	r1, r3
 800196e:	4817      	ldr	r0, [pc, #92]	; (80019cc <_Z13parseRFPacketPhh14nRF24_RXResult+0x620>)
 8001970:	f00a f9be 	bl	800bcf0 <iprintf>
							for (int b = 0; b < 32; b++) printf("0x%02X ", transmitterData.bytesUnion.u8[b]);
 8001974:	2300      	movs	r3, #0
 8001976:	637b      	str	r3, [r7, #52]	; 0x34
 8001978:	e00a      	b.n	8001990 <_Z13parseRFPacketPhh14nRF24_RXResult+0x5e4>
 800197a:	4a0f      	ldr	r2, [pc, #60]	; (80019b8 <_Z13parseRFPacketPhh14nRF24_RXResult+0x60c>)
 800197c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800197e:	4413      	add	r3, r2
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	4619      	mov	r1, r3
 8001984:	4812      	ldr	r0, [pc, #72]	; (80019d0 <_Z13parseRFPacketPhh14nRF24_RXResult+0x624>)
 8001986:	f00a f9b3 	bl	800bcf0 <iprintf>
 800198a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800198c:	3301      	adds	r3, #1
 800198e:	637b      	str	r3, [r7, #52]	; 0x34
 8001990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001992:	2b1f      	cmp	r3, #31
 8001994:	ddf1      	ble.n	800197a <_Z13parseRFPacketPhh14nRF24_RXResult+0x5ce>
							printf("\r\n");
 8001996:	480f      	ldr	r0, [pc, #60]	; (80019d4 <_Z13parseRFPacketPhh14nRF24_RXResult+0x628>)
 8001998:	f00a fa10 	bl	800bdbc <puts>
							receiverData.settingsDataAck.settingsPacket = 0; // Invalid packet
 800199c:	4b0e      	ldr	r3, [pc, #56]	; (80019d8 <_Z13parseRFPacketPhh14nRF24_RXResult+0x62c>)
 800199e:	2200      	movs	r2, #0
 80019a0:	705a      	strb	r2, [r3, #1]
 80019a2:	2200      	movs	r2, #0
 80019a4:	709a      	strb	r2, [r3, #2]
 80019a6:	e0cd      	b.n	8001b44 <_Z13parseRFPacketPhh14nRF24_RXResult+0x798>
						} else{
							memcpy(receivedSettingsPtr, tdPtr,readingSettingsPacketAmountRest);
 80019a8:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <_Z13parseRFPacketPhh14nRF24_RXResult+0x63c>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	461a      	mov	r2, r3
 80019ae:	6a39      	ldr	r1, [r7, #32]
 80019b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80019b2:	f00a fbe9 	bl	800c188 <memcpy>
 80019b6:	e0c5      	b.n	8001b44 <_Z13parseRFPacketPhh14nRF24_RXResult+0x798>
 80019b8:	200005e8 	.word	0x200005e8
 80019bc:	20001ea0 	.word	0x20001ea0
 80019c0:	200005b4 	.word	0x200005b4
 80019c4:	0800dfe4 	.word	0x0800dfe4
 80019c8:	20001ee8 	.word	0x20001ee8
 80019cc:	0800e01c 	.word	0x0800e01c
 80019d0:	0800e028 	.word	0x0800e028
 80019d4:	0800e030 	.word	0x0800e030
 80019d8:	20000608 	.word	0x20000608
 80019dc:	40020c00 	.word	0x40020c00
 80019e0:	20001e88 	.word	0x20001e88
 80019e4:	20001e8a 	.word	0x20001e8a
 80019e8:	20001e8c 	.word	0x20001e8c
 80019ec:	20001e84 	.word	0x20001e84
 80019f0:	0800e034 	.word	0x0800e034
 80019f4:	0800e044 	.word	0x0800e044
 80019f8:	200005eb 	.word	0x200005eb
 80019fc:	0800e05c 	.word	0x0800e05c
						}

					}
				} else if (receivedSettingsPacket == (readingSettingsPacketAmount + 1)) {
 8001a00:	4b55      	ldr	r3, [pc, #340]	; (8001b58 <_Z13parseRFPacketPhh14nRF24_RXResult+0x7ac>)
 8001a02:	881b      	ldrh	r3, [r3, #0]
 8001a04:	461a      	mov	r2, r3
 8001a06:	4b55      	ldr	r3, [pc, #340]	; (8001b5c <_Z13parseRFPacketPhh14nRF24_RXResult+0x7b0>)
 8001a08:	881b      	ldrh	r3, [r3, #0]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d153      	bne.n	8001ab8 <_Z13parseRFPacketPhh14nRF24_RXResult+0x70c>
					// If settings packet received is 1 higher than settings packet amount
					// So the end packet
					uint16_t crc = gencrc(transmitterData.bytesUnion.u8, RFPACKETLENGTH - 2);
 8001a10:	211e      	movs	r1, #30
 8001a12:	4853      	ldr	r0, [pc, #332]	; (8001b60 <_Z13parseRFPacketPhh14nRF24_RXResult+0x7b4>)
 8001a14:	f008 fade 	bl	8009fd4 <gencrc>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	837b      	strh	r3, [r7, #26]
					uint16_t recCRC = transmitterData.settingsData.crc;
 8001a1c:	4b50      	ldr	r3, [pc, #320]	; (8001b60 <_Z13parseRFPacketPhh14nRF24_RXResult+0x7b4>)
 8001a1e:	8bdb      	ldrh	r3, [r3, #30]
 8001a20:	833b      	strh	r3, [r7, #24]

					if(crc != recCRC){
 8001a22:	8b7a      	ldrh	r2, [r7, #26]
 8001a24:	8b3b      	ldrh	r3, [r7, #24]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d025      	beq.n	8001a76 <_Z13parseRFPacketPhh14nRF24_RXResult+0x6ca>
						printf("FINAL CRC Incorrect. Calc 0x%02X. Received 0x%02X\r\n", crc, recCRC);
 8001a2a:	8b7b      	ldrh	r3, [r7, #26]
 8001a2c:	8b3a      	ldrh	r2, [r7, #24]
 8001a2e:	4619      	mov	r1, r3
 8001a30:	484c      	ldr	r0, [pc, #304]	; (8001b64 <_Z13parseRFPacketPhh14nRF24_RXResult+0x7b8>)
 8001a32:	f00a f95d 	bl	800bcf0 <iprintf>
						printf("packet_%d: ", receivedSettingsPacket);
 8001a36:	4b48      	ldr	r3, [pc, #288]	; (8001b58 <_Z13parseRFPacketPhh14nRF24_RXResult+0x7ac>)
 8001a38:	881b      	ldrh	r3, [r3, #0]
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	484a      	ldr	r0, [pc, #296]	; (8001b68 <_Z13parseRFPacketPhh14nRF24_RXResult+0x7bc>)
 8001a3e:	f00a f957 	bl	800bcf0 <iprintf>
						for (int b = 0; b < 32; b++) printf("0x%02X ", transmitterData.bytesUnion.u8[b]);
 8001a42:	2300      	movs	r3, #0
 8001a44:	633b      	str	r3, [r7, #48]	; 0x30
 8001a46:	e00a      	b.n	8001a5e <_Z13parseRFPacketPhh14nRF24_RXResult+0x6b2>
 8001a48:	4a45      	ldr	r2, [pc, #276]	; (8001b60 <_Z13parseRFPacketPhh14nRF24_RXResult+0x7b4>)
 8001a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a4c:	4413      	add	r3, r2
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	4619      	mov	r1, r3
 8001a52:	4846      	ldr	r0, [pc, #280]	; (8001b6c <_Z13parseRFPacketPhh14nRF24_RXResult+0x7c0>)
 8001a54:	f00a f94c 	bl	800bcf0 <iprintf>
 8001a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	633b      	str	r3, [r7, #48]	; 0x30
 8001a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a60:	2b1f      	cmp	r3, #31
 8001a62:	ddf1      	ble.n	8001a48 <_Z13parseRFPacketPhh14nRF24_RXResult+0x69c>
						printf("\r\n");
 8001a64:	4842      	ldr	r0, [pc, #264]	; (8001b70 <_Z13parseRFPacketPhh14nRF24_RXResult+0x7c4>)
 8001a66:	f00a f9a9 	bl	800bdbc <puts>
						receiverData.settingsDataAck.settingsPacket = 0; // Invalid packet
 8001a6a:	4b42      	ldr	r3, [pc, #264]	; (8001b74 <_Z13parseRFPacketPhh14nRF24_RXResult+0x7c8>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	705a      	strb	r2, [r3, #1]
 8001a70:	2200      	movs	r2, #0
 8001a72:	709a      	strb	r2, [r3, #2]
 8001a74:	e066      	b.n	8001b44 <_Z13parseRFPacketPhh14nRF24_RXResult+0x798>
					} else{
						printf("CONFRECEIVED\r\n");
 8001a76:	4840      	ldr	r0, [pc, #256]	; (8001b78 <_Z13parseRFPacketPhh14nRF24_RXResult+0x7cc>)
 8001a78:	f00a f9a0 	bl	800bdbc <puts>
	//					memset(&settings, 0, sizeof(Settings));
						memcpy(&settings, receivedSettings, sizeof(Settings));
 8001a7c:	4b3f      	ldr	r3, [pc, #252]	; (8001b7c <_Z13parseRFPacketPhh14nRF24_RXResult+0x7d0>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a3f      	ldr	r2, [pc, #252]	; (8001b80 <_Z13parseRFPacketPhh14nRF24_RXResult+0x7d4>)
 8001a82:	4610      	mov	r0, r2
 8001a84:	4619      	mov	r1, r3
 8001a86:	f641 035b 	movw	r3, #6235	; 0x185b
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	f00a fb7c 	bl	800c188 <memcpy>
						calculatedCRC = HAL_CRC_Calculate(&hcrc, (uint32_t*)&settings, sizeof(Settings) / 4);
 8001a90:	f240 6216 	movw	r2, #1558	; 0x616
 8001a94:	493a      	ldr	r1, [pc, #232]	; (8001b80 <_Z13parseRFPacketPhh14nRF24_RXResult+0x7d4>)
 8001a96:	483b      	ldr	r0, [pc, #236]	; (8001b84 <_Z13parseRFPacketPhh14nRF24_RXResult+0x7d8>)
 8001a98:	f004 fb1d 	bl	80060d6 <HAL_CRC_Calculate>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	4a3a      	ldr	r2, [pc, #232]	; (8001b88 <_Z13parseRFPacketPhh14nRF24_RXResult+0x7dc>)
 8001aa0:	6013      	str	r3, [r2, #0]
						readingSettings = 0;
 8001aa2:	4b3a      	ldr	r3, [pc, #232]	; (8001b8c <_Z13parseRFPacketPhh14nRF24_RXResult+0x7e0>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	701a      	strb	r2, [r3, #0]
						settingsCRC = transmitterData.bytesUnion.u32[1];
 8001aa8:	4b2d      	ldr	r3, [pc, #180]	; (8001b60 <_Z13parseRFPacketPhh14nRF24_RXResult+0x7b4>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	4a38      	ldr	r2, [pc, #224]	; (8001b90 <_Z13parseRFPacketPhh14nRF24_RXResult+0x7e4>)
 8001aae:	6013      	str	r3, [r2, #0]
						saveSettingsToStorage = 1;
 8001ab0:	4b38      	ldr	r3, [pc, #224]	; (8001b94 <_Z13parseRFPacketPhh14nRF24_RXResult+0x7e8>)
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	701a      	strb	r2, [r3, #0]
 8001ab6:	e045      	b.n	8001b44 <_Z13parseRFPacketPhh14nRF24_RXResult+0x798>
					}

				} else if (receivedSettingsPacket < readingSettingsPacketAmount) {
 8001ab8:	4b27      	ldr	r3, [pc, #156]	; (8001b58 <_Z13parseRFPacketPhh14nRF24_RXResult+0x7ac>)
 8001aba:	881a      	ldrh	r2, [r3, #0]
 8001abc:	4b27      	ldr	r3, [pc, #156]	; (8001b5c <_Z13parseRFPacketPhh14nRF24_RXResult+0x7b0>)
 8001abe:	881b      	ldrh	r3, [r3, #0]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d23a      	bcs.n	8001b3a <_Z13parseRFPacketPhh14nRF24_RXResult+0x78e>
					receivedSettingsPtr += (receivedSettingsPacket * SETTINGSDATASIZE);
 8001ac4:	4b24      	ldr	r3, [pc, #144]	; (8001b58 <_Z13parseRFPacketPhh14nRF24_RXResult+0x7ac>)
 8001ac6:	881b      	ldrh	r3, [r3, #0]
 8001ac8:	461a      	mov	r2, r3
 8001aca:	4613      	mov	r3, r2
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	4413      	add	r3, r2
 8001ad0:	00da      	lsls	r2, r3, #3
 8001ad2:	4413      	add	r3, r2
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad8:	4413      	add	r3, r2
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24
					if((uint32_t*)receivedSettingsPtr > ((uint32_t*) receivedSettings) + sizeof(Settings)){
 8001adc:	4b27      	ldr	r3, [pc, #156]	; (8001b7c <_Z13parseRFPacketPhh14nRF24_RXResult+0x7d0>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f503 43c2 	add.w	r3, r3, #24832	; 0x6100
 8001ae4:	336c      	adds	r3, #108	; 0x6c
 8001ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d907      	bls.n	8001afc <_Z13parseRFPacketPhh14nRF24_RXResult+0x750>
						printf("SETTINGSPTR OUT OF RANGE\r\n");
 8001aec:	482a      	ldr	r0, [pc, #168]	; (8001b98 <_Z13parseRFPacketPhh14nRF24_RXResult+0x7ec>)
 8001aee:	f00a f965 	bl	800bdbc <puts>
						Error_Handler();
 8001af2:	f240 1175 	movw	r1, #373	; 0x175
 8001af6:	4829      	ldr	r0, [pc, #164]	; (8001b9c <_Z13parseRFPacketPhh14nRF24_RXResult+0x7f0>)
 8001af8:	f002 fa54 	bl	8003fa4 <_Error_Handler>
					}
					uint16_t crc = gencrc(transmitterData.bytesUnion.u8, RFPACKETLENGTH - 2);
 8001afc:	211e      	movs	r1, #30
 8001afe:	4818      	ldr	r0, [pc, #96]	; (8001b60 <_Z13parseRFPacketPhh14nRF24_RXResult+0x7b4>)
 8001b00:	f008 fa68 	bl	8009fd4 <gencrc>
 8001b04:	4603      	mov	r3, r0
 8001b06:	83fb      	strh	r3, [r7, #30]
					uint16_t recCRC = transmitterData.settingsData.crc;
 8001b08:	4b15      	ldr	r3, [pc, #84]	; (8001b60 <_Z13parseRFPacketPhh14nRF24_RXResult+0x7b4>)
 8001b0a:	8bdb      	ldrh	r3, [r3, #30]
 8001b0c:	83bb      	strh	r3, [r7, #28]
					if(crc != recCRC){
 8001b0e:	8bfa      	ldrh	r2, [r7, #30]
 8001b10:	8bbb      	ldrh	r3, [r7, #28]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d00b      	beq.n	8001b2e <_Z13parseRFPacketPhh14nRF24_RXResult+0x782>
						printf("DATA CRC Incorrect. Calc 0x%02X. Received 0x%02X\r\n",crc, recCRC);
 8001b16:	8bfb      	ldrh	r3, [r7, #30]
 8001b18:	8bba      	ldrh	r2, [r7, #28]
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4820      	ldr	r0, [pc, #128]	; (8001ba0 <_Z13parseRFPacketPhh14nRF24_RXResult+0x7f4>)
 8001b1e:	f00a f8e7 	bl	800bcf0 <iprintf>
						receiverData.settingsDataAck.settingsPacket = 0; // Invalid packet
 8001b22:	4b14      	ldr	r3, [pc, #80]	; (8001b74 <_Z13parseRFPacketPhh14nRF24_RXResult+0x7c8>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	705a      	strb	r2, [r3, #1]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	709a      	strb	r2, [r3, #2]
 8001b2c:	e00a      	b.n	8001b44 <_Z13parseRFPacketPhh14nRF24_RXResult+0x798>
					} else{
						memcpy(receivedSettingsPtr, tdPtr, SETTINGSDATASIZE);
 8001b2e:	221b      	movs	r2, #27
 8001b30:	6a39      	ldr	r1, [r7, #32]
 8001b32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b34:	f00a fb28 	bl	800c188 <memcpy>
 8001b38:	e004      	b.n	8001b44 <_Z13parseRFPacketPhh14nRF24_RXResult+0x798>
					}
				} else {
					Error_Handler();
 8001b3a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8001b3e:	4817      	ldr	r0, [pc, #92]	; (8001b9c <_Z13parseRFPacketPhh14nRF24_RXResult+0x7f0>)
 8001b40:	f002 fa30 	bl	8003fa4 <_Error_Handler>
				}
			}
			nRF24_WriteAckPayload(pipeLine, receiverData.bytesUnion.u8, 5);
 8001b44:	78bb      	ldrb	r3, [r7, #2]
 8001b46:	2205      	movs	r2, #5
 8001b48:	490a      	ldr	r1, [pc, #40]	; (8001b74 <_Z13parseRFPacketPhh14nRF24_RXResult+0x7c8>)
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f008 fe97 	bl	800a87e <_Z21nRF24_WriteAckPayload14nRF24_RXResultPhh>
			break;
 8001b50:	bf00      	nop
		}
		}

	}
}
 8001b52:	3740      	adds	r7, #64	; 0x40
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	20001ee8 	.word	0x20001ee8
 8001b5c:	20001e8a 	.word	0x20001e8a
 8001b60:	200005e8 	.word	0x200005e8
 8001b64:	0800e068 	.word	0x0800e068
 8001b68:	0800e01c 	.word	0x0800e01c
 8001b6c:	0800e028 	.word	0x0800e028
 8001b70:	0800e030 	.word	0x0800e030
 8001b74:	20000608 	.word	0x20000608
 8001b78:	0800e09c 	.word	0x0800e09c
 8001b7c:	20001e84 	.word	0x20001e84
 8001b80:	20000628 	.word	0x20000628
 8001b84:	200020fc 	.word	0x200020fc
 8001b88:	20001e90 	.word	0x20001e90
 8001b8c:	20001e88 	.word	0x20001e88
 8001b90:	20001e94 	.word	0x20001e94
 8001b94:	20001e8d 	.word	0x20001e8d
 8001b98:	0800e0ac 	.word	0x0800e0ac
 8001b9c:	0800dfb0 	.word	0x0800dfb0
 8001ba0:	0800e0c8 	.word	0x0800e0c8

08001ba4 <_Z12calculateCRCPhh>:
uint8_t dataBeginIndex = 3;
enum commands {
	CHANNELS, STREAM_CHANNELS
};

uint8_t calculateCRC(uint8_t *data, uint8_t length) {
 8001ba4:	b480      	push	{r7}
 8001ba6:	b087      	sub	sp, #28
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	460b      	mov	r3, r1
 8001bae:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0xff;
 8001bb0:	23ff      	movs	r3, #255	; 0xff
 8001bb2:	75fb      	strb	r3, [r7, #23]
	size_t i, j;
	for (i = 0; i < length; i++) {
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	613b      	str	r3, [r7, #16]
 8001bb8:	e021      	b.n	8001bfe <_Z12calculateCRCPhh+0x5a>
		crc ^= data[i];
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	781a      	ldrb	r2, [r3, #0]
 8001bc2:	7dfb      	ldrb	r3, [r7, #23]
 8001bc4:	4053      	eors	r3, r2
 8001bc6:	75fb      	strb	r3, [r7, #23]
		for (j = 0; j < 8; j++) {
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	e011      	b.n	8001bf2 <_Z12calculateCRCPhh+0x4e>
			if ((crc & 0x80) != 0)
 8001bce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	da07      	bge.n	8001be6 <_Z12calculateCRCPhh+0x42>
				crc = (uint8_t) ((crc << 1) ^ 0x31);
 8001bd6:	7dfb      	ldrb	r3, [r7, #23]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	b25b      	sxtb	r3, r3
 8001bdc:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8001be0:	b25b      	sxtb	r3, r3
 8001be2:	75fb      	strb	r3, [r7, #23]
 8001be4:	e002      	b.n	8001bec <_Z12calculateCRCPhh+0x48>
			else
				crc <<= 1;
 8001be6:	7dfb      	ldrb	r3, [r7, #23]
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	75fb      	strb	r3, [r7, #23]
		for (j = 0; j < 8; j++) {
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2b07      	cmp	r3, #7
 8001bf6:	d9ea      	bls.n	8001bce <_Z12calculateCRCPhh+0x2a>
	for (i = 0; i < length; i++) {
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	613b      	str	r3, [r7, #16]
 8001bfe:	78fb      	ldrb	r3, [r7, #3]
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d3d9      	bcc.n	8001bba <_Z12calculateCRCPhh+0x16>
		}
	}
	return crc;
 8001c06:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	371c      	adds	r7, #28
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <_Z15sendChannelDatav>:

void sendChannelData() {
 8001c14:	b590      	push	{r4, r7, lr}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
	lastChannelStreamTime = HAL_GetTick();
 8001c1a:	f004 f8ff 	bl	8005e1c <HAL_GetTick>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	4a29      	ldr	r2, [pc, #164]	; (8001cc8 <_Z15sendChannelDatav+0xb4>)
 8001c22:	6013      	str	r3, [r2, #0]
	uint8_t idx = 0;
 8001c24:	2300      	movs	r3, #0
 8001c26:	71fb      	strb	r3, [r7, #7]
	uint8_t dataSize = 24 * 2;
 8001c28:	2330      	movs	r3, #48	; 0x30
 8001c2a:	71bb      	strb	r3, [r7, #6]
	customUartTXBuffer[idx++] = customHeaderByte;
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	1c5a      	adds	r2, r3, #1
 8001c30:	71fa      	strb	r2, [r7, #7]
 8001c32:	461a      	mov	r2, r3
 8001c34:	4b25      	ldr	r3, [pc, #148]	; (8001ccc <_Z15sendChannelDatav+0xb8>)
 8001c36:	7819      	ldrb	r1, [r3, #0]
 8001c38:	4b25      	ldr	r3, [pc, #148]	; (8001cd0 <_Z15sendChannelDatav+0xbc>)
 8001c3a:	5499      	strb	r1, [r3, r2]
	customUartTXBuffer[idx++] = CHANNELS;
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	1c5a      	adds	r2, r3, #1
 8001c40:	71fa      	strb	r2, [r7, #7]
 8001c42:	461a      	mov	r2, r3
 8001c44:	4b22      	ldr	r3, [pc, #136]	; (8001cd0 <_Z15sendChannelDatav+0xbc>)
 8001c46:	2100      	movs	r1, #0
 8001c48:	5499      	strb	r1, [r3, r2]
	customUartTXBuffer[idx++] = dataSize;
 8001c4a:	79fb      	ldrb	r3, [r7, #7]
 8001c4c:	1c5a      	adds	r2, r3, #1
 8001c4e:	71fa      	strb	r2, [r7, #7]
 8001c50:	4619      	mov	r1, r3
 8001c52:	4a1f      	ldr	r2, [pc, #124]	; (8001cd0 <_Z15sendChannelDatav+0xbc>)
 8001c54:	79bb      	ldrb	r3, [r7, #6]
 8001c56:	5453      	strb	r3, [r2, r1]
	memcpy(customUartTXBuffer + idx, channelValues, dataSize);
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	4a1d      	ldr	r2, [pc, #116]	; (8001cd0 <_Z15sendChannelDatav+0xbc>)
 8001c5c:	4413      	add	r3, r2
 8001c5e:	79ba      	ldrb	r2, [r7, #6]
 8001c60:	491c      	ldr	r1, [pc, #112]	; (8001cd4 <_Z15sendChannelDatav+0xc0>)
 8001c62:	4618      	mov	r0, r3
 8001c64:	f00a fa90 	bl	800c188 <memcpy>
	idx += dataSize;
 8001c68:	79fa      	ldrb	r2, [r7, #7]
 8001c6a:	79bb      	ldrb	r3, [r7, #6]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	71fb      	strb	r3, [r7, #7]
	customUartTXBuffer[idx++] = calculateCRC(customUartTXBuffer + 3, dataSize);
 8001c70:	4a19      	ldr	r2, [pc, #100]	; (8001cd8 <_Z15sendChannelDatav+0xc4>)
 8001c72:	79fb      	ldrb	r3, [r7, #7]
 8001c74:	1c59      	adds	r1, r3, #1
 8001c76:	71f9      	strb	r1, [r7, #7]
 8001c78:	461c      	mov	r4, r3
 8001c7a:	79bb      	ldrb	r3, [r7, #6]
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4610      	mov	r0, r2
 8001c80:	f7ff ff90 	bl	8001ba4 <_Z12calculateCRCPhh>
 8001c84:	4603      	mov	r3, r0
 8001c86:	461a      	mov	r2, r3
 8001c88:	4b11      	ldr	r3, [pc, #68]	; (8001cd0 <_Z15sendChannelDatav+0xbc>)
 8001c8a:	551a      	strb	r2, [r3, r4]
	customUartTXBuffer[idx++] = customFooterByte;
 8001c8c:	79fb      	ldrb	r3, [r7, #7]
 8001c8e:	1c5a      	adds	r2, r3, #1
 8001c90:	71fa      	strb	r2, [r7, #7]
 8001c92:	461a      	mov	r2, r3
 8001c94:	4b11      	ldr	r3, [pc, #68]	; (8001cdc <_Z15sendChannelDatav+0xc8>)
 8001c96:	7819      	ldrb	r1, [r3, #0]
 8001c98:	4b0d      	ldr	r3, [pc, #52]	; (8001cd0 <_Z15sendChannelDatav+0xbc>)
 8001c9a:	5499      	strb	r1, [r3, r2]
	if (HAL_UART_Transmit_IT(&customUart, customUartTXBuffer, idx) != HAL_OK) {
 8001c9c:	79fb      	ldrb	r3, [r7, #7]
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	490b      	ldr	r1, [pc, #44]	; (8001cd0 <_Z15sendChannelDatav+0xbc>)
 8001ca4:	480e      	ldr	r0, [pc, #56]	; (8001ce0 <_Z15sendChannelDatav+0xcc>)
 8001ca6:	f007 f93b 	bl	8008f20 <HAL_UART_Transmit_IT>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	bf14      	ite	ne
 8001cb0:	2301      	movne	r3, #1
 8001cb2:	2300      	moveq	r3, #0
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d002      	beq.n	8001cc0 <_Z15sendChannelDatav+0xac>
		printf("UARTBUSY\r\n");
 8001cba:	480a      	ldr	r0, [pc, #40]	; (8001ce4 <_Z15sendChannelDatav+0xd0>)
 8001cbc:	f00a f87e 	bl	800bdbc <puts>
	}
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd90      	pop	{r4, r7, pc}
 8001cc8:	200020ec 	.word	0x200020ec
 8001ccc:	20000007 	.word	0x20000007
 8001cd0:	20001fec 	.word	0x20001fec
 8001cd4:	200005b8 	.word	0x200005b8
 8001cd8:	20001fef 	.word	0x20001fef
 8001cdc:	20000009 	.word	0x20000009
 8001ce0:	20002538 	.word	0x20002538
 8001ce4:	0800e0fc 	.word	0x0800e0fc

08001ce8 <customUartDataTransmitted>:

extern "C" void customUartDataTransmitted(struct __UART_HandleTypeDef *huart) {
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
//	printf("CUSTOMTX\r\n");
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <customUartReceived>:

extern "C" void customUartReceived(struct __UART_HandleTypeDef *huart) {
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
//	printf("CUSTOMRX\r\n");
	uint8_t dataSize = customUartRXBuffer[2];
 8001d04:	4b29      	ldr	r3, [pc, #164]	; (8001dac <customUartReceived+0xb0>)
 8001d06:	789b      	ldrb	r3, [r3, #2]
 8001d08:	73fb      	strb	r3, [r7, #15]
	uint8_t crc = customUartRXBuffer[2 + dataSize + 1];
 8001d0a:	7bfb      	ldrb	r3, [r7, #15]
 8001d0c:	3303      	adds	r3, #3
 8001d0e:	4a27      	ldr	r2, [pc, #156]	; (8001dac <customUartReceived+0xb0>)
 8001d10:	5cd3      	ldrb	r3, [r2, r3]
 8001d12:	73bb      	strb	r3, [r7, #14]
	uint8_t footerByte = customUartRXBuffer[2 + dataSize + 2];
 8001d14:	7bfb      	ldrb	r3, [r7, #15]
 8001d16:	3304      	adds	r3, #4
 8001d18:	4a24      	ldr	r2, [pc, #144]	; (8001dac <customUartReceived+0xb0>)
 8001d1a:	5cd3      	ldrb	r3, [r2, r3]
 8001d1c:	737b      	strb	r3, [r7, #13]
	if (footerByte != customFooterByte) {
 8001d1e:	4b24      	ldr	r3, [pc, #144]	; (8001db0 <customUartReceived+0xb4>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	7b7a      	ldrb	r2, [r7, #13]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d010      	beq.n	8001d4a <customUartReceived+0x4e>
		HAL_UART_Receive_IT(&customUart, customUartRXBuffer + customHeaderSize,
 8001d28:	4b22      	ldr	r3, [pc, #136]	; (8001db4 <customUartReceived+0xb8>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4b1f      	ldr	r3, [pc, #124]	; (8001dac <customUartReceived+0xb0>)
 8001d30:	18d1      	adds	r1, r2, r3
 8001d32:	7bfb      	ldrb	r3, [r7, #15]
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	4b20      	ldr	r3, [pc, #128]	; (8001db8 <customUartReceived+0xbc>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	4413      	add	r3, r2
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	461a      	mov	r2, r3
 8001d42:	481e      	ldr	r0, [pc, #120]	; (8001dbc <customUartReceived+0xc0>)
 8001d44:	f007 f931 	bl	8008faa <HAL_UART_Receive_IT>
				dataSize + customFooterSize);
		return;
 8001d48:	e02c      	b.n	8001da4 <customUartReceived+0xa8>
	}
	switch (customUartRXBuffer[1]) {
 8001d4a:	4b18      	ldr	r3, [pc, #96]	; (8001dac <customUartReceived+0xb0>)
 8001d4c:	785b      	ldrb	r3, [r3, #1]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d002      	beq.n	8001d58 <customUartReceived+0x5c>
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d006      	beq.n	8001d64 <customUartReceived+0x68>
 8001d56:	e01d      	b.n	8001d94 <customUartReceived+0x98>
	case CHANNELS:
		printf("CHANNELS\r\n");
 8001d58:	4819      	ldr	r0, [pc, #100]	; (8001dc0 <customUartReceived+0xc4>)
 8001d5a:	f00a f82f 	bl	800bdbc <puts>
		sendChannelData();
 8001d5e:	f7ff ff59 	bl	8001c14 <_Z15sendChannelDatav>
		break;
 8001d62:	e017      	b.n	8001d94 <customUartReceived+0x98>
	case STREAM_CHANNELS:
		printf("STREAM\r\n");
 8001d64:	4817      	ldr	r0, [pc, #92]	; (8001dc4 <customUartReceived+0xc8>)
 8001d66:	f00a f829 	bl	800bdbc <puts>
		customChannelStreaming = 1;
 8001d6a:	4b17      	ldr	r3, [pc, #92]	; (8001dc8 <customUartReceived+0xcc>)
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	701a      	strb	r2, [r3, #0]
		customUartChannelTickRate = customUartRXBuffer[dataBeginIndex] << 8 | customUartRXBuffer[dataBeginIndex + 1];
 8001d70:	4b16      	ldr	r3, [pc, #88]	; (8001dcc <customUartReceived+0xd0>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	461a      	mov	r2, r3
 8001d76:	4b0d      	ldr	r3, [pc, #52]	; (8001dac <customUartReceived+0xb0>)
 8001d78:	5c9b      	ldrb	r3, [r3, r2]
 8001d7a:	021b      	lsls	r3, r3, #8
 8001d7c:	4a13      	ldr	r2, [pc, #76]	; (8001dcc <customUartReceived+0xd0>)
 8001d7e:	7812      	ldrb	r2, [r2, #0]
 8001d80:	3201      	adds	r2, #1
 8001d82:	490a      	ldr	r1, [pc, #40]	; (8001dac <customUartReceived+0xb0>)
 8001d84:	5c8a      	ldrb	r2, [r1, r2]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <customUartReceived+0xd4>)
 8001d8c:	601a      	str	r2, [r3, #0]
		sendChannelData();
 8001d8e:	f7ff ff41 	bl	8001c14 <_Z15sendChannelDatav>
		break;
 8001d92:	bf00      	nop
	}
	HAL_UART_Receive_IT(&customUart, customUartRXBuffer, customHeaderSize);
 8001d94:	4b07      	ldr	r3, [pc, #28]	; (8001db4 <customUartReceived+0xb8>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	4903      	ldr	r1, [pc, #12]	; (8001dac <customUartReceived+0xb0>)
 8001d9e:	4807      	ldr	r0, [pc, #28]	; (8001dbc <customUartReceived+0xc0>)
 8001da0:	f007 f903 	bl	8008faa <HAL_UART_Receive_IT>
}
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20001eec 	.word	0x20001eec
 8001db0:	20000009 	.word	0x20000009
 8001db4:	20000008 	.word	0x20000008
 8001db8:	2000000a 	.word	0x2000000a
 8001dbc:	20002538 	.word	0x20002538
 8001dc0:	0800e108 	.word	0x0800e108
 8001dc4:	0800e114 	.word	0x0800e114
 8001dc8:	200020f0 	.word	0x200020f0
 8001dcc:	2000000b 	.word	0x2000000b
 8001dd0:	200020f4 	.word	0x200020f4

08001dd4 <_Z15customUartErrorP20__UART_HandleTypeDef>:
void customUartError(struct __UART_HandleTypeDef *huart) {
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
	if ((customUart.ErrorCode & HAL_UART_ERROR_ORE) != 0) {
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <_Z15customUartErrorP20__UART_HandleTypeDef+0x3c>)
 8001dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de0:	f003 0308 	and.w	r3, r3, #8
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	bf14      	ite	ne
 8001de8:	2301      	movne	r3, #1
 8001dea:	2300      	moveq	r3, #0
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d002      	beq.n	8001df8 <_Z15customUartErrorP20__UART_HandleTypeDef+0x24>
		printf("UART OVERRUN\r\n");
 8001df2:	4808      	ldr	r0, [pc, #32]	; (8001e14 <_Z15customUartErrorP20__UART_HandleTypeDef+0x40>)
 8001df4:	f009 ffe2 	bl	800bdbc <puts>
	}
	HAL_UART_Receive_IT(&customUart, customUartRXBuffer, customHeaderSize);
 8001df8:	4b07      	ldr	r3, [pc, #28]	; (8001e18 <_Z15customUartErrorP20__UART_HandleTypeDef+0x44>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	461a      	mov	r2, r3
 8001e00:	4906      	ldr	r1, [pc, #24]	; (8001e1c <_Z15customUartErrorP20__UART_HandleTypeDef+0x48>)
 8001e02:	4803      	ldr	r0, [pc, #12]	; (8001e10 <_Z15customUartErrorP20__UART_HandleTypeDef+0x3c>)
 8001e04:	f007 f8d1 	bl	8008faa <HAL_UART_Receive_IT>
}
 8001e08:	bf00      	nop
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	20002538 	.word	0x20002538
 8001e14:	0800e11c 	.word	0x0800e11c
 8001e18:	20000008 	.word	0x20000008
 8001e1c:	20001eec 	.word	0x20001eec

08001e20 <_Z10setDefaulth>:
#pragma endregion

void setDefault(uint8_t channelNumber){
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	71fb      	strb	r3, [r7, #7]
	if(channelNumber == 0){
 8001e2a:	79fb      	ldrb	r3, [r7, #7]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d10e      	bne.n	8001e4e <_Z10setDefaulth+0x2e>
		for(int ch = 1; ch <= 24; ch++){
 8001e30:	2301      	movs	r3, #1
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	e007      	b.n	8001e46 <_Z10setDefaulth+0x26>
			setDefault(ch);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff fff0 	bl	8001e20 <_Z10setDefaulth>
		for(int ch = 1; ch <= 24; ch++){
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	3301      	adds	r3, #1
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2b18      	cmp	r3, #24
 8001e4a:	ddf4      	ble.n	8001e36 <_Z10setDefaulth+0x16>
		}
	} else{
		setOutput(channelNumber, settings.model[settings.activeModel].channel_settings[channelNumber - 1].chDefaults);
	}
}
 8001e4c:	e017      	b.n	8001e7e <_Z10setDefaulth+0x5e>
		setOutput(channelNumber, settings.model[settings.activeModel].channel_settings[channelNumber - 1].chDefaults);
 8001e4e:	4b0e      	ldr	r3, [pc, #56]	; (8001e88 <_Z10setDefaulth+0x68>)
 8001e50:	789b      	ldrb	r3, [r3, #2]
 8001e52:	4618      	mov	r0, r3
 8001e54:	79fb      	ldrb	r3, [r7, #7]
 8001e56:	1e5a      	subs	r2, r3, #1
 8001e58:	490b      	ldr	r1, [pc, #44]	; (8001e88 <_Z10setDefaulth+0x68>)
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	1a9b      	subs	r3, r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	f240 320b 	movw	r2, #779	; 0x30b
 8001e66:	fb00 f202 	mul.w	r2, r0, r2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	3320      	adds	r3, #32
 8001e70:	881b      	ldrh	r3, [r3, #0]
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	4611      	mov	r1, r2
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff f965 	bl	8001148 <_Z9setOutputht>
}
 8001e7e:	bf00      	nop
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000628 	.word	0x20000628

08001e8c <_Z25setupChannelOutputConfigthP17TIM_HandleTypeDefh>:

void setupChannelOutputConfign(uint8_t channelNumber){
	setupChannelOutputConfigtt(channelNumber, nullptr,0, nullptr, nullptr, 0, nullptr, 0);
}

void setupChannelOutputConfigt(uint8_t channelNumber, TIM_HandleTypeDef* mainTimer, uint8_t mainTimerChannel){
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af04      	add	r7, sp, #16
 8001e92:	4603      	mov	r3, r0
 8001e94:	6039      	str	r1, [r7, #0]
 8001e96:	71fb      	strb	r3, [r7, #7]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	71bb      	strb	r3, [r7, #6]
	setupChannelOutputConfigtt(channelNumber, mainTimer,mainTimerChannel, nullptr, nullptr, 0, nullptr, 0);
 8001e9c:	79ba      	ldrb	r2, [r7, #6]
 8001e9e:	79f8      	ldrb	r0, [r7, #7]
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	9303      	str	r3, [sp, #12]
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	9302      	str	r3, [sp, #8]
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	9301      	str	r3, [sp, #4]
 8001eac:	2300      	movs	r3, #0
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	6839      	ldr	r1, [r7, #0]
 8001eb4:	f000 f820 	bl	8001ef8 <_Z26setupChannelOutputConfigtthP17TIM_HandleTypeDefhPVmS0_hP12GPIO_TypeDefm>
}
 8001eb8:	bf00      	nop
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <_Z26setupChannelOutputConfigtmhP17TIM_HandleTypeDefhPVmP12GPIO_TypeDefm>:

void setupChannelOutputConfigtm(uint8_t channelNumber, TIM_HandleTypeDef* mainTimer, uint8_t mainTimerChannel, __IO uint32_t* miscOutput, GPIO_TypeDef* muxGPIO, uint32_t muxPin){
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b088      	sub	sp, #32
 8001ec4:	af04      	add	r7, sp, #16
 8001ec6:	60b9      	str	r1, [r7, #8]
 8001ec8:	607b      	str	r3, [r7, #4]
 8001eca:	4603      	mov	r3, r0
 8001ecc:	73fb      	strb	r3, [r7, #15]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	73bb      	strb	r3, [r7, #14]
	setupChannelOutputConfigtt(channelNumber, mainTimer,mainTimerChannel, miscOutput, nullptr, 0, muxGPIO, muxPin);
 8001ed2:	7bba      	ldrb	r2, [r7, #14]
 8001ed4:	7bf8      	ldrb	r0, [r7, #15]
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	9303      	str	r3, [sp, #12]
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	9302      	str	r3, [sp, #8]
 8001ede:	2300      	movs	r3, #0
 8001ee0:	9301      	str	r3, [sp, #4]
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	9300      	str	r3, [sp, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68b9      	ldr	r1, [r7, #8]
 8001eea:	f000 f805 	bl	8001ef8 <_Z26setupChannelOutputConfigtthP17TIM_HandleTypeDefhPVmS0_hP12GPIO_TypeDefm>
}
 8001eee:	bf00      	nop
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <_Z26setupChannelOutputConfigtthP17TIM_HandleTypeDefhPVmS0_hP12GPIO_TypeDefm>:

void setupChannelOutputConfigtt(uint8_t channelNumber, TIM_HandleTypeDef* mainTimer, uint8_t mainTimerChannel, __IO uint32_t* miscOutput, TIM_HandleTypeDef* miscTimConf, uint8_t miscTIMCH, GPIO_TypeDef* muxGPIO, uint32_t muxPin){
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b088      	sub	sp, #32
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60b9      	str	r1, [r7, #8]
 8001f00:	607b      	str	r3, [r7, #4]
 8001f02:	4603      	mov	r3, r0
 8001f04:	73fb      	strb	r3, [r7, #15]
 8001f06:	4613      	mov	r3, r2
 8001f08:	73bb      	strb	r3, [r7, #14]

	// Assigning everything to the output
	__IO uint32_t* mainTimerOutput;
	switch(mainTimerChannel){
 8001f0a:	7bbb      	ldrb	r3, [r7, #14]
 8001f0c:	2b0c      	cmp	r3, #12
 8001f0e:	d831      	bhi.n	8001f74 <_Z26setupChannelOutputConfigtthP17TIM_HandleTypeDefhPVmS0_hP12GPIO_TypeDefm+0x7c>
 8001f10:	a201      	add	r2, pc, #4	; (adr r2, 8001f18 <_Z26setupChannelOutputConfigtthP17TIM_HandleTypeDefhPVmS0_hP12GPIO_TypeDefm+0x20>)
 8001f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f16:	bf00      	nop
 8001f18:	08001f4d 	.word	0x08001f4d
 8001f1c:	08001f75 	.word	0x08001f75
 8001f20:	08001f75 	.word	0x08001f75
 8001f24:	08001f75 	.word	0x08001f75
 8001f28:	08001f57 	.word	0x08001f57
 8001f2c:	08001f75 	.word	0x08001f75
 8001f30:	08001f75 	.word	0x08001f75
 8001f34:	08001f75 	.word	0x08001f75
 8001f38:	08001f61 	.word	0x08001f61
 8001f3c:	08001f75 	.word	0x08001f75
 8001f40:	08001f75 	.word	0x08001f75
 8001f44:	08001f75 	.word	0x08001f75
 8001f48:	08001f6b 	.word	0x08001f6b
	case TIM_CHANNEL_1:
		mainTimerOutput = &mainTimer->Instance->CCR1;
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	3334      	adds	r3, #52	; 0x34
 8001f52:	61fb      	str	r3, [r7, #28]
		break;
 8001f54:	e013      	b.n	8001f7e <_Z26setupChannelOutputConfigtthP17TIM_HandleTypeDefhPVmS0_hP12GPIO_TypeDefm+0x86>
	case TIM_CHANNEL_2:
		mainTimerOutput = &mainTimer->Instance->CCR2;
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	3338      	adds	r3, #56	; 0x38
 8001f5c:	61fb      	str	r3, [r7, #28]
		break;
 8001f5e:	e00e      	b.n	8001f7e <_Z26setupChannelOutputConfigtthP17TIM_HandleTypeDefhPVmS0_hP12GPIO_TypeDefm+0x86>
	case TIM_CHANNEL_3:
		mainTimerOutput = &mainTimer->Instance->CCR3;
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	333c      	adds	r3, #60	; 0x3c
 8001f66:	61fb      	str	r3, [r7, #28]
		break;
 8001f68:	e009      	b.n	8001f7e <_Z26setupChannelOutputConfigtthP17TIM_HandleTypeDefhPVmS0_hP12GPIO_TypeDefm+0x86>
	case TIM_CHANNEL_4:
		mainTimerOutput = &mainTimer->Instance->CCR4;
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	3340      	adds	r3, #64	; 0x40
 8001f70:	61fb      	str	r3, [r7, #28]
		break;
 8001f72:	e004      	b.n	8001f7e <_Z26setupChannelOutputConfigtthP17TIM_HandleTypeDefhPVmS0_hP12GPIO_TypeDefm+0x86>
	default:
		Error_Handler(); // We should not come here
 8001f74:	f240 2105 	movw	r1, #517	; 0x205
 8001f78:	4844      	ldr	r0, [pc, #272]	; (800208c <_Z26setupChannelOutputConfigtthP17TIM_HandleTypeDefhPVmS0_hP12GPIO_TypeDefm+0x194>)
 8001f7a:	f002 f813 	bl	8003fa4 <_Error_Handler>
	}

	channelOutputConfig *chOuputConf = &channelsOutputConfig[channelNumber];
 8001f7e:	7bfa      	ldrb	r2, [r7, #15]
 8001f80:	4613      	mov	r3, r2
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	4413      	add	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	4a41      	ldr	r2, [pc, #260]	; (8002090 <_Z26setupChannelOutputConfigtthP17TIM_HandleTypeDefhPVmS0_hP12GPIO_TypeDefm+0x198>)
 8001f8a:	4413      	add	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]

	chOuputConf->timOutput 			= mainTimerOutput;
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	69fa      	ldr	r2, [r7, #28]
 8001f92:	60da      	str	r2, [r3, #12]
	chOuputConf->mainTimer 			= mainTimer;
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	68ba      	ldr	r2, [r7, #8]
 8001f98:	605a      	str	r2, [r3, #4]
	chOuputConf->mainTimerCH 		= mainTimerChannel;
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	7bba      	ldrb	r2, [r7, #14]
 8001f9e:	721a      	strb	r2, [r3, #8]
	chOuputConf->miscOutput 		= miscOutput;
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	611a      	str	r2, [r3, #16]

	chOuputConf->miscTimConf 		= miscTimConf;
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001faa:	615a      	str	r2, [r3, #20]
	if(miscTimConf != nullptr){
 8001fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <_Z26setupChannelOutputConfigtthP17TIM_HandleTypeDefhPVmS0_hP12GPIO_TypeDefm+0xc2>
		chOuputConf->miscTimCH 		= miscTIMCH;
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001fb8:	761a      	strb	r2, [r3, #24]
	}

	if(muxGPIO != nullptr){
 8001fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d007      	beq.n	8001fd0 <_Z26setupChannelOutputConfigtthP17TIM_HandleTypeDefhPVmS0_hP12GPIO_TypeDefm+0xd8>
		chOuputConf->muxGPIO 		= muxGPIO;
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fc4:	61da      	str	r2, [r3, #28]
		chOuputConf->muxPIN 		= muxPin;
 8001fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	f883 2020 	strb.w	r2, [r3, #32]
	}

	// Configuring the correct output mode from settings
	channelConfigs* channelConfig = &settings.model[settings.activeModel].channel_settings[channelNumber - 1];
 8001fd0:	4b30      	ldr	r3, [pc, #192]	; (8002094 <_Z26setupChannelOutputConfigtthP17TIM_HandleTypeDefhPVmS0_hP12GPIO_TypeDefm+0x19c>)
 8001fd2:	789b      	ldrb	r3, [r3, #2]
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	7bfb      	ldrb	r3, [r7, #15]
 8001fd8:	1e5a      	subs	r2, r3, #1
 8001fda:	4613      	mov	r3, r2
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	1a9b      	subs	r3, r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	f240 320b 	movw	r2, #779	; 0x30b
 8001fe6:	fb01 f202 	mul.w	r2, r1, r2
 8001fea:	4413      	add	r3, r2
 8001fec:	3310      	adds	r3, #16
 8001fee:	4a29      	ldr	r2, [pc, #164]	; (8002094 <_Z26setupChannelOutputConfigtthP17TIM_HandleTypeDefhPVmS0_hP12GPIO_TypeDefm+0x19c>)
 8001ff0:	4413      	add	r3, r2
 8001ff2:	3308      	adds	r3, #8
 8001ff4:	617b      	str	r3, [r7, #20]
	switch(channelConfig->outputMode){
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	7a9b      	ldrb	r3, [r3, #10]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	2b04      	cmp	r3, #4
 8001ffe:	d83c      	bhi.n	800207a <_Z26setupChannelOutputConfigtthP17TIM_HandleTypeDefhPVmS0_hP12GPIO_TypeDefm+0x182>
 8002000:	a201      	add	r2, pc, #4	; (adr r2, 8002008 <_Z26setupChannelOutputConfigtthP17TIM_HandleTypeDefhPVmS0_hP12GPIO_TypeDefm+0x110>)
 8002002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002006:	bf00      	nop
 8002008:	0800207b 	.word	0x0800207b
 800200c:	0800207b 	.word	0x0800207b
 8002010:	0800201d 	.word	0x0800201d
 8002014:	08002043 	.word	0x08002043
 8002018:	0800202d 	.word	0x0800202d
	case OUTPUTMODE_RC:
	case OUTPUTMODE_IO:
		// Nothing needed in these modes. THis is default mode
		break;
	case OUTPUTMODE_PWM:
		TIM_setOverflow(chOuputConf->miscTimConf, channelConfig->pwmConfig.frequency, TimerFormat_t::HERTZ_FORMAT);
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	6958      	ldr	r0, [r3, #20]
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	2202      	movs	r2, #2
 8002026:	4619      	mov	r1, r3
 8002028:	f003 fbfa 	bl	8005820 <_Z15TIM_setOverflowP17TIM_HandleTypeDefm13TimerFormat_t>
	case OUTPUTMODE_DAC:
		HAL_GPIO_WritePin(chOuputConf->muxGPIO, chOuputConf->muxPIN, GPIO_PinState::GPIO_PIN_SET);
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	69d8      	ldr	r0, [r3, #28]
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002036:	b29b      	uxth	r3, r3
 8002038:	2201      	movs	r2, #1
 800203a:	4619      	mov	r1, r3
 800203c:	f004 fba4 	bl	8006788 <HAL_GPIO_WritePin>
		break;
 8002040:	e01b      	b.n	800207a <_Z26setupChannelOutputConfigtthP17TIM_HandleTypeDefhPVmS0_hP12GPIO_TypeDefm+0x182>
	case OUTPUTMODE_STEP:
		HAL_GPIO_WritePin(chOuputConf->muxGPIO, chOuputConf->muxPIN, GPIO_PinState::GPIO_PIN_SET);
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	69d8      	ldr	r0, [r3, #28]
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	f893 3020 	ldrb.w	r3, [r3, #32]
 800204c:	b29b      	uxth	r3, r3
 800204e:	2201      	movs	r2, #1
 8002050:	4619      	mov	r1, r3
 8002052:	f004 fb99 	bl	8006788 <HAL_GPIO_WritePin>
		TIM_setOverflow(chOuputConf->miscTimConf, channelConfig->stepperConfig.minFrequency, TimerFormat_t::HERTZ_FORMAT);
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	6958      	ldr	r0, [r3, #20]
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	2202      	movs	r2, #2
 8002060:	4619      	mov	r1, r3
 8002062:	f003 fbdd 	bl	8005820 <_Z15TIM_setOverflowP17TIM_HandleTypeDefm13TimerFormat_t>
		TIM_setCaptureCompare(chOuputConf->miscTimConf,chOuputConf->miscTimCH, 0, TimerCompareFormat_t::TICK_COMPARE_FORMAT); // Default to off
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	6958      	ldr	r0, [r3, #20]
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	7e1b      	ldrb	r3, [r3, #24]
 800206e:	4619      	mov	r1, r3
 8002070:	2380      	movs	r3, #128	; 0x80
 8002072:	2200      	movs	r2, #0
 8002074:	f003 fc34 	bl	80058e0 <_Z21TIM_setCaptureCompareP17TIM_HandleTypeDefmm20TimerCompareFormat_t>
		break;
 8002078:	bf00      	nop
	}

	chOuputConf->currentOutputMode = channelConfig->outputMode;
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	7a9a      	ldrb	r2, [r3, #10]
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	701a      	strb	r2, [r3, #0]
}
 8002082:	bf00      	nop
 8002084:	3720      	adds	r7, #32
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	0800dfb0 	.word	0x0800dfb0
 8002090:	20000224 	.word	0x20000224
 8002094:	20000628 	.word	0x20000628

08002098 <_Z17configureChannelsv>:

void configureChannels(){
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af04      	add	r7, sp, #16

	setupChannelOutputConfigtt(1,&htim2, TIM_CHANNEL_1, &htim9.Instance->CCR1, &htim9, TIM_CHANNEL_1, CHSEL_FF2_1_CH1_GPIO_Port, CHSEL_FF2_1_CH1_Pin);
 800209e:	4b62      	ldr	r3, [pc, #392]	; (8002228 <_Z17configureChannelsv+0x190>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	3334      	adds	r3, #52	; 0x34
 80020a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020a8:	9203      	str	r2, [sp, #12]
 80020aa:	4a60      	ldr	r2, [pc, #384]	; (800222c <_Z17configureChannelsv+0x194>)
 80020ac:	9202      	str	r2, [sp, #8]
 80020ae:	2200      	movs	r2, #0
 80020b0:	9201      	str	r2, [sp, #4]
 80020b2:	4a5d      	ldr	r2, [pc, #372]	; (8002228 <_Z17configureChannelsv+0x190>)
 80020b4:	9200      	str	r2, [sp, #0]
 80020b6:	2200      	movs	r2, #0
 80020b8:	495d      	ldr	r1, [pc, #372]	; (8002230 <_Z17configureChannelsv+0x198>)
 80020ba:	2001      	movs	r0, #1
 80020bc:	f7ff ff1c 	bl	8001ef8 <_Z26setupChannelOutputConfigtthP17TIM_HandleTypeDefhPVmS0_hP12GPIO_TypeDefm>
	setupChannelOutputConfigtt(2,&htim2, TIM_CHANNEL_2, &htim9.Instance->CCR2, &htim9, TIM_CHANNEL_2, CHSEL_FF2_2_CH2_GPIO_Port, CHSEL_FF2_2_CH2_Pin);
 80020c0:	4b59      	ldr	r3, [pc, #356]	; (8002228 <_Z17configureChannelsv+0x190>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	3338      	adds	r3, #56	; 0x38
 80020c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020ca:	9203      	str	r2, [sp, #12]
 80020cc:	4a57      	ldr	r2, [pc, #348]	; (800222c <_Z17configureChannelsv+0x194>)
 80020ce:	9202      	str	r2, [sp, #8]
 80020d0:	2204      	movs	r2, #4
 80020d2:	9201      	str	r2, [sp, #4]
 80020d4:	4a54      	ldr	r2, [pc, #336]	; (8002228 <_Z17configureChannelsv+0x190>)
 80020d6:	9200      	str	r2, [sp, #0]
 80020d8:	2204      	movs	r2, #4
 80020da:	4955      	ldr	r1, [pc, #340]	; (8002230 <_Z17configureChannelsv+0x198>)
 80020dc:	2002      	movs	r0, #2
 80020de:	f7ff ff0b 	bl	8001ef8 <_Z26setupChannelOutputConfigtthP17TIM_HandleTypeDefhPVmS0_hP12GPIO_TypeDefm>
	setupChannelOutputConfigt(3,&htim2, TIM_CHANNEL_3);
 80020e2:	2208      	movs	r2, #8
 80020e4:	4952      	ldr	r1, [pc, #328]	; (8002230 <_Z17configureChannelsv+0x198>)
 80020e6:	2003      	movs	r0, #3
 80020e8:	f7ff fed0 	bl	8001e8c <_Z25setupChannelOutputConfigthP17TIM_HandleTypeDefh>
	setupChannelOutputConfigt(4,&htim2, TIM_CHANNEL_4);
 80020ec:	220c      	movs	r2, #12
 80020ee:	4950      	ldr	r1, [pc, #320]	; (8002230 <_Z17configureChannelsv+0x198>)
 80020f0:	2004      	movs	r0, #4
 80020f2:	f7ff fecb 	bl	8001e8c <_Z25setupChannelOutputConfigthP17TIM_HandleTypeDefh>

	setupChannelOutputConfigtm(5,&htim3, TIM_CHANNEL_4, &hdac.Instance->DHR12R1, CHSEL_DAC1_CH5_GPIO_Port, CHSEL_DAC1_CH5_Pin);
 80020f6:	4b4f      	ldr	r3, [pc, #316]	; (8002234 <_Z17configureChannelsv+0x19c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	3308      	adds	r3, #8
 80020fc:	2280      	movs	r2, #128	; 0x80
 80020fe:	9201      	str	r2, [sp, #4]
 8002100:	4a4d      	ldr	r2, [pc, #308]	; (8002238 <_Z17configureChannelsv+0x1a0>)
 8002102:	9200      	str	r2, [sp, #0]
 8002104:	220c      	movs	r2, #12
 8002106:	494d      	ldr	r1, [pc, #308]	; (800223c <_Z17configureChannelsv+0x1a4>)
 8002108:	2005      	movs	r0, #5
 800210a:	f7ff fed9 	bl	8001ec0 <_Z26setupChannelOutputConfigtmhP17TIM_HandleTypeDefhPVmP12GPIO_TypeDefm>
	setupChannelOutputConfigtm(6,&htim1, TIM_CHANNEL_1, &hdac.Instance->DHR12R2, CHSEL_DAC2_CH6_GPIO_Port, CHSEL_DAC2_CH6_Pin);
 800210e:	4b49      	ldr	r3, [pc, #292]	; (8002234 <_Z17configureChannelsv+0x19c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	3314      	adds	r3, #20
 8002114:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002118:	9201      	str	r2, [sp, #4]
 800211a:	4a47      	ldr	r2, [pc, #284]	; (8002238 <_Z17configureChannelsv+0x1a0>)
 800211c:	9200      	str	r2, [sp, #0]
 800211e:	2200      	movs	r2, #0
 8002120:	4947      	ldr	r1, [pc, #284]	; (8002240 <_Z17configureChannelsv+0x1a8>)
 8002122:	2006      	movs	r0, #6
 8002124:	f7ff fecc 	bl	8001ec0 <_Z26setupChannelOutputConfigtmhP17TIM_HandleTypeDefhPVmP12GPIO_TypeDefm>

	setupChannelOutputConfigt(7,&htim1, TIM_CHANNEL_2);
 8002128:	2204      	movs	r2, #4
 800212a:	4945      	ldr	r1, [pc, #276]	; (8002240 <_Z17configureChannelsv+0x1a8>)
 800212c:	2007      	movs	r0, #7
 800212e:	f7ff fead 	bl	8001e8c <_Z25setupChannelOutputConfigthP17TIM_HandleTypeDefh>

	setupChannelOutputConfigtt(8, &htim1, TIM_CHANNEL_3, &htim13.Instance->CCR1, &htim13, TIM_CHANNEL_1, CHSEL_STEP3_FF5_CH8_GPIO_Port, CHSEL_STEP3_FF5_CH8_Pin);
 8002132:	4b44      	ldr	r3, [pc, #272]	; (8002244 <_Z17configureChannelsv+0x1ac>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	3334      	adds	r3, #52	; 0x34
 8002138:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800213c:	9203      	str	r2, [sp, #12]
 800213e:	4a3e      	ldr	r2, [pc, #248]	; (8002238 <_Z17configureChannelsv+0x1a0>)
 8002140:	9202      	str	r2, [sp, #8]
 8002142:	2200      	movs	r2, #0
 8002144:	9201      	str	r2, [sp, #4]
 8002146:	4a3f      	ldr	r2, [pc, #252]	; (8002244 <_Z17configureChannelsv+0x1ac>)
 8002148:	9200      	str	r2, [sp, #0]
 800214a:	2208      	movs	r2, #8
 800214c:	493c      	ldr	r1, [pc, #240]	; (8002240 <_Z17configureChannelsv+0x1a8>)
 800214e:	2008      	movs	r0, #8
 8002150:	f7ff fed2 	bl	8001ef8 <_Z26setupChannelOutputConfigtthP17TIM_HandleTypeDefhPVmS0_hP12GPIO_TypeDefm>
	setupChannelOutputConfigtt(9, &htim1, TIM_CHANNEL_4, &htim14.Instance->CCR1, &htim14, TIM_CHANNEL_1, CHSEL_STEP4_FF6_CH9_GPIO_Port, CHSEL_STEP4_FF6_CH9_Pin);
 8002154:	4b3c      	ldr	r3, [pc, #240]	; (8002248 <_Z17configureChannelsv+0x1b0>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	3334      	adds	r3, #52	; 0x34
 800215a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800215e:	9203      	str	r2, [sp, #12]
 8002160:	4a35      	ldr	r2, [pc, #212]	; (8002238 <_Z17configureChannelsv+0x1a0>)
 8002162:	9202      	str	r2, [sp, #8]
 8002164:	2200      	movs	r2, #0
 8002166:	9201      	str	r2, [sp, #4]
 8002168:	4a37      	ldr	r2, [pc, #220]	; (8002248 <_Z17configureChannelsv+0x1b0>)
 800216a:	9200      	str	r2, [sp, #0]
 800216c:	220c      	movs	r2, #12
 800216e:	4934      	ldr	r1, [pc, #208]	; (8002240 <_Z17configureChannelsv+0x1a8>)
 8002170:	2009      	movs	r0, #9
 8002172:	f7ff fec1 	bl	8001ef8 <_Z26setupChannelOutputConfigtthP17TIM_HandleTypeDefhPVmS0_hP12GPIO_TypeDefm>

	setupChannelOutputConfigtt(10, &htim4, TIM_CHANNEL_1, &htim12.Instance->CCR1, &htim12, TIM_CHANNEL_1, CHSEL_FF1_1_CH10_GPIO_Port, CHSEL_FF1_1_CH10_Pin);
 8002176:	4b35      	ldr	r3, [pc, #212]	; (800224c <_Z17configureChannelsv+0x1b4>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	3334      	adds	r3, #52	; 0x34
 800217c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002180:	9203      	str	r2, [sp, #12]
 8002182:	4a33      	ldr	r2, [pc, #204]	; (8002250 <_Z17configureChannelsv+0x1b8>)
 8002184:	9202      	str	r2, [sp, #8]
 8002186:	2200      	movs	r2, #0
 8002188:	9201      	str	r2, [sp, #4]
 800218a:	4a30      	ldr	r2, [pc, #192]	; (800224c <_Z17configureChannelsv+0x1b4>)
 800218c:	9200      	str	r2, [sp, #0]
 800218e:	2200      	movs	r2, #0
 8002190:	4930      	ldr	r1, [pc, #192]	; (8002254 <_Z17configureChannelsv+0x1bc>)
 8002192:	200a      	movs	r0, #10
 8002194:	f7ff feb0 	bl	8001ef8 <_Z26setupChannelOutputConfigtthP17TIM_HandleTypeDefhPVmS0_hP12GPIO_TypeDefm>
	setupChannelOutputConfigtt(11, &htim4, TIM_CHANNEL_2, &htim12.Instance->CCR2, &htim12, TIM_CHANNEL_2, CHSEL_FF1_2_CH11_GPIO_Port, CHSEL_FF1_2_CH11_Pin);
 8002198:	4b2c      	ldr	r3, [pc, #176]	; (800224c <_Z17configureChannelsv+0x1b4>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	3338      	adds	r3, #56	; 0x38
 800219e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021a2:	9203      	str	r2, [sp, #12]
 80021a4:	4a2a      	ldr	r2, [pc, #168]	; (8002250 <_Z17configureChannelsv+0x1b8>)
 80021a6:	9202      	str	r2, [sp, #8]
 80021a8:	2204      	movs	r2, #4
 80021aa:	9201      	str	r2, [sp, #4]
 80021ac:	4a27      	ldr	r2, [pc, #156]	; (800224c <_Z17configureChannelsv+0x1b4>)
 80021ae:	9200      	str	r2, [sp, #0]
 80021b0:	2204      	movs	r2, #4
 80021b2:	4928      	ldr	r1, [pc, #160]	; (8002254 <_Z17configureChannelsv+0x1bc>)
 80021b4:	200b      	movs	r0, #11
 80021b6:	f7ff fe9f 	bl	8001ef8 <_Z26setupChannelOutputConfigtthP17TIM_HandleTypeDefhPVmS0_hP12GPIO_TypeDefm>

	setupChannelOutputConfigt(12,&htim4, TIM_CHANNEL_3);
 80021ba:	2208      	movs	r2, #8
 80021bc:	4925      	ldr	r1, [pc, #148]	; (8002254 <_Z17configureChannelsv+0x1bc>)
 80021be:	200c      	movs	r0, #12
 80021c0:	f7ff fe64 	bl	8001e8c <_Z25setupChannelOutputConfigthP17TIM_HandleTypeDefh>
	setupChannelOutputConfigt(13,&htim4, TIM_CHANNEL_4);
 80021c4:	220c      	movs	r2, #12
 80021c6:	4923      	ldr	r1, [pc, #140]	; (8002254 <_Z17configureChannelsv+0x1bc>)
 80021c8:	200d      	movs	r0, #13
 80021ca:	f7ff fe5f 	bl	8001e8c <_Z25setupChannelOutputConfigthP17TIM_HandleTypeDefh>

	setupChannelOutputConfigt(14,&htim8, TIM_CHANNEL_1);
 80021ce:	2200      	movs	r2, #0
 80021d0:	4921      	ldr	r1, [pc, #132]	; (8002258 <_Z17configureChannelsv+0x1c0>)
 80021d2:	200e      	movs	r0, #14
 80021d4:	f7ff fe5a 	bl	8001e8c <_Z25setupChannelOutputConfigthP17TIM_HandleTypeDefh>
	setupChannelOutputConfigt(15,&htim8, TIM_CHANNEL_2);
 80021d8:	2204      	movs	r2, #4
 80021da:	491f      	ldr	r1, [pc, #124]	; (8002258 <_Z17configureChannelsv+0x1c0>)
 80021dc:	200f      	movs	r0, #15
 80021de:	f7ff fe55 	bl	8001e8c <_Z25setupChannelOutputConfigthP17TIM_HandleTypeDefh>
	setupChannelOutputConfigtt(16,&htim8, TIM_CHANNEL_3, &htim10.Instance->CCR1, &htim10, TIM_CHANNEL_1, CHSEL_STEP1_FF3_CH16_GPIO_Port, CHSEL_STEP1_FF3_CH16_Pin);
 80021e2:	4b1e      	ldr	r3, [pc, #120]	; (800225c <_Z17configureChannelsv+0x1c4>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	3334      	adds	r3, #52	; 0x34
 80021e8:	2201      	movs	r2, #1
 80021ea:	9203      	str	r2, [sp, #12]
 80021ec:	4a12      	ldr	r2, [pc, #72]	; (8002238 <_Z17configureChannelsv+0x1a0>)
 80021ee:	9202      	str	r2, [sp, #8]
 80021f0:	2200      	movs	r2, #0
 80021f2:	9201      	str	r2, [sp, #4]
 80021f4:	4a19      	ldr	r2, [pc, #100]	; (800225c <_Z17configureChannelsv+0x1c4>)
 80021f6:	9200      	str	r2, [sp, #0]
 80021f8:	2208      	movs	r2, #8
 80021fa:	4917      	ldr	r1, [pc, #92]	; (8002258 <_Z17configureChannelsv+0x1c0>)
 80021fc:	2010      	movs	r0, #16
 80021fe:	f7ff fe7b 	bl	8001ef8 <_Z26setupChannelOutputConfigtthP17TIM_HandleTypeDefhPVmS0_hP12GPIO_TypeDefm>
	setupChannelOutputConfigtt(17,&htim8, TIM_CHANNEL_4, &htim11.Instance->CCR1, &htim11, TIM_CHANNEL_1, CHSEL_STEP2_FF4_CH17_GPIO_Port, CHSEL_STEP2_FF4_CH17_Pin);
 8002202:	4b17      	ldr	r3, [pc, #92]	; (8002260 <_Z17configureChannelsv+0x1c8>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	3334      	adds	r3, #52	; 0x34
 8002208:	2202      	movs	r2, #2
 800220a:	9203      	str	r2, [sp, #12]
 800220c:	4a0a      	ldr	r2, [pc, #40]	; (8002238 <_Z17configureChannelsv+0x1a0>)
 800220e:	9202      	str	r2, [sp, #8]
 8002210:	2200      	movs	r2, #0
 8002212:	9201      	str	r2, [sp, #4]
 8002214:	4a12      	ldr	r2, [pc, #72]	; (8002260 <_Z17configureChannelsv+0x1c8>)
 8002216:	9200      	str	r2, [sp, #0]
 8002218:	220c      	movs	r2, #12
 800221a:	490f      	ldr	r1, [pc, #60]	; (8002258 <_Z17configureChannelsv+0x1c0>)
 800221c:	2011      	movs	r0, #17
 800221e:	f7ff fe6b 	bl	8001ef8 <_Z26setupChannelOutputConfigtthP17TIM_HandleTypeDefhPVmS0_hP12GPIO_TypeDefm>

	// The rest is not backed by a timer and the defaults are "nullptr" so we are safe to not define them
}
 8002222:	bf00      	nop
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	20002388 	.word	0x20002388
 800222c:	40020400 	.word	0x40020400
 8002230:	20002268 	.word	0x20002268
 8002234:	20002104 	.word	0x20002104
 8002238:	40021000 	.word	0x40021000
 800223c:	200022b0 	.word	0x200022b0
 8002240:	20002220 	.word	0x20002220
 8002244:	200024a8 	.word	0x200024a8
 8002248:	200024f0 	.word	0x200024f0
 800224c:	20002460 	.word	0x20002460
 8002250:	40020c00 	.word	0x40020c00
 8002254:	200022f8 	.word	0x200022f8
 8002258:	20002340 	.word	0x20002340
 800225c:	200023d0 	.word	0x200023d0
 8002260:	20002418 	.word	0x20002418

08002264 <setup>:

void setup(void) {
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0

	HAL_UART_RegisterCallback(&huart1, HAL_UART_TX_COMPLETE_CB_ID, UART1TXDone);
 800226a:	4a70      	ldr	r2, [pc, #448]	; (800242c <setup+0x1c8>)
 800226c:	2101      	movs	r1, #1
 800226e:	4870      	ldr	r0, [pc, #448]	; (8002430 <setup+0x1cc>)
 8002270:	f006 fc7a 	bl	8008b68 <HAL_UART_RegisterCallback>
	HAL_UART_RegisterCallback(&huart1, HAL_UART_ERROR_CB_ID, UART1Error);
 8002274:	4a6f      	ldr	r2, [pc, #444]	; (8002434 <setup+0x1d0>)
 8002276:	2104      	movs	r1, #4
 8002278:	486d      	ldr	r0, [pc, #436]	; (8002430 <setup+0x1cc>)
 800227a:	f006 fc75 	bl	8008b68 <HAL_UART_RegisterCallback>

	txfailratio[0] = 0;
 800227e:	4b6e      	ldr	r3, [pc, #440]	; (8002438 <setup+0x1d4>)
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
	txfailratio[1] = 0;
 8002284:	4b6c      	ldr	r3, [pc, #432]	; (8002438 <setup+0x1d4>)
 8002286:	2200      	movs	r2, #0
 8002288:	605a      	str	r2, [r3, #4]
	memset(receiverData.bytesUnion.u8, 0, 32);
 800228a:	2220      	movs	r2, #32
 800228c:	2100      	movs	r1, #0
 800228e:	486b      	ldr	r0, [pc, #428]	; (800243c <setup+0x1d8>)
 8002290:	f009 feae 	bl	800bff0 <memset>
	memset(transmitterData.bytesUnion.u8, 0, 32);
 8002294:	2220      	movs	r2, #32
 8002296:	2100      	movs	r1, #0
 8002298:	4869      	ldr	r0, [pc, #420]	; (8002440 <setup+0x1dc>)
 800229a:	f009 fea9 	bl	800bff0 <memset>
	__HAL_RCC_CCMDATARAMEN_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	603b      	str	r3, [r7, #0]
 80022a2:	4b68      	ldr	r3, [pc, #416]	; (8002444 <setup+0x1e0>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	4a67      	ldr	r2, [pc, #412]	; (8002444 <setup+0x1e0>)
 80022a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022ac:	6313      	str	r3, [r2, #48]	; 0x30
 80022ae:	4b65      	ldr	r3, [pc, #404]	; (8002444 <setup+0x1e0>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022b6:	603b      	str	r3, [r7, #0]
 80022b8:	683b      	ldr	r3, [r7, #0]

	//MX_USB_DEVICE_Init();
	setStatusLed(0, 0, 1);
 80022ba:	2201      	movs	r2, #1
 80022bc:	2100      	movs	r1, #0
 80022be:	2000      	movs	r0, #0
 80022c0:	f7fe fe9e 	bl	8001000 <_Z12setStatusLedhhh>

	HAL_Delay(100);
 80022c4:	2064      	movs	r0, #100	; 0x64
 80022c6:	f003 fdb5 	bl	8005e34 <HAL_Delay>
	printf("Starting RC Receiver\r\n");
 80022ca:	485f      	ldr	r0, [pc, #380]	; (8002448 <setup+0x1e4>)
 80022cc:	f009 fd76 	bl	800bdbc <puts>
	W25qxx_Init();
 80022d0:	f008 fc06 	bl	800aae0 <W25qxx_Init>

	printf("Loading settings");
 80022d4:	485d      	ldr	r0, [pc, #372]	; (800244c <setup+0x1e8>)
 80022d6:	f009 fd0b 	bl	800bcf0 <iprintf>
	uint32_t start = HAL_GetTick();
 80022da:	f003 fd9f 	bl	8005e1c <HAL_GetTick>
 80022de:	60b8      	str	r0, [r7, #8]
	W25qxx_ReadBlock((uint8_t*)&settings, 1, 0, sizeof(Settings));
 80022e0:	f641 035b 	movw	r3, #6235	; 0x185b
 80022e4:	2200      	movs	r2, #0
 80022e6:	2101      	movs	r1, #1
 80022e8:	4859      	ldr	r0, [pc, #356]	; (8002450 <setup+0x1ec>)
 80022ea:	f008 fe9f 	bl	800b02c <W25qxx_ReadBlock>
	printf("Loading took %d millis\r\n", HAL_GetTick() - start);
 80022ee:	f003 fd95 	bl	8005e1c <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	4619      	mov	r1, r3
 80022fa:	4856      	ldr	r0, [pc, #344]	; (8002454 <setup+0x1f0>)
 80022fc:	f009 fcf8 	bl	800bcf0 <iprintf>
	huart5.RxCpltCallback = &customUartReceived;
 8002300:	4b55      	ldr	r3, [pc, #340]	; (8002458 <setup+0x1f4>)
 8002302:	4a56      	ldr	r2, [pc, #344]	; (800245c <setup+0x1f8>)
 8002304:	651a      	str	r2, [r3, #80]	; 0x50
	huart5.TxCpltCallback = &customUartDataTransmitted;
 8002306:	4b54      	ldr	r3, [pc, #336]	; (8002458 <setup+0x1f4>)
 8002308:	4a55      	ldr	r2, [pc, #340]	; (8002460 <setup+0x1fc>)
 800230a:	649a      	str	r2, [r3, #72]	; 0x48
	huart5.ErrorCallback = &customUartError;
 800230c:	4b52      	ldr	r3, [pc, #328]	; (8002458 <setup+0x1f4>)
 800230e:	4a55      	ldr	r2, [pc, #340]	; (8002464 <setup+0x200>)
 8002310:	655a      	str	r2, [r3, #84]	; 0x54
	HAL_UART_Receive_IT(&customUart, customUartRXBuffer, customHeaderSize);
 8002312:	4b55      	ldr	r3, [pc, #340]	; (8002468 <setup+0x204>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	b29b      	uxth	r3, r3
 8002318:	461a      	mov	r2, r3
 800231a:	4954      	ldr	r1, [pc, #336]	; (800246c <setup+0x208>)
 800231c:	484e      	ldr	r0, [pc, #312]	; (8002458 <setup+0x1f4>)
 800231e:	f006 fe44 	bl	8008faa <HAL_UART_Receive_IT>
	common_nRFInit();
 8002322:	f7fe fe9d 	bl	8001060 <_Z14common_nRFInitv>

	//  setOkLed(1);
	//  HAL_Delay(500);
	//  setOkLed(0);

	setStatusLed(0, 0, 0);
 8002326:	2200      	movs	r2, #0
 8002328:	2100      	movs	r1, #0
 800232a:	2000      	movs	r0, #0
 800232c:	f7fe fe68 	bl	8001000 <_Z12setStatusLedhhh>

	configureChannels();
 8002330:	f7ff feb2 	bl	8002098 <_Z17configureChannelsv>
	setDefault(0); // Set everything to default?
 8002334:	2000      	movs	r0, #0
 8002336:	f7ff fd73 	bl	8001e20 <_Z10setDefaulth>
	for(int i = 0; i <= 24; i++){
 800233a:	2300      	movs	r3, #0
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	e064      	b.n	800240a <setup+0x1a6>
		if(channelsOutputConfig[i].mainTimer != nullptr){
 8002340:	494b      	ldr	r1, [pc, #300]	; (8002470 <setup+0x20c>)
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	4613      	mov	r3, r2
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	4413      	add	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	440b      	add	r3, r1
 800234e:	3304      	adds	r3, #4
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d025      	beq.n	80023a2 <setup+0x13e>
			if (HAL_TIM_PWM_Start(channelsOutputConfig[i].mainTimer, channelsOutputConfig[i].mainTimerCH) != HAL_OK){
 8002356:	4946      	ldr	r1, [pc, #280]	; (8002470 <setup+0x20c>)
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	4613      	mov	r3, r2
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	4413      	add	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	440b      	add	r3, r1
 8002364:	3304      	adds	r3, #4
 8002366:	6818      	ldr	r0, [r3, #0]
 8002368:	4941      	ldr	r1, [pc, #260]	; (8002470 <setup+0x20c>)
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	4613      	mov	r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	4413      	add	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	3308      	adds	r3, #8
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	4619      	mov	r1, r3
 800237c:	f005 fea4 	bl	80080c8 <HAL_TIM_PWM_Start>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	bf14      	ite	ne
 8002386:	2301      	movne	r3, #1
 8002388:	2300      	moveq	r3, #0
 800238a:	b2db      	uxtb	r3, r3
 800238c:	2b00      	cmp	r3, #0
 800238e:	d008      	beq.n	80023a2 <setup+0x13e>
				printf("Failed to init the main timer for channel %d\r\n", i);
 8002390:	68f9      	ldr	r1, [r7, #12]
 8002392:	4838      	ldr	r0, [pc, #224]	; (8002474 <setup+0x210>)
 8002394:	f009 fcac 	bl	800bcf0 <iprintf>
				Error_Handler();
 8002398:	f240 217d 	movw	r1, #637	; 0x27d
 800239c:	4836      	ldr	r0, [pc, #216]	; (8002478 <setup+0x214>)
 800239e:	f001 fe01 	bl	8003fa4 <_Error_Handler>
			}
		}
		if(channelsOutputConfig[i].miscTimConf != nullptr){
 80023a2:	4933      	ldr	r1, [pc, #204]	; (8002470 <setup+0x20c>)
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	4613      	mov	r3, r2
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	4413      	add	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	440b      	add	r3, r1
 80023b0:	3314      	adds	r3, #20
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d025      	beq.n	8002404 <setup+0x1a0>
			if (HAL_TIM_PWM_Start(channelsOutputConfig[i].miscTimConf, channelsOutputConfig[i].miscTimCH) != HAL_OK){
 80023b8:	492d      	ldr	r1, [pc, #180]	; (8002470 <setup+0x20c>)
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	4613      	mov	r3, r2
 80023be:	00db      	lsls	r3, r3, #3
 80023c0:	4413      	add	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	440b      	add	r3, r1
 80023c6:	3314      	adds	r3, #20
 80023c8:	6818      	ldr	r0, [r3, #0]
 80023ca:	4929      	ldr	r1, [pc, #164]	; (8002470 <setup+0x20c>)
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	4613      	mov	r3, r2
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	4413      	add	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	440b      	add	r3, r1
 80023d8:	3318      	adds	r3, #24
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	4619      	mov	r1, r3
 80023de:	f005 fe73 	bl	80080c8 <HAL_TIM_PWM_Start>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	bf14      	ite	ne
 80023e8:	2301      	movne	r3, #1
 80023ea:	2300      	moveq	r3, #0
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d008      	beq.n	8002404 <setup+0x1a0>
				printf("Failed to init the misc timer for channel %d\r\n", i);
 80023f2:	68f9      	ldr	r1, [r7, #12]
 80023f4:	4821      	ldr	r0, [pc, #132]	; (800247c <setup+0x218>)
 80023f6:	f009 fc7b 	bl	800bcf0 <iprintf>
				Error_Handler();
 80023fa:	f240 2183 	movw	r1, #643	; 0x283
 80023fe:	481e      	ldr	r0, [pc, #120]	; (8002478 <setup+0x214>)
 8002400:	f001 fdd0 	bl	8003fa4 <_Error_Handler>
	for(int i = 0; i <= 24; i++){
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	3301      	adds	r3, #1
 8002408:	60fb      	str	r3, [r7, #12]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2b18      	cmp	r3, #24
 800240e:	dd97      	ble.n	8002340 <setup+0xdc>
//
//    if (HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1) != HAL_OK)	Error_Handler();
//
//    if (HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1) != HAL_OK)	Error_Handler();

	uint32_t settingsSize = sizeof(Settings);
 8002410:	f641 035b 	movw	r3, #6235	; 0x185b
 8002414:	607b      	str	r3, [r7, #4]
	printf("Size of settings %d\r\n", settingsSize);
 8002416:	6879      	ldr	r1, [r7, #4]
 8002418:	4819      	ldr	r0, [pc, #100]	; (8002480 <setup+0x21c>)
 800241a:	f009 fc69 	bl	800bcf0 <iprintf>

	printf("Started RC Receiver\r\n");
 800241e:	4819      	ldr	r0, [pc, #100]	; (8002484 <setup+0x220>)
 8002420:	f009 fccc 	bl	800bdbc <puts>
}
 8002424:	bf00      	nop
 8002426:	3710      	adds	r7, #16
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	080028c9 	.word	0x080028c9
 8002430:	200025ac 	.word	0x200025ac
 8002434:	080028ad 	.word	0x080028ad
 8002438:	200005ac 	.word	0x200005ac
 800243c:	20000608 	.word	0x20000608
 8002440:	200005e8 	.word	0x200005e8
 8002444:	40023800 	.word	0x40023800
 8002448:	0800e12c 	.word	0x0800e12c
 800244c:	0800e144 	.word	0x0800e144
 8002450:	20000628 	.word	0x20000628
 8002454:	0800e158 	.word	0x0800e158
 8002458:	20002538 	.word	0x20002538
 800245c:	08001cfd 	.word	0x08001cfd
 8002460:	08001ce9 	.word	0x08001ce9
 8002464:	08001dd5 	.word	0x08001dd5
 8002468:	20000008 	.word	0x20000008
 800246c:	20001eec 	.word	0x20001eec
 8002470:	20000224 	.word	0x20000224
 8002474:	0800e174 	.word	0x0800e174
 8002478:	0800dfb0 	.word	0x0800dfb0
 800247c:	0800e1a4 	.word	0x0800e1a4
 8002480:	0800e1d4 	.word	0x0800e1d4
 8002484:	0800e1ec 	.word	0x0800e1ec

08002488 <loop>:

void loop() {
 8002488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800248a:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
 800248e:	af02      	add	r7, sp, #8
	uint32_t now = HAL_GetTick();
 8002490:	f003 fcc4 	bl	8005e1c <HAL_GetTick>
 8002494:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
	if (gotData) {
 8002498:	4bbd      	ldr	r3, [pc, #756]	; (8002790 <loop+0x308>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d022      	beq.n	80024e6 <loop+0x5e>
		lastDataReceived = now;
 80024a0:	4abc      	ldr	r2, [pc, #752]	; (8002794 <loop+0x30c>)
 80024a2:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80024a6:	6013      	str	r3, [r2, #0]
		setStatusLed(0, 1, 0);
 80024a8:	2200      	movs	r2, #0
 80024aa:	2101      	movs	r1, #1
 80024ac:	2000      	movs	r0, #0
 80024ae:	f7fe fda7 	bl	8001000 <_Z12setStatusLedhhh>
		gotData = 0;
 80024b2:	4bb7      	ldr	r3, [pc, #732]	; (8002790 <loop+0x308>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	701a      	strb	r2, [r3, #0]
		uint8_t buf[32];
		uint8_t length = 0;
 80024b8:	2300      	movs	r3, #0
 80024ba:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b

		nRF24_RXResult pipeLine = nRF24_ReadPayloadDpl(buf, &length);
 80024be:	f207 220b 	addw	r2, r7, #523	; 0x20b
 80024c2:	f107 0308 	add.w	r3, r7, #8
 80024c6:	4611      	mov	r1, r2
 80024c8:	4618      	mov	r0, r3
 80024ca:	f008 f9c9 	bl	800a860 <_Z20nRF24_ReadPayloadDplPhS_>
 80024ce:	4603      	mov	r3, r0
 80024d0:	f887 321b 	strb.w	r3, [r7, #539]	; 0x21b
		//printf("%s Message size '%d'. Data: ", isTransmitter ? "ACK" : "Message", length);
		parseRFPacket(buf, length, pipeLine);
 80024d4:	f897 120b 	ldrb.w	r1, [r7, #523]	; 0x20b
 80024d8:	f897 221b 	ldrb.w	r2, [r7, #539]	; 0x21b
 80024dc:	f107 0308 	add.w	r3, r7, #8
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7fe ff63 	bl	80013ac <_Z13parseRFPacketPhh14nRF24_RXResult>

	}
	now = HAL_GetTick();
 80024e6:	f003 fc99 	bl	8005e1c <HAL_GetTick>
 80024ea:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
	if (now - lastDataReceived > 1000) {
 80024ee:	4ba9      	ldr	r3, [pc, #676]	; (8002794 <loop+0x30c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024fc:	d924      	bls.n	8002548 <loop+0xc0>
		if (now % 500 == 0)
 80024fe:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8002502:	4ba5      	ldr	r3, [pc, #660]	; (8002798 <loop+0x310>)
 8002504:	fba3 1302 	umull	r1, r3, r3, r2
 8002508:	095b      	lsrs	r3, r3, #5
 800250a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800250e:	fb01 f303 	mul.w	r3, r1, r3
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b00      	cmp	r3, #0
 8002516:	d105      	bne.n	8002524 <loop+0x9c>
			setStatusLed(1, 0, 0);
 8002518:	2200      	movs	r2, #0
 800251a:	2100      	movs	r1, #0
 800251c:	2001      	movs	r0, #1
 800251e:	f7fe fd6f 	bl	8001000 <_Z12setStatusLedhhh>
 8002522:	e02e      	b.n	8002582 <loop+0xfa>
		else if (now % 250 == 0) {
 8002524:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8002528:	4b9b      	ldr	r3, [pc, #620]	; (8002798 <loop+0x310>)
 800252a:	fba3 1302 	umull	r1, r3, r3, r2
 800252e:	091b      	lsrs	r3, r3, #4
 8002530:	21fa      	movs	r1, #250	; 0xfa
 8002532:	fb01 f303 	mul.w	r3, r1, r3
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b00      	cmp	r3, #0
 800253a:	d122      	bne.n	8002582 <loop+0xfa>
			setStatusLed(0, 0, 0);
 800253c:	2200      	movs	r2, #0
 800253e:	2100      	movs	r1, #0
 8002540:	2000      	movs	r0, #0
 8002542:	f7fe fd5d 	bl	8001000 <_Z12setStatusLedhhh>
 8002546:	e01c      	b.n	8002582 <loop+0xfa>
		}
//   		  	setStatusLed(1,0,0);
	} else if (now - lastDataReceived > 500) {
 8002548:	4b92      	ldr	r3, [pc, #584]	; (8002794 <loop+0x30c>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002556:	d909      	bls.n	800256c <loop+0xe4>
		setStatusLed(0, 0, 1);
 8002558:	2201      	movs	r2, #1
 800255a:	2100      	movs	r1, #0
 800255c:	2000      	movs	r0, #0
 800255e:	f7fe fd4f 	bl	8001000 <_Z12setStatusLedhhh>
		sbusTx.failsafe(true);
 8002562:	2101      	movs	r1, #1
 8002564:	488d      	ldr	r0, [pc, #564]	; (800279c <loop+0x314>)
 8002566:	f7fe fcd2 	bl	8000f0e <_ZN3bfs6SbusTx8failsafeEb>
 800256a:	e00a      	b.n	8002582 <loop+0xfa>
	} else if(now - lastDataReceived > 20){
 800256c:	4b89      	ldr	r3, [pc, #548]	; (8002794 <loop+0x30c>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b14      	cmp	r3, #20
 8002578:	d903      	bls.n	8002582 <loop+0xfa>
		sbusTx.lost_frame(true);
 800257a:	2101      	movs	r1, #1
 800257c:	4887      	ldr	r0, [pc, #540]	; (800279c <loop+0x314>)
 800257e:	f7fe fcd6 	bl	8000f2e <_ZN3bfs6SbusTx10lost_frameEb>
	}
	if(now - lastSBUSSend >= 7){
 8002582:	4b87      	ldr	r3, [pc, #540]	; (80027a0 <loop+0x318>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b06      	cmp	r3, #6
 800258e:	d906      	bls.n	800259e <loop+0x116>
		lastSBUSSend = now;
 8002590:	4a83      	ldr	r2, [pc, #524]	; (80027a0 <loop+0x318>)
 8002592:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8002596:	6013      	str	r3, [r2, #0]
		sbusTx.Write();
 8002598:	4880      	ldr	r0, [pc, #512]	; (800279c <loop+0x314>)
 800259a:	f003 fa2b 	bl	80059f4 <_ZN3bfs6SbusTx5WriteEv>
	}

	if (huart1.RxXferCount != 0) {
 800259e:	4b81      	ldr	r3, [pc, #516]	; (80027a4 <loop+0x31c>)
 80025a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	bf14      	ite	ne
 80025a8:	2301      	movne	r3, #1
 80025aa:	2300      	moveq	r3, #0
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00f      	beq.n	80025d2 <loop+0x14a>
		uint8_t uartData[1];
		HAL_UART_Receive(&huart1, uartData, 1, 1);
 80025b2:	f507 7102 	add.w	r1, r7, #520	; 0x208
 80025b6:	2301      	movs	r3, #1
 80025b8:	2201      	movs	r2, #1
 80025ba:	487a      	ldr	r0, [pc, #488]	; (80027a4 <loop+0x31c>)
 80025bc:	f006 fc0e 	bl	8008ddc <HAL_UART_Receive>
		switch (uartData[0]) {
 80025c0:	f897 3208 	ldrb.w	r3, [r7, #520]	; 0x208
 80025c4:	2b2a      	cmp	r3, #42	; 0x2a
 80025c6:	d104      	bne.n	80025d2 <loop+0x14a>
		case '*':
			printf("RESET");
 80025c8:	4877      	ldr	r0, [pc, #476]	; (80027a8 <loop+0x320>)
 80025ca:	f009 fb91 	bl	800bcf0 <iprintf>
			NVIC_SystemReset();
 80025ce:	f7fe fc69 	bl	8000ea4 <__NVIC_SystemReset>
			break;
		}
	}
	now = HAL_GetTick();
 80025d2:	f003 fc23 	bl	8005e1c <HAL_GetTick>
 80025d6:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
	if (now - lastCHPrint >= 1000) {
 80025da:	4b74      	ldr	r3, [pc, #464]	; (80027ac <loop+0x324>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025e8:	d37d      	bcc.n	80026e6 <loop+0x25e>
//	if (now % 1000 == 0) {
		lastCHPrint = now;
 80025ea:	4a70      	ldr	r2, [pc, #448]	; (80027ac <loop+0x324>)
 80025ec:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80025f0:	6013      	str	r3, [r2, #0]
		char buf[512] = {0};
 80025f2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80025f6:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80025fa:	2200      	movs	r2, #0
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	3304      	adds	r3, #4
 8002600:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 8002604:	2100      	movs	r1, #0
 8002606:	4618      	mov	r0, r3
 8002608:	f009 fcf2 	bl	800bff0 <memset>
		char* bufPtr = buf;
 800260c:	f107 0308 	add.w	r3, r7, #8
 8002610:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
		bufPtr += sprintf(bufPtr, "%7d ", now);
 8002614:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8002618:	4965      	ldr	r1, [pc, #404]	; (80027b0 <loop+0x328>)
 800261a:	f8d7 0224 	ldr.w	r0, [r7, #548]	; 0x224
 800261e:	f009 fbd5 	bl	800bdcc <siprintf>
 8002622:	4603      	mov	r3, r0
 8002624:	461a      	mov	r2, r3
 8002626:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800262a:	4413      	add	r3, r2
 800262c:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
		for (int i = 0; i < 12; i++) {
 8002630:	2300      	movs	r3, #0
 8002632:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 8002636:	e018      	b.n	800266a <loop+0x1e2>
			bufPtr += sprintf(bufPtr, " CH%02d: %04d", i + 1, channelValues[i]);
 8002638:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800263c:	1c5a      	adds	r2, r3, #1
 800263e:	495d      	ldr	r1, [pc, #372]	; (80027b4 <loop+0x32c>)
 8002640:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8002644:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002648:	495b      	ldr	r1, [pc, #364]	; (80027b8 <loop+0x330>)
 800264a:	f8d7 0224 	ldr.w	r0, [r7, #548]	; 0x224
 800264e:	f009 fbbd 	bl	800bdcc <siprintf>
 8002652:	4603      	mov	r3, r0
 8002654:	461a      	mov	r2, r3
 8002656:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800265a:	4413      	add	r3, r2
 800265c:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
		for (int i = 0; i < 12; i++) {
 8002660:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8002664:	3301      	adds	r3, #1
 8002666:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 800266a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800266e:	2b0b      	cmp	r3, #11
 8002670:	dde2      	ble.n	8002638 <loop+0x1b0>
		}
		bufPtr += sprintf(bufPtr, " RX %7u ERR %7u(%5.2f)", txfailratio[0], txfailratio[1], (double) txfailratio[0] / (double) txfailratio[1]);
 8002672:	4b52      	ldr	r3, [pc, #328]	; (80027bc <loop+0x334>)
 8002674:	681e      	ldr	r6, [r3, #0]
 8002676:	4b51      	ldr	r3, [pc, #324]	; (80027bc <loop+0x334>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	607b      	str	r3, [r7, #4]
 800267c:	4b4f      	ldr	r3, [pc, #316]	; (80027bc <loop+0x334>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4618      	mov	r0, r3
 8002682:	f7fd ff3f 	bl	8000504 <__aeabi_ui2d>
 8002686:	4604      	mov	r4, r0
 8002688:	460d      	mov	r5, r1
 800268a:	4b4c      	ldr	r3, [pc, #304]	; (80027bc <loop+0x334>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	4618      	mov	r0, r3
 8002690:	f7fd ff38 	bl	8000504 <__aeabi_ui2d>
 8002694:	4602      	mov	r2, r0
 8002696:	460b      	mov	r3, r1
 8002698:	4620      	mov	r0, r4
 800269a:	4629      	mov	r1, r5
 800269c:	f7fe f8d6 	bl	800084c <__aeabi_ddiv>
 80026a0:	4602      	mov	r2, r0
 80026a2:	460b      	mov	r3, r1
 80026a4:	e9cd 2300 	strd	r2, r3, [sp]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4632      	mov	r2, r6
 80026ac:	4944      	ldr	r1, [pc, #272]	; (80027c0 <loop+0x338>)
 80026ae:	f8d7 0224 	ldr.w	r0, [r7, #548]	; 0x224
 80026b2:	f009 fb8b 	bl	800bdcc <siprintf>
 80026b6:	4603      	mov	r3, r0
 80026b8:	461a      	mov	r2, r3
 80026ba:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80026be:	4413      	add	r3, r2
 80026c0:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
		bufPtr += sprintf(bufPtr, "\r\n");
 80026c4:	493f      	ldr	r1, [pc, #252]	; (80027c4 <loop+0x33c>)
 80026c6:	f8d7 0224 	ldr.w	r0, [r7, #548]	; 0x224
 80026ca:	f009 fb7f 	bl	800bdcc <siprintf>
 80026ce:	4603      	mov	r3, r0
 80026d0:	461a      	mov	r2, r3
 80026d2:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80026d6:	4413      	add	r3, r2
 80026d8:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
		printf(buf);
 80026dc:	f107 0308 	add.w	r3, r7, #8
 80026e0:	4618      	mov	r0, r3
 80026e2:	f009 fb05 	bl	800bcf0 <iprintf>
	}

	if(saveSettingsToStorage == 1){
 80026e6:	4b38      	ldr	r3, [pc, #224]	; (80027c8 <loop+0x340>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d13b      	bne.n	8002766 <loop+0x2de>
		uint32_t* settingsPtr = (uint32_t*)&settings;
 80026ee:	4b37      	ldr	r3, [pc, #220]	; (80027cc <loop+0x344>)
 80026f0:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
		uint32_t crc = HAL_CRC_Calculate(&hcrc, settingsPtr, sizeof(Settings) / 4);
 80026f4:	f240 6216 	movw	r2, #1558	; 0x616
 80026f8:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 80026fc:	4834      	ldr	r0, [pc, #208]	; (80027d0 <loop+0x348>)
 80026fe:	f003 fcea 	bl	80060d6 <HAL_CRC_Calculate>
 8002702:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210

		if(crc == settingsCRC){
 8002706:	4b33      	ldr	r3, [pc, #204]	; (80027d4 <loop+0x34c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800270e:	429a      	cmp	r2, r3
 8002710:	d11e      	bne.n	8002750 <loop+0x2c8>
			printf("Settings successfully received. Saving to storage\r\n");
 8002712:	4831      	ldr	r0, [pc, #196]	; (80027d8 <loop+0x350>)
 8002714:	f009 fb52 	bl	800bdbc <puts>
			uint32_t start = HAL_GetTick();
 8002718:	f003 fb80 	bl	8005e1c <HAL_GetTick>
 800271c:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
			W25qxx_EraseBlock(1); // Do I need to erase the block before writing
 8002720:	2001      	movs	r0, #1
 8002722:	f008 faaf 	bl	800ac84 <W25qxx_EraseBlock>
			W25qxx_WriteBlock((uint8_t*)&settings, 1, 0, sizeof(Settings));
 8002726:	f641 035b 	movw	r3, #6235	; 0x185b
 800272a:	2200      	movs	r2, #0
 800272c:	2101      	movs	r1, #1
 800272e:	4827      	ldr	r0, [pc, #156]	; (80027cc <loop+0x344>)
 8002730:	f008 fb9c 	bl	800ae6c <W25qxx_WriteBlock>
			printf("Saving settings took %d millis\r\n", HAL_GetTick() - start);
 8002734:	f003 fb72 	bl	8005e1c <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	4619      	mov	r1, r3
 8002742:	4826      	ldr	r0, [pc, #152]	; (80027dc <loop+0x354>)
 8002744:	f009 fad4 	bl	800bcf0 <iprintf>
			saveSettingsToStorage = 0;
 8002748:	4b1f      	ldr	r3, [pc, #124]	; (80027c8 <loop+0x340>)
 800274a:	2200      	movs	r2, #0
 800274c:	701a      	strb	r2, [r3, #0]
 800274e:	e00a      	b.n	8002766 <loop+0x2de>
		} else{
			printf("SettingsCRC failed\t");
 8002750:	4823      	ldr	r0, [pc, #140]	; (80027e0 <loop+0x358>)
 8002752:	f009 facd 	bl	800bcf0 <iprintf>
			printf("Calculated CRC %u. Received CRC %u\r\n", crc, settingsCRC);
 8002756:	4b1f      	ldr	r3, [pc, #124]	; (80027d4 <loop+0x34c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	461a      	mov	r2, r3
 800275c:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 8002760:	4820      	ldr	r0, [pc, #128]	; (80027e4 <loop+0x35c>)
 8002762:	f009 fac5 	bl	800bcf0 <iprintf>
		}
	}

	if (customChannelStreaming) {
 8002766:	4b20      	ldr	r3, [pc, #128]	; (80027e8 <loop+0x360>)
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00a      	beq.n	8002784 <loop+0x2fc>
		if (now - lastChannelStreamTime > customUartChannelTickRate) {
 800276e:	4b1f      	ldr	r3, [pc, #124]	; (80027ec <loop+0x364>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8002776:	1ad2      	subs	r2, r2, r3
 8002778:	4b1d      	ldr	r3, [pc, #116]	; (80027f0 <loop+0x368>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	429a      	cmp	r2, r3
 800277e:	d901      	bls.n	8002784 <loop+0x2fc>
			sendChannelData();
 8002780:	f7ff fa48 	bl	8001c14 <_Z15sendChannelDatav>
		}
	}
}
 8002784:	bf00      	nop
 8002786:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 800278a:	46bd      	mov	sp, r7
 800278c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800278e:	bf00      	nop
 8002790:	200005a8 	.word	0x200005a8
 8002794:	20001e9c 	.word	0x20001e9c
 8002798:	10624dd3 	.word	0x10624dd3
 800279c:	20001ea0 	.word	0x20001ea0
 80027a0:	20001ee4 	.word	0x20001ee4
 80027a4:	200025ac 	.word	0x200025ac
 80027a8:	0800e204 	.word	0x0800e204
 80027ac:	20001e98 	.word	0x20001e98
 80027b0:	0800e20c 	.word	0x0800e20c
 80027b4:	200005b8 	.word	0x200005b8
 80027b8:	0800e214 	.word	0x0800e214
 80027bc:	200005ac 	.word	0x200005ac
 80027c0:	0800e224 	.word	0x0800e224
 80027c4:	0800e23c 	.word	0x0800e23c
 80027c8:	20001e8d 	.word	0x20001e8d
 80027cc:	20000628 	.word	0x20000628
 80027d0:	200020fc 	.word	0x200020fc
 80027d4:	20001e94 	.word	0x20001e94
 80027d8:	0800e240 	.word	0x0800e240
 80027dc:	0800e274 	.word	0x0800e274
 80027e0:	0800e298 	.word	0x0800e298
 80027e4:	0800e2ac 	.word	0x0800e2ac
 80027e8:	200020f0 	.word	0x200020f0
 80027ec:	200020ec 	.word	0x200020ec
 80027f0:	200020f4 	.word	0x200020f4

080027f4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	4603      	mov	r3, r0
 80027fc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == nRF_IRQ_Pin) {
 80027fe:	88fb      	ldrh	r3, [r7, #6]
 8002800:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002804:	d146      	bne.n	8002894 <HAL_GPIO_EXTI_Callback+0xa0>
		if (HAL_GPIO_ReadPin(nRF_CSN_GPIO_Port, nRF_CSN_Pin) != GPIO_PIN_SET) {
 8002806:	2101      	movs	r1, #1
 8002808:	4824      	ldr	r0, [pc, #144]	; (800289c <HAL_GPIO_EXTI_Callback+0xa8>)
 800280a:	f003 ffa5 	bl	8006758 <HAL_GPIO_ReadPin>
 800280e:	4603      	mov	r3, r0
 8002810:	2b01      	cmp	r3, #1
 8002812:	bf14      	ite	ne
 8002814:	2301      	movne	r3, #1
 8002816:	2300      	moveq	r3, #0
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d006      	beq.n	800282c <HAL_GPIO_EXTI_Callback+0x38>
			// An other transmission is already active. Just setting gotData
			printf("nRFBusy");
 800281e:	4820      	ldr	r0, [pc, #128]	; (80028a0 <HAL_GPIO_EXTI_Callback+0xac>)
 8002820:	f009 fa66 	bl	800bcf0 <iprintf>
			gotData = 1;
 8002824:	4b1f      	ldr	r3, [pc, #124]	; (80028a4 <HAL_GPIO_EXTI_Callback+0xb0>)
 8002826:	2201      	movs	r2, #1
 8002828:	701a      	strb	r2, [r3, #0]
			return;
 800282a:	e033      	b.n	8002894 <HAL_GPIO_EXTI_Callback+0xa0>
		}
		uint8_t tx, fail, rx;
		uint8_t status = nRF24_GetIRQFlags();
 800282c:	f007 ff8b 	bl	800a746 <_Z17nRF24_GetIRQFlagsv>
 8002830:	4603      	mov	r3, r0
 8002832:	73fb      	strb	r3, [r7, #15]
//		uint8_t rxStat = nRF24_GetStatus_RXFIFO();
//		if(rxStat == nRF24_STATUS_RXFIFO_FULL){
////			printf("RXFIFO FULL");
//		}
		tx = (status & nRF24_FLAG_TX_DS ) != 0;
 8002834:	7bfb      	ldrb	r3, [r7, #15]
 8002836:	f003 0320 	and.w	r3, r3, #32
 800283a:	2b00      	cmp	r3, #0
 800283c:	bf14      	ite	ne
 800283e:	2301      	movne	r3, #1
 8002840:	2300      	moveq	r3, #0
 8002842:	b2db      	uxtb	r3, r3
 8002844:	73bb      	strb	r3, [r7, #14]
		fail = (status & nRF24_FLAG_MAX_RT ) != 0;
 8002846:	7bfb      	ldrb	r3, [r7, #15]
 8002848:	f003 0310 	and.w	r3, r3, #16
 800284c:	2b00      	cmp	r3, #0
 800284e:	bf14      	ite	ne
 8002850:	2301      	movne	r3, #1
 8002852:	2300      	moveq	r3, #0
 8002854:	b2db      	uxtb	r3, r3
 8002856:	737b      	strb	r3, [r7, #13]
		rx = (status & nRF24_FLAG_RX_DR ) != 0;
 8002858:	7bfb      	ldrb	r3, [r7, #15]
 800285a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800285e:	2b00      	cmp	r3, #0
 8002860:	bf14      	ite	ne
 8002862:	2301      	movne	r3, #1
 8002864:	2300      	moveq	r3, #0
 8002866:	b2db      	uxtb	r3, r3
 8002868:	733b      	strb	r3, [r7, #12]
			if (!isTransmitter) {
//				printf("AOK\n");
			}
		}

		if (fail) {                               // Have we failed to transmit?
 800286a:	7b7b      	ldrb	r3, [r7, #13]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d004      	beq.n	800287a <HAL_GPIO_EXTI_Callback+0x86>
			txfailratio[1]++;
 8002870:	4b0d      	ldr	r3, [pc, #52]	; (80028a8 <HAL_GPIO_EXTI_Callback+0xb4>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	3301      	adds	r3, #1
 8002876:	4a0c      	ldr	r2, [pc, #48]	; (80028a8 <HAL_GPIO_EXTI_Callback+0xb4>)
 8002878:	6053      	str	r3, [r2, #4]
			if (!isTransmitter) {
//				printf("AFAIL\n");
			}
		}

		if (rx) {                      // Did we receive a message?
 800287a:	7b3b      	ldrb	r3, [r7, #12]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d007      	beq.n	8002890 <HAL_GPIO_EXTI_Callback+0x9c>
			txfailratio[0]++;
 8002880:	4b09      	ldr	r3, [pc, #36]	; (80028a8 <HAL_GPIO_EXTI_Callback+0xb4>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	3301      	adds	r3, #1
 8002886:	4a08      	ldr	r2, [pc, #32]	; (80028a8 <HAL_GPIO_EXTI_Callback+0xb4>)
 8002888:	6013      	str	r3, [r2, #0]
			gotData = 1;
 800288a:	4b06      	ldr	r3, [pc, #24]	; (80028a4 <HAL_GPIO_EXTI_Callback+0xb0>)
 800288c:	2201      	movs	r2, #1
 800288e:	701a      	strb	r2, [r3, #0]
		}
		nRF24_ClearIRQFlags();
 8002890:	f007 ff74 	bl	800a77c <_Z19nRF24_ClearIRQFlagsv>
	}
}
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	40020800 	.word	0x40020800
 80028a0:	0800e2d4 	.word	0x0800e2d4
 80028a4:	200005a8 	.word	0x200005a8
 80028a8:	200005ac 	.word	0x200005ac

080028ac <UART1Error>:

/* USER CODE END 4 */
void UART1Error(UART_HandleTypeDef *huart){
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
	setStatusLed(255, 0, 0);
 80028b4:	2200      	movs	r2, #0
 80028b6:	2100      	movs	r1, #0
 80028b8:	20ff      	movs	r0, #255	; 0xff
 80028ba:	f7fe fba1 	bl	8001000 <_Z12setStatusLedhhh>
	// ERror in main serial so what now?
}
 80028be:	bf00      	nop
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
	...

080028c8 <UART1TXDone>:

char* stringToPrint;
void UART1TXDone(UART_HandleTypeDef *huart){
 80028c8:	b590      	push	{r4, r7, lr}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
	uart1TXBusy = 0;
 80028d0:	4b18      	ldr	r3, [pc, #96]	; (8002934 <UART1TXDone+0x6c>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	701a      	strb	r2, [r3, #0]
	if(stringToPrint != nullptr){
 80028d6:	4b18      	ldr	r3, [pc, #96]	; (8002938 <UART1TXDone+0x70>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d007      	beq.n	80028ee <UART1TXDone+0x26>
		free(stringToPrint);
 80028de:	4b16      	ldr	r3, [pc, #88]	; (8002938 <UART1TXDone+0x70>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f008 fc3a 	bl	800b15c <free>
		stringToPrint = nullptr;
 80028e8:	4b13      	ldr	r3, [pc, #76]	; (8002938 <UART1TXDone+0x70>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	601a      	str	r2, [r3, #0]
	}
	if(!serialTXBuffer.empty()){
 80028ee:	4813      	ldr	r0, [pc, #76]	; (800293c <UART1TXDone+0x74>)
 80028f0:	f000 f8b5 	bl	8002a5e <_ZNKSt5queueIPcSt5dequeIS0_SaIS0_EEE5emptyEv>
 80028f4:	4603      	mov	r3, r0
 80028f6:	f083 0301 	eor.w	r3, r3, #1
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d015      	beq.n	800292c <UART1TXDone+0x64>
		stringToPrint = serialTXBuffer.front();
 8002900:	480e      	ldr	r0, [pc, #56]	; (800293c <UART1TXDone+0x74>)
 8002902:	f000 f8b9 	bl	8002a78 <_ZNSt5queueIPcSt5dequeIS0_SaIS0_EEE5frontEv>
 8002906:	4603      	mov	r3, r0
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a0b      	ldr	r2, [pc, #44]	; (8002938 <UART1TXDone+0x70>)
 800290c:	6013      	str	r3, [r2, #0]
		SerialPrint(stringToPrint, strlen(stringToPrint)); // This should work?
 800290e:	4b0a      	ldr	r3, [pc, #40]	; (8002938 <UART1TXDone+0x70>)
 8002910:	681c      	ldr	r4, [r3, #0]
 8002912:	4b09      	ldr	r3, [pc, #36]	; (8002938 <UART1TXDone+0x70>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f7fd fcaa 	bl	8000270 <strlen>
 800291c:	4603      	mov	r3, r0
 800291e:	4619      	mov	r1, r3
 8002920:	4620      	mov	r0, r4
 8002922:	f000 f80d 	bl	8002940 <SerialPrint>
		serialTXBuffer.pop();
 8002926:	4805      	ldr	r0, [pc, #20]	; (800293c <UART1TXDone+0x74>)
 8002928:	f000 f8b3 	bl	8002a92 <_ZNSt5queueIPcSt5dequeIS0_SaIS0_EEE3popEv>
	}
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	bd90      	pop	{r4, r7, pc}
 8002934:	2000216c 	.word	0x2000216c
 8002938:	200020f8 	.word	0x200020f8
 800293c:	200001fc 	.word	0x200001fc

08002940 <SerialPrint>:

void SerialPrint(char* string, int length){
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
	if(uart1TXBusy == 1){
 800294a:	4b15      	ldr	r3, [pc, #84]	; (80029a0 <SerialPrint+0x60>)
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d118      	bne.n	8002984 <SerialPrint+0x44>
		char* strPtr = (char*)malloc(length + 1);
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	3301      	adds	r3, #1
 8002956:	4618      	mov	r0, r3
 8002958:	f008 fbf8 	bl	800b14c <malloc>
 800295c:	4603      	mov	r3, r0
 800295e:	60fb      	str	r3, [r7, #12]
//		strcpy(strPtr, string);
		memcpy(strPtr, string, length);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	6879      	ldr	r1, [r7, #4]
 8002966:	4618      	mov	r0, r3
 8002968:	f009 fc0e 	bl	800c188 <memcpy>
		strPtr[length] = '\0';
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	4413      	add	r3, r2
 8002972:	2200      	movs	r2, #0
 8002974:	701a      	strb	r2, [r3, #0]
		serialTXBuffer.push(strPtr);
 8002976:	f107 030c 	add.w	r3, r7, #12
 800297a:	4619      	mov	r1, r3
 800297c:	4809      	ldr	r0, [pc, #36]	; (80029a4 <SerialPrint+0x64>)
 800297e:	f000 f894 	bl	8002aaa <_ZNSt5queueIPcSt5dequeIS0_SaIS0_EEE4pushERKS0_>
	} else{
		uart1TXBusy = 1;
		HAL_UART_Transmit_IT(&huart1, (uint8_t*)string, length);
	}
}
 8002982:	e009      	b.n	8002998 <SerialPrint+0x58>
		uart1TXBusy = 1;
 8002984:	4b06      	ldr	r3, [pc, #24]	; (80029a0 <SerialPrint+0x60>)
 8002986:	2201      	movs	r2, #1
 8002988:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart1, (uint8_t*)string, length);
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	b29b      	uxth	r3, r3
 800298e:	461a      	mov	r2, r3
 8002990:	6879      	ldr	r1, [r7, #4]
 8002992:	4805      	ldr	r0, [pc, #20]	; (80029a8 <SerialPrint+0x68>)
 8002994:	f006 fac4 	bl	8008f20 <HAL_UART_Transmit_IT>
}
 8002998:	bf00      	nop
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	2000216c 	.word	0x2000216c
 80029a4:	200001fc 	.word	0x200001fc
 80029a8:	200025ac 	.word	0x200025ac

080029ac <Error_Handler_CPP>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler_CPP(char *file, int line) {
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	setStatusLed(1, 0, 0);
 80029b6:	2200      	movs	r2, #0
 80029b8:	2100      	movs	r1, #0
 80029ba:	2001      	movs	r0, #1
 80029bc:	f7fe fb20 	bl	8001000 <_Z12setStatusLedhhh>
	printf("Error in file %s on line %d\r\n", file, line);
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	6879      	ldr	r1, [r7, #4]
 80029c4:	4812      	ldr	r0, [pc, #72]	; (8002a10 <Error_Handler_CPP+0x64>)
 80029c6:	f009 f993 	bl	800bcf0 <iprintf>
	uint8_t printCount = 0;
 80029ca:	2300      	movs	r3, #0
 80029cc:	73fb      	strb	r3, [r7, #15]
	while (1) {
		HAL_Delay(100);
 80029ce:	2064      	movs	r0, #100	; 0x64
 80029d0:	f003 fa30 	bl	8005e34 <HAL_Delay>
		printCount++;
 80029d4:	7bfb      	ldrb	r3, [r7, #15]
 80029d6:	3301      	adds	r3, #1
 80029d8:	73fb      	strb	r3, [r7, #15]
		if (printCount % 5 == 0) {
 80029da:	7bfa      	ldrb	r2, [r7, #15]
 80029dc:	4b0d      	ldr	r3, [pc, #52]	; (8002a14 <Error_Handler_CPP+0x68>)
 80029de:	fba3 1302 	umull	r1, r3, r3, r2
 80029e2:	0899      	lsrs	r1, r3, #2
 80029e4:	460b      	mov	r3, r1
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d108      	bne.n	8002a04 <Error_Handler_CPP+0x58>
			HAL_GPIO_TogglePin(SLEDR_GPIO_Port, SLEDR_Pin);
 80029f2:	2110      	movs	r1, #16
 80029f4:	4808      	ldr	r0, [pc, #32]	; (8002a18 <Error_Handler_CPP+0x6c>)
 80029f6:	f003 fee0 	bl	80067ba <HAL_GPIO_TogglePin>
			printf("Error in file %s on line %d\r\n", file, line);
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	6879      	ldr	r1, [r7, #4]
 80029fe:	4804      	ldr	r0, [pc, #16]	; (8002a10 <Error_Handler_CPP+0x64>)
 8002a00:	f009 f976 	bl	800bcf0 <iprintf>
		}
		if (printCount == 20) {
 8002a04:	7bfb      	ldrb	r3, [r7, #15]
 8002a06:	2b14      	cmp	r3, #20
 8002a08:	d1e1      	bne.n	80029ce <Error_Handler_CPP+0x22>
			NVIC_SystemReset();
 8002a0a:	f7fe fa4b 	bl	8000ea4 <__NVIC_SystemReset>
 8002a0e:	bf00      	nop
 8002a10:	0800e2dc 	.word	0x0800e2dc
 8002a14:	cccccccd 	.word	0xcccccccd
 8002a18:	40021000 	.word	0x40021000

08002a1c <_ZNSt5dequeIPcSaIS0_EEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f000 f859 	bl	8002ade <_ZNSt11_Deque_baseIPcSaIS0_EEC1Ev>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <_ZNSt5queueIPcSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>:
      queue(const _Sequence& __c = _Sequence())
      : c(__c) { }
#else
      template<typename _Seq = _Sequence, typename _Requires = typename
	       enable_if<is_default_constructible<_Seq>::value>::type>
	queue()
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b082      	sub	sp, #8
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
	: c() { }
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4618      	mov	r0, r3
 8002a42:	2328      	movs	r3, #40	; 0x28
 8002a44:	461a      	mov	r2, r3
 8002a46:	2100      	movs	r1, #0
 8002a48:	f009 fad2 	bl	800bff0 <memset>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff ffe4 	bl	8002a1c <_ZNSt5dequeIPcSaIS0_EEC1Ev>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4618      	mov	r0, r3
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <_ZNKSt5queueIPcSt5dequeIS0_SaIS0_EEE5emptyEv>:

      /**
       *  Returns true if the %queue is empty.
       */
      _GLIBCXX_NODISCARD bool
      empty() const
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b082      	sub	sp, #8
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f000 f890 	bl	8002b8e <_ZNKSt5dequeIPcSaIS0_EE5emptyEv>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	4618      	mov	r0, r3
 8002a72:	3708      	adds	r7, #8
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <_ZNSt5queueIPcSt5dequeIS0_SaIS0_EEE5frontEv>:
      /**
       *  Returns a read/write reference to the data at the first
       *  element of the %queue.
       */
      reference
      front()
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	return c.front();
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 f895 	bl	8002bb2 <_ZNSt5dequeIPcSaIS0_EE5frontEv>
 8002a88:	4603      	mov	r3, r0
      }
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <_ZNSt5queueIPcSt5dequeIS0_SaIS0_EEE3popEv>:
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */
      void
      pop()
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b082      	sub	sp, #8
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	c.pop_front();
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f000 f89c 	bl	8002bda <_ZNSt5dequeIPcSaIS0_EE9pop_frontEv>
      }
 8002aa2:	bf00      	nop
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <_ZNSt5queueIPcSt5dequeIS0_SaIS0_EEE4pushERKS0_>:
      push(const value_type& __x)
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b082      	sub	sp, #8
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
 8002ab2:	6039      	str	r1, [r7, #0]
      { c.push_back(__x); }
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6839      	ldr	r1, [r7, #0]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f000 f8b1 	bl	8002c20 <_ZNSt5dequeIPcSaIS0_EE9push_backERKS0_>
 8002abe:	bf00      	nop
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <_ZNSt11_Deque_baseIPcSaIS0_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b082      	sub	sp, #8
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f8d7 	bl	8002c82 <_ZNSaIPcED1Ev>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <_ZNSt11_Deque_baseIPcSaIS0_EEC1Ev>:
      _Deque_base()
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b082      	sub	sp, #8
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f000 f8ba 	bl	8002c62 <_ZNSt11_Deque_baseIPcSaIS0_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8002aee:	2100      	movs	r1, #0
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f000 f8d2 	bl	8002c9a <_ZNSt11_Deque_baseIPcSaIS0_EE17_M_initialize_mapEj>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4618      	mov	r0, r3
 8002afa:	3708      	adds	r7, #8
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <_ZNSt11_Deque_baseIPcSaIS0_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d010      	beq.n	8002b32 <_ZNSt11_Deque_baseIPcSaIS0_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8002b18:	3304      	adds	r3, #4
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 f91f 	bl	8002d60 <_ZNSt11_Deque_baseIPcSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6819      	ldr	r1, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f000 f932 	bl	8002d96 <_ZNSt11_Deque_baseIPcSaIS0_EE17_M_deallocate_mapEPPS0_j>
    }
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff ffc6 	bl	8002ac6 <_ZNSt11_Deque_baseIPcSaIS0_EE11_Deque_implD1Ev>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3708      	adds	r7, #8
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <_ZNSt5dequeIPcSaIS0_EED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b08a      	sub	sp, #40	; 0x28
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8002b4c:	f107 0308 	add.w	r3, r7, #8
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 f93a 	bl	8002dcc <_ZNSt5dequeIPcSaIS0_EE5beginEv>
 8002b58:	f107 0318 	add.w	r3, r7, #24
 8002b5c:	6879      	ldr	r1, [r7, #4]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f000 f943 	bl	8002dea <_ZNSt5dequeIPcSaIS0_EE3endEv>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f000 f94e 	bl	8002e08 <_ZNSt11_Deque_baseIPcSaIS0_EE19_M_get_Tp_allocatorEv>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	f107 0218 	add.w	r2, r7, #24
 8002b72:	f107 0108 	add.w	r1, r7, #8
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 f96d 	bl	8002e56 <_ZNSt5dequeIPcSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7ff ffbe 	bl	8002b00 <_ZNSt11_Deque_baseIPcSaIS0_EED1Ev>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4618      	mov	r0, r3
 8002b88:	3728      	adds	r7, #40	; 0x28
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <_ZNKSt5dequeIPcSaIS0_EE5emptyEv>:
      /**
       *  Returns true if the %deque is empty.  (Thus begin() would
       *  equal end().)
       */
      _GLIBCXX_NODISCARD bool
      empty() const _GLIBCXX_NOEXCEPT
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b082      	sub	sp, #8
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f103 0218 	add.w	r2, r3, #24
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	3308      	adds	r3, #8
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4610      	mov	r0, r2
 8002ba4:	f000 f964 	bl	8002e70 <_ZSteqRKSt15_Deque_iteratorIPcRS0_PS0_ES5_>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	4618      	mov	r0, r3
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <_ZNSt5dequeIPcSaIS0_EE5frontEv>:
      /**
       *  Returns a read/write reference to the data at the first
       *  element of the %deque.
       */
      reference
      front() _GLIBCXX_NOEXCEPT
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b086      	sub	sp, #24
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	return *begin();
 8002bba:	f107 0308 	add.w	r3, r7, #8
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f000 f903 	bl	8002dcc <_ZNSt5dequeIPcSaIS0_EE5beginEv>
 8002bc6:	f107 0308 	add.w	r3, r7, #8
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f000 f964 	bl	8002e98 <_ZNKSt15_Deque_iteratorIPcRS0_PS0_EdeEv>
 8002bd0:	4603      	mov	r3, r0
      }
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3718      	adds	r7, #24
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <_ZNSt5dequeIPcSaIS0_EE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b082      	sub	sp, #8
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	3b04      	subs	r3, #4
	if (this->_M_impl._M_start._M_cur
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d010      	beq.n	8002c12 <_ZNSt5dequeIPcSaIS0_EE9pop_frontEv+0x38>
	  {
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f000 f908 	bl	8002e08 <_ZNSt11_Deque_baseIPcSaIS0_EE19_M_get_Tp_allocatorEv>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	4619      	mov	r1, r3
 8002c00:	4610      	mov	r0, r2
 8002c02:	f000 f955 	bl	8002eb0 <_ZNSt16allocator_traitsISaIPcEE7destroyIS0_EEvRS1_PT_>
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	1d1a      	adds	r2, r3, #4
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	609a      	str	r2, [r3, #8]
	  }
	else
	  _M_pop_front_aux();
      }
 8002c10:	e002      	b.n	8002c18 <_ZNSt5dequeIPcSaIS0_EE9pop_frontEv+0x3e>
	  _M_pop_front_aux();
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 f959 	bl	8002eca <_ZNSt5dequeIPcSaIS0_EE16_M_pop_front_auxEv>
      }
 8002c18:	bf00      	nop
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <_ZNSt5dequeIPcSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	3b04      	subs	r3, #4
	if (this->_M_impl._M_finish._M_cur
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d00c      	beq.n	8002c52 <_ZNSt5dequeIPcSaIS0_EE9push_backERKS0_+0x32>
	    _Alloc_traits::construct(this->_M_impl,
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	4619      	mov	r1, r3
 8002c42:	f000 f96a 	bl	8002f1a <_ZNSt16allocator_traitsISaIPcEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	1d1a      	adds	r2, r3, #4
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	619a      	str	r2, [r3, #24]
      }
 8002c50:	e003      	b.n	8002c5a <_ZNSt5dequeIPcSaIS0_EE9push_backERKS0_+0x3a>
	  _M_push_back_aux(__x);
 8002c52:	6839      	ldr	r1, [r7, #0]
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f000 f973 	bl	8002f40 <_ZNSt5dequeIPcSaIS0_EE16_M_push_back_auxIJRKS0_EEEvDpOT_>
      }
 8002c5a:	bf00      	nop
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <_ZNSt11_Deque_baseIPcSaIS0_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b082      	sub	sp, #8
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 f9ac 	bl	8002fc8 <_ZNSaIPcEC1Ev>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f000 f9b4 	bl	8002fe0 <_ZNSt11_Deque_baseIPcSaIS0_EE16_Deque_impl_dataC1Ev>
	{ }
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <_ZNSaIPcED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b082      	sub	sp, #8
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f9c1 	bl	8003012 <_ZN9__gnu_cxx13new_allocatorIPcED1Ev>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4618      	mov	r0, r3
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <_ZNSt11_Deque_baseIPcSaIS0_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8002c9a:	b590      	push	{r4, r7, lr}
 8002c9c:	b089      	sub	sp, #36	; 0x24
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
 8002ca2:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8002ca4:	2004      	movs	r0, #4
 8002ca6:	f7fe f995 	bl	8000fd4 <_ZSt16__deque_buf_sizej>
 8002caa:	4602      	mov	r2, r0
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	fbb3 f3f2 	udiv	r3, r3, r2
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8002cb6:	2308      	movs	r3, #8
 8002cb8:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	3302      	adds	r3, #2
 8002cbe:	613b      	str	r3, [r7, #16]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8002cc0:	f107 0210 	add.w	r2, r7, #16
 8002cc4:	f107 030c 	add.w	r3, r7, #12
 8002cc8:	4611      	mov	r1, r2
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f000 f9ac 	bl	8003028 <_ZSt3maxIjERKT_S2_S2_>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	4619      	mov	r1, r3
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 f9b6 	bl	8003050 <_ZNSt11_Deque_baseIPcSaIS0_EE15_M_allocate_mapEj>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6859      	ldr	r1, [r3, #4]
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	1acb      	subs	r3, r1, r3
 8002cf6:	085b      	lsrs	r3, r3, #1
 8002cf8:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8002cfa:	4413      	add	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	4413      	add	r3, r2
 8002d06:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	69b9      	ldr	r1, [r7, #24]
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 f9bc 	bl	800308a <_ZNSt11_Deque_baseIPcSaIS0_EE15_M_create_nodesEPPS0_S4_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	3308      	adds	r3, #8
 8002d16:	69b9      	ldr	r1, [r7, #24]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f000 f9d1 	bl	80030c0 <_ZNSt15_Deque_iteratorIPcRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f103 0218 	add.w	r2, r3, #24
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	3b04      	subs	r3, #4
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4610      	mov	r0, r2
 8002d2c:	f000 f9c8 	bl	80030c0 <_ZNSt15_Deque_iteratorIPcRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68da      	ldr	r2, [r3, #12]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8002d3c:	2004      	movs	r0, #4
 8002d3e:	f7fe f949 	bl	8000fd4 <_ZSt16__deque_buf_sizej>
 8002d42:	4602      	mov	r2, r0
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	fbb3 f1f2 	udiv	r1, r3, r2
 8002d4a:	fb01 f202 	mul.w	r2, r1, r2
 8002d4e:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	619a      	str	r2, [r3, #24]
    }
 8002d58:	bf00      	nop
 8002d5a:	3724      	adds	r7, #36	; 0x24
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd90      	pop	{r4, r7, pc}

08002d60 <_ZNSt11_Deque_baseIPcSaIS0_EE16_M_destroy_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	617b      	str	r3, [r7, #20]
 8002d70:	e008      	b.n	8002d84 <_ZNSt11_Deque_baseIPcSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x24>
	_M_deallocate_node(*__n);
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4619      	mov	r1, r3
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	f000 f9ba 	bl	80030f2 <_ZNSt11_Deque_baseIPcSaIS0_EE18_M_deallocate_nodeEPS0_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	3304      	adds	r3, #4
 8002d82:	617b      	str	r3, [r7, #20]
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d3f2      	bcc.n	8002d72 <_ZNSt11_Deque_baseIPcSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x12>
    }
 8002d8c:	bf00      	nop
 8002d8e:	bf00      	nop
 8002d90:	3718      	adds	r7, #24
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <_ZNSt11_Deque_baseIPcSaIS0_EE17_M_deallocate_mapEPPS0_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b086      	sub	sp, #24
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	60f8      	str	r0, [r7, #12]
 8002d9e:	60b9      	str	r1, [r7, #8]
 8002da0:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8002da2:	f107 0314 	add.w	r3, r7, #20
 8002da6:	68f9      	ldr	r1, [r7, #12]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f000 f9b5 	bl	8003118 <_ZNKSt11_Deque_baseIPcSaIS0_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8002dae:	f107 0314 	add.w	r3, r7, #20
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	68b9      	ldr	r1, [r7, #8]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f000 f9cb 	bl	8003152 <_ZNSt16allocator_traitsISaIPPcEE10deallocateERS2_PS1_j>
      }
 8002dbc:	f107 0314 	add.w	r3, r7, #20
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f000 f9ba 	bl	800313a <_ZNSaIPPcED1Ev>
 8002dc6:	3718      	adds	r7, #24
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <_ZNSt5dequeIPcSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	3308      	adds	r3, #8
 8002dda:	4619      	mov	r1, r3
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 f81e 	bl	8002e1e <_ZNSt15_Deque_iteratorIPcRS0_PS0_EC1ERKS3_>
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <_ZNSt5dequeIPcSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b082      	sub	sp, #8
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
 8002df2:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	3318      	adds	r3, #24
 8002df8:	4619      	mov	r1, r3
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 f80f 	bl	8002e1e <_ZNSt15_Deque_iteratorIPcRS0_PS0_EC1ERKS3_>
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <_ZNSt11_Deque_baseIPcSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4618      	mov	r0, r3
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr

08002e1e <_ZNSt15_Deque_iteratorIPcRS0_PS0_EC1ERKS3_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8002e1e:	b480      	push	{r7}
 8002e20:	b083      	sub	sp, #12
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
 8002e26:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	605a      	str	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	689a      	ldr	r2, [r3, #8]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	609a      	str	r2, [r3, #8]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	68da      	ldr	r2, [r3, #12]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	60da      	str	r2, [r3, #12]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <_ZNSt5dequeIPcSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 8002e56:	b480      	push	{r7}
 8002e58:	b08d      	sub	sp, #52	; 0x34
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	60f8      	str	r0, [r7, #12]
 8002e5e:	60b9      	str	r1, [r7, #8]
 8002e60:	607a      	str	r2, [r7, #4]
 8002e62:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
      }
 8002e64:	bf00      	nop
 8002e66:	3734      	adds	r7, #52	; 0x34
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <_ZSteqRKSt15_Deque_iteratorIPcRS0_PS0_ES5_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	bf0c      	ite	eq
 8002e86:	2301      	moveq	r3, #1
 8002e88:	2300      	movne	r3, #0
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <_ZNKSt15_Deque_iteratorIPcRS0_PS0_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <_ZNSt16allocator_traitsISaIPcEE7destroyIS0_EEvRS1_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
 8002eba:	6839      	ldr	r1, [r7, #0]
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f000 f957 	bl	8003170 <_ZN9__gnu_cxx13new_allocatorIPcE7destroyIS1_EEvPT_>
#else
	  std::destroy_at(__p);
#endif
	}
 8002ec2:	bf00      	nop
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <_ZNSt5dequeIPcSaIS0_EE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b082      	sub	sp, #8
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff ff97 	bl	8002e08 <_ZNSt11_Deque_baseIPcSaIS0_EE19_M_get_Tp_allocatorEv>
 8002eda:	4602      	mov	r2, r0
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	4610      	mov	r0, r2
 8002ee4:	f7ff ffe4 	bl	8002eb0 <_ZNSt16allocator_traitsISaIPcEE7destroyIS0_EEvRS1_PT_>
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	4619      	mov	r1, r3
 8002ef0:	4610      	mov	r0, r2
 8002ef2:	f000 f8fe 	bl	80030f2 <_ZNSt11_Deque_baseIPcSaIS0_EE18_M_deallocate_nodeEPS0_>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f103 0208 	add.w	r2, r3, #8
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	695b      	ldr	r3, [r3, #20]
 8002f00:	3304      	adds	r3, #4
 8002f02:	4619      	mov	r1, r3
 8002f04:	4610      	mov	r0, r2
 8002f06:	f000 f8db 	bl	80030c0 <_ZNSt15_Deque_iteratorIPcRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68da      	ldr	r2, [r3, #12]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	609a      	str	r2, [r3, #8]
    }
 8002f12:	bf00      	nop
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <_ZNSt16allocator_traitsISaIPcEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b084      	sub	sp, #16
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	60f8      	str	r0, [r7, #12]
 8002f22:	60b9      	str	r1, [r7, #8]
 8002f24:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 f92d 	bl	8003186 <_ZSt7forwardIRKPcEOT_RNSt16remove_referenceIS3_E4typeE>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	461a      	mov	r2, r3
 8002f30:	68b9      	ldr	r1, [r7, #8]
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f000 f932 	bl	800319c <_ZN9__gnu_cxx13new_allocatorIPcE9constructIS1_JRKS1_EEEvPT_DpOT0_>
	}
 8002f38:	bf00      	nop
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <_ZNSt5dequeIPcSaIS0_EE16_M_push_back_auxIJRKS0_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8002f40:	b5b0      	push	{r4, r5, r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f93c 	bl	80031c8 <_ZNKSt5dequeIPcSaIS0_EE4sizeEv>
 8002f50:	4604      	mov	r4, r0
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f94a 	bl	80031ec <_ZNKSt5dequeIPcSaIS0_EE8max_sizeEv>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	429c      	cmp	r4, r3
 8002f5c:	bf0c      	ite	eq
 8002f5e:	2301      	moveq	r3, #1
 8002f60:	2300      	movne	r3, #0
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d002      	beq.n	8002f6e <_ZNSt5dequeIPcSaIS0_EE16_M_push_back_auxIJRKS0_EEEvDpOT_+0x2e>
	  __throw_length_error(
 8002f68:	4816      	ldr	r0, [pc, #88]	; (8002fc4 <_ZNSt5dequeIPcSaIS0_EE16_M_push_back_auxIJRKS0_EEEvDpOT_+0x84>)
 8002f6a:	f008 f8da 	bl	800b122 <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 8002f6e:	2101      	movs	r1, #1
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 f94c 	bl	800320e <_ZNSt5dequeIPcSaIS0_EE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7c:	1d1c      	adds	r4, r3, #4
 8002f7e:	4610      	mov	r0, r2
 8002f80:	f000 f960 	bl	8003244 <_ZNSt11_Deque_baseIPcSaIS0_EE16_M_allocate_nodeEv>
 8002f84:	4603      	mov	r3, r0
 8002f86:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 8002f88:	687c      	ldr	r4, [r7, #4]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	699d      	ldr	r5, [r3, #24]
 8002f8e:	6838      	ldr	r0, [r7, #0]
 8002f90:	f000 f8f9 	bl	8003186 <_ZSt7forwardIRKPcEOT_RNSt16remove_referenceIS3_E4typeE>
 8002f94:	4603      	mov	r3, r0
 8002f96:	461a      	mov	r2, r3
 8002f98:	4629      	mov	r1, r5
 8002f9a:	4620      	mov	r0, r4
 8002f9c:	f7ff ffbd 	bl	8002f1a <_ZNSt16allocator_traitsISaIPcEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f103 0218 	add.w	r2, r3, #24
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002faa:	3304      	adds	r3, #4
 8002fac:	4619      	mov	r1, r3
 8002fae:	4610      	mov	r0, r2
 8002fb0:	f000 f886 	bl	80030c0 <_ZNSt15_Deque_iteratorIPcRS0_PS0_E11_M_set_nodeEPS2_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	69da      	ldr	r2, [r3, #28]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	619a      	str	r2, [r3, #24]
      }
 8002fbc:	bf00      	nop
 8002fbe:	3708      	adds	r7, #8
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bdb0      	pop	{r4, r5, r7, pc}
 8002fc4:	0800e2fc 	.word	0x0800e2fc

08002fc8 <_ZNSaIPcEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 f949 	bl	8003268 <_ZN9__gnu_cxx13new_allocatorIPcEC1Ev>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3708      	adds	r7, #8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <_ZNSt11_Deque_baseIPcSaIS0_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	601a      	str	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	605a      	str	r2, [r3, #4]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	3308      	adds	r3, #8
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f000 f940 	bl	800327e <_ZNSt15_Deque_iteratorIPcRS0_PS0_EC1Ev>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	3318      	adds	r3, #24
 8003002:	4618      	mov	r0, r3
 8003004:	f000 f93b 	bl	800327e <_ZNSt15_Deque_iteratorIPcRS0_PS0_EC1Ev>
	{ }
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4618      	mov	r0, r3
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <_ZN9__gnu_cxx13new_allocatorIPcED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003012:	b480      	push	{r7}
 8003014:	b083      	sub	sp, #12
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4618      	mov	r0, r3
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	429a      	cmp	r2, r3
 800303c:	d201      	bcs.n	8003042 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	e000      	b.n	8003044 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8003042:	687b      	ldr	r3, [r7, #4]
    }
 8003044:	4618      	mov	r0, r3
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <_ZNSt11_Deque_baseIPcSaIS0_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8003050:	b590      	push	{r4, r7, lr}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800305a:	f107 030c 	add.w	r3, r7, #12
 800305e:	6879      	ldr	r1, [r7, #4]
 8003060:	4618      	mov	r0, r3
 8003062:	f000 f859 	bl	8003118 <_ZNKSt11_Deque_baseIPcSaIS0_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8003066:	f107 030c 	add.w	r3, r7, #12
 800306a:	6839      	ldr	r1, [r7, #0]
 800306c:	4618      	mov	r0, r3
 800306e:	f000 f91d 	bl	80032ac <_ZNSt16allocator_traitsISaIPPcEE8allocateERS2_j>
 8003072:	4604      	mov	r4, r0
 8003074:	bf00      	nop
      }
 8003076:	f107 030c 	add.w	r3, r7, #12
 800307a:	4618      	mov	r0, r3
 800307c:	f000 f85d 	bl	800313a <_ZNSaIPPcED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8003080:	4623      	mov	r3, r4
      }
 8003082:	4618      	mov	r0, r3
 8003084:	3714      	adds	r7, #20
 8003086:	46bd      	mov	sp, r7
 8003088:	bd90      	pop	{r4, r7, pc}

0800308a <_ZNSt11_Deque_baseIPcSaIS0_EE15_M_create_nodesEPPS0_S4_>:
    _Deque_base<_Tp, _Alloc>::
 800308a:	b580      	push	{r7, lr}
 800308c:	b086      	sub	sp, #24
 800308e:	af00      	add	r7, sp, #0
 8003090:	60f8      	str	r0, [r7, #12]
 8003092:	60b9      	str	r1, [r7, #8]
 8003094:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	617b      	str	r3, [r7, #20]
 800309a:	e008      	b.n	80030ae <_ZNSt11_Deque_baseIPcSaIS0_EE15_M_create_nodesEPPS0_S4_+0x24>
	    *__cur = this->_M_allocate_node();
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f000 f8d1 	bl	8003244 <_ZNSt11_Deque_baseIPcSaIS0_EE16_M_allocate_nodeEv>
 80030a2:	4602      	mov	r2, r0
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	3304      	adds	r3, #4
 80030ac:	617b      	str	r3, [r7, #20]
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d3f2      	bcc.n	800309c <_ZNSt11_Deque_baseIPcSaIS0_EE15_M_create_nodesEPPS0_S4_+0x12>
    }
 80030b6:	bf00      	nop
 80030b8:	bf00      	nop
 80030ba:	3718      	adds	r7, #24
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <_ZNSt15_Deque_iteratorIPcRS0_PS0_E11_M_set_nodeEPS2_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 80030c0:	b590      	push	{r4, r7, lr}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685c      	ldr	r4, [r3, #4]
 80030dc:	f000 f8f5 	bl	80032ca <_ZNSt15_Deque_iteratorIPcRS0_PS0_E14_S_buffer_sizeEv>
 80030e0:	4603      	mov	r3, r0
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	18e2      	adds	r2, r4, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	609a      	str	r2, [r3, #8]
      }
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd90      	pop	{r4, r7, pc}

080030f2 <_ZNSt11_Deque_baseIPcSaIS0_EE18_M_deallocate_nodeEPS0_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 80030f2:	b590      	push	{r4, r7, lr}
 80030f4:	b083      	sub	sp, #12
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
 80030fa:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 80030fc:	687c      	ldr	r4, [r7, #4]
 80030fe:	2004      	movs	r0, #4
 8003100:	f7fd ff68 	bl	8000fd4 <_ZSt16__deque_buf_sizej>
 8003104:	4603      	mov	r3, r0
 8003106:	461a      	mov	r2, r3
 8003108:	6839      	ldr	r1, [r7, #0]
 800310a:	4620      	mov	r0, r4
 800310c:	f000 f8e5 	bl	80032da <_ZNSt16allocator_traitsISaIPcEE10deallocateERS1_PS0_j>
      }
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	bd90      	pop	{r4, r7, pc}

08003118 <_ZNKSt11_Deque_baseIPcSaIS0_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8003122:	6838      	ldr	r0, [r7, #0]
 8003124:	f000 f8e8 	bl	80032f8 <_ZNKSt11_Deque_baseIPcSaIS0_EE19_M_get_Tp_allocatorEv>
 8003128:	4603      	mov	r3, r0
 800312a:	4619      	mov	r1, r3
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 f8ee 	bl	800330e <_ZNSaIPPcEC1IS_EERKSaIT_E>
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <_ZNSaIPPcED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800313a:	b580      	push	{r7, lr}
 800313c:	b082      	sub	sp, #8
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f8f0 	bl	8003328 <_ZN9__gnu_cxx13new_allocatorIPPcED1Ev>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4618      	mov	r0, r3
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <_ZNSt16allocator_traitsISaIPPcEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003152:	b580      	push	{r7, lr}
 8003154:	b084      	sub	sp, #16
 8003156:	af00      	add	r7, sp, #0
 8003158:	60f8      	str	r0, [r7, #12]
 800315a:	60b9      	str	r1, [r7, #8]
 800315c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	68b9      	ldr	r1, [r7, #8]
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f000 f8eb 	bl	800333e <_ZN9__gnu_cxx13new_allocatorIPPcE10deallocateEPS2_j>
 8003168:	bf00      	nop
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <_ZN9__gnu_cxx13new_allocatorIPcE7destroyIS1_EEvPT_>:
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <_ZSt7forwardIRKPcEOT_RNSt16remove_referenceIS3_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003186:	b480      	push	{r7}
 8003188:	b083      	sub	sp, #12
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4618      	mov	r0, r3
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <_ZN9__gnu_cxx13new_allocatorIPcE9constructIS1_JRKS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800319c:	b590      	push	{r4, r7, lr}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f7ff ffec 	bl	8003186 <_ZSt7forwardIRKPcEOT_RNSt16remove_referenceIS3_E4typeE>
 80031ae:	4603      	mov	r3, r0
 80031b0:	681c      	ldr	r4, [r3, #0]
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	4619      	mov	r1, r3
 80031b6:	2004      	movs	r0, #4
 80031b8:	f7fd ff00 	bl	8000fbc <_ZnwjPv>
 80031bc:	4603      	mov	r3, r0
 80031be:	601c      	str	r4, [r3, #0]
 80031c0:	bf00      	nop
 80031c2:	3714      	adds	r7, #20
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd90      	pop	{r4, r7, pc}

080031c8 <_ZNKSt5dequeIPcSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f103 0218 	add.w	r2, r3, #24
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	3308      	adds	r3, #8
 80031da:	4619      	mov	r1, r3
 80031dc:	4610      	mov	r0, r2
 80031de:	f000 f8be 	bl	800335e <_ZStmiRKSt15_Deque_iteratorIPcRS0_PS0_ES5_>
 80031e2:	4603      	mov	r3, r0
 80031e4:	4618      	mov	r0, r3
 80031e6:	3708      	adds	r7, #8
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <_ZNKSt5dequeIPcSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 f87e 	bl	80032f8 <_ZNKSt11_Deque_baseIPcSaIS0_EE19_M_get_Tp_allocatorEv>
 80031fc:	4603      	mov	r3, r0
 80031fe:	4618      	mov	r0, r3
 8003200:	f000 f8d9 	bl	80033b6 <_ZNSt5dequeIPcSaIS0_EE11_S_max_sizeERKS1_>
 8003204:	4603      	mov	r3, r0
 8003206:	4618      	mov	r0, r3
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <_ZNSt5dequeIPcSaIS0_EE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 800320e:	b580      	push	{r7, lr}
 8003210:	b082      	sub	sp, #8
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
 8003216:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	1c5a      	adds	r2, r3, #1
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8003220:	6879      	ldr	r1, [r7, #4]
 8003222:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8003224:	6879      	ldr	r1, [r7, #4]
 8003226:	6809      	ldr	r1, [r1, #0]
 8003228:	1a41      	subs	r1, r0, r1
 800322a:	1089      	asrs	r1, r1, #2
 800322c:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 800322e:	429a      	cmp	r2, r3
 8003230:	d904      	bls.n	800323c <_ZNSt5dequeIPcSaIS0_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 8003232:	2200      	movs	r2, #0
 8003234:	6839      	ldr	r1, [r7, #0]
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f8d7 	bl	80033ea <_ZNSt5dequeIPcSaIS0_EE17_M_reallocate_mapEjb>
      }
 800323c:	bf00      	nop
 800323e:	3708      	adds	r7, #8
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <_ZNSt11_Deque_baseIPcSaIS0_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8003244:	b590      	push	{r4, r7, lr}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 800324c:	687c      	ldr	r4, [r7, #4]
 800324e:	2004      	movs	r0, #4
 8003250:	f7fd fec0 	bl	8000fd4 <_ZSt16__deque_buf_sizej>
 8003254:	4603      	mov	r3, r0
 8003256:	4619      	mov	r1, r3
 8003258:	4620      	mov	r0, r4
 800325a:	f000 f960 	bl	800351e <_ZNSt16allocator_traitsISaIPcEE8allocateERS1_j>
 800325e:	4603      	mov	r3, r0
      }
 8003260:	4618      	mov	r0, r3
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	bd90      	pop	{r4, r7, pc}

08003268 <_ZN9__gnu_cxx13new_allocatorIPcEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4618      	mov	r0, r3
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr

0800327e <_ZNSt15_Deque_iteratorIPcRS0_PS0_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 800327e:	b480      	push	{r7}
 8003280:	b083      	sub	sp, #12
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	605a      	str	r2, [r3, #4]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	609a      	str	r2, [r3, #8]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	60da      	str	r2, [r3, #12]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4618      	mov	r0, r3
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <_ZNSt16allocator_traitsISaIPPcEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80032b6:	2200      	movs	r2, #0
 80032b8:	6839      	ldr	r1, [r7, #0]
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f94a 	bl	8003554 <_ZN9__gnu_cxx13new_allocatorIPPcE8allocateEjPKv>
 80032c0:	4603      	mov	r3, r0
 80032c2:	4618      	mov	r0, r3
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <_ZNSt15_Deque_iteratorIPcRS0_PS0_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 80032ca:	b580      	push	{r7, lr}
 80032cc:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 80032ce:	2004      	movs	r0, #4
 80032d0:	f7fd fe80 	bl	8000fd4 <_ZSt16__deque_buf_sizej>
 80032d4:	4603      	mov	r3, r0
 80032d6:	4618      	mov	r0, r3
 80032d8:	bd80      	pop	{r7, pc}

080032da <_ZNSt16allocator_traitsISaIPcEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80032da:	b580      	push	{r7, lr}
 80032dc:	b084      	sub	sp, #16
 80032de:	af00      	add	r7, sp, #0
 80032e0:	60f8      	str	r0, [r7, #12]
 80032e2:	60b9      	str	r1, [r7, #8]
 80032e4:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	68b9      	ldr	r1, [r7, #8]
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f000 f95b 	bl	80035a6 <_ZN9__gnu_cxx13new_allocatorIPcE10deallocateEPS1_j>
 80032f0:	bf00      	nop
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <_ZNKSt11_Deque_baseIPcSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4618      	mov	r0, r3
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <_ZNSaIPPcEC1IS_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800330e:	b580      	push	{r7, lr}
 8003310:	b082      	sub	sp, #8
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
 8003316:	6039      	str	r1, [r7, #0]
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 f954 	bl	80035c6 <_ZN9__gnu_cxx13new_allocatorIPPcEC1Ev>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4618      	mov	r0, r3
 8003322:	3708      	adds	r7, #8
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <_ZN9__gnu_cxx13new_allocatorIPPcED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4618      	mov	r0, r3
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr

0800333e <_ZN9__gnu_cxx13new_allocatorIPPcE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 800333e:	b580      	push	{r7, lr}
 8003340:	b084      	sub	sp, #16
 8003342:	af00      	add	r7, sp, #0
 8003344:	60f8      	str	r0, [r7, #12]
 8003346:	60b9      	str	r1, [r7, #8]
 8003348:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	4619      	mov	r1, r3
 8003350:	68b8      	ldr	r0, [r7, #8]
 8003352:	f007 fecd 	bl	800b0f0 <_ZdlPvj>
      }
 8003356:	bf00      	nop
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <_ZStmiRKSt15_Deque_iteratorIPcRS0_PS0_ES5_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800335e:	b580      	push	{r7, lr}
 8003360:	b082      	sub	sp, #8
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
 8003366:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8003368:	f7ff ffaf 	bl	80032ca <_ZNSt15_Deque_iteratorIPcRS0_PS0_E14_S_buffer_sizeEv>
 800336c:	4603      	mov	r3, r0
 800336e:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - bool(__x._M_node))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68da      	ldr	r2, [r3, #12]
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	109b      	asrs	r3, r3, #2
 800337c:	461a      	mov	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	2b00      	cmp	r3, #0
 8003384:	bf14      	ite	ne
 8003386:	2301      	movne	r3, #1
 8003388:	2300      	moveq	r3, #0
 800338a:	b2db      	uxtb	r3, r3
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	fb01 f303 	mul.w	r3, r1, r3
	  + (__x._M_cur - __x._M_first)
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	6811      	ldr	r1, [r2, #0]
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	6852      	ldr	r2, [r2, #4]
 800339a:	1a8a      	subs	r2, r1, r2
 800339c:	1092      	asrs	r2, r2, #2
 800339e:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	6891      	ldr	r1, [r2, #8]
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	6812      	ldr	r2, [r2, #0]
 80033a8:	1a8a      	subs	r2, r1, r2
 80033aa:	1092      	asrs	r2, r2, #2
 80033ac:	4413      	add	r3, r2
      }
 80033ae:	4618      	mov	r0, r3
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <_ZNSt5dequeIPcSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b084      	sub	sp, #16
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 80033be:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80033c2:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 f909 	bl	80035dc <_ZNSt16allocator_traitsISaIPcEE8max_sizeERKS1_>
 80033ca:	4603      	mov	r3, r0
 80033cc:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80033ce:	f107 0208 	add.w	r2, r7, #8
 80033d2:	f107 030c 	add.w	r3, r7, #12
 80033d6:	4611      	mov	r1, r2
 80033d8:	4618      	mov	r0, r3
 80033da:	f000 f90b 	bl	80035f4 <_ZSt3minIjERKT_S2_S2_>
 80033de:	4603      	mov	r3, r0
 80033e0:	681b      	ldr	r3, [r3, #0]
      }
 80033e2:	4618      	mov	r0, r3
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <_ZNSt5dequeIPcSaIS0_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 80033ea:	b590      	push	{r4, r7, lr}
 80033ec:	b08b      	sub	sp, #44	; 0x2c
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	60f8      	str	r0, [r7, #12]
 80033f2:	60b9      	str	r1, [r7, #8]
 80033f4:	4613      	mov	r3, r2
 80033f6:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	695b      	ldr	r3, [r3, #20]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	109b      	asrs	r3, r3, #2
 8003404:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8003406:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	6a3a      	ldr	r2, [r7, #32]
 800340c:	4413      	add	r3, r2
 800340e:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	429a      	cmp	r2, r3
 800341a:	d92d      	bls.n	8003478 <_ZNSt5dequeIPcSaIS0_EE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	1acb      	subs	r3, r1, r3
 8003428:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800342a:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 800342c:	79fb      	ldrb	r3, [r7, #7]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d002      	beq.n	8003438 <_ZNSt5dequeIPcSaIS0_EE17_M_reallocate_mapEjb+0x4e>
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	e000      	b.n	800343a <_ZNSt5dequeIPcSaIS0_EE17_M_reallocate_mapEjb+0x50>
 8003438:	2300      	movs	r3, #0
 800343a:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800343c:	4413      	add	r3, r2
 800343e:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003446:	429a      	cmp	r2, r3
 8003448:	d209      	bcs.n	800345e <_ZNSt5dequeIPcSaIS0_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8003452:	3304      	adds	r3, #4
 8003454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003456:	4619      	mov	r1, r3
 8003458:	f000 f8e0 	bl	800361c <_ZSt4copyIPPPcS2_ET0_T_S4_S3_>
 800345c:	e048      	b.n	80034f0 <_ZNSt5dequeIPcSaIS0_EE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8003466:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8003468:	6a3b      	ldr	r3, [r7, #32]
 800346a:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800346c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800346e:	4413      	add	r3, r2
 8003470:	461a      	mov	r2, r3
 8003472:	f000 f8eb 	bl	800364c <_ZSt13copy_backwardIPPPcS2_ET0_T_S4_S3_>
 8003476:	e03b      	b.n	80034f0 <_ZNSt5dequeIPcSaIS0_EE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	3304      	adds	r3, #4
 8003480:	f107 0208 	add.w	r2, r7, #8
 8003484:	4611      	mov	r1, r2
 8003486:	4618      	mov	r0, r3
 8003488:	f7ff fdce 	bl	8003028 <_ZSt3maxIjERKT_S2_S2_>
 800348c:	4603      	mov	r3, r0
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8003492:	3302      	adds	r3, #2
 8003494:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	69b9      	ldr	r1, [r7, #24]
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff fdd8 	bl	8003050 <_ZNSt11_Deque_baseIPcSaIS0_EE15_M_allocate_mapEj>
 80034a0:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	085b      	lsrs	r3, r3, #1
 80034aa:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 80034ac:	79fb      	ldrb	r3, [r7, #7]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d002      	beq.n	80034b8 <_ZNSt5dequeIPcSaIS0_EE17_M_reallocate_mapEjb+0xce>
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	e000      	b.n	80034ba <_ZNSt5dequeIPcSaIS0_EE17_M_reallocate_mapEjb+0xd0>
 80034b8:	2300      	movs	r3, #0
 80034ba:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	4413      	add	r3, r2
 80034c0:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 80034ca:	3304      	adds	r3, #4
 80034cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ce:	4619      	mov	r1, r3
 80034d0:	f000 f8a4 	bl	800361c <_ZSt4copyIPPPcS2_ET0_T_S4_S3_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6819      	ldr	r1, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	461a      	mov	r2, r3
 80034e0:	f7ff fc59 	bl	8002d96 <_ZNSt11_Deque_baseIPcSaIS0_EE17_M_deallocate_mapEPPS0_j>

	  this->_M_impl._M_map = __new_map;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	3308      	adds	r3, #8
 80034f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7ff fde2 	bl	80030c0 <_ZNSt15_Deque_iteratorIPcRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f103 0018 	add.w	r0, r3, #24
 8003502:	6a3b      	ldr	r3, [r7, #32]
 8003504:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003508:	3b01      	subs	r3, #1
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800350e:	4413      	add	r3, r2
 8003510:	4619      	mov	r1, r3
 8003512:	f7ff fdd5 	bl	80030c0 <_ZNSt15_Deque_iteratorIPcRS0_PS0_E11_M_set_nodeEPS2_>
    }
 8003516:	bf00      	nop
 8003518:	372c      	adds	r7, #44	; 0x2c
 800351a:	46bd      	mov	sp, r7
 800351c:	bd90      	pop	{r4, r7, pc}

0800351e <_ZNSt16allocator_traitsISaIPcEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 800351e:	b580      	push	{r7, lr}
 8003520:	b082      	sub	sp, #8
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
 8003526:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8003528:	2200      	movs	r2, #0
 800352a:	6839      	ldr	r1, [r7, #0]
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 f8b1 	bl	8003694 <_ZN9__gnu_cxx13new_allocatorIPcE8allocateEjPKv>
 8003532:	4603      	mov	r3, r0
 8003534:	4618      	mov	r0, r3
 8003536:	3708      	adds	r7, #8
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <_ZNK9__gnu_cxx13new_allocatorIPPcE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8003544:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8003548:	4618      	mov	r0, r3
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <_ZN9__gnu_cxx13new_allocatorIPPcE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f7ff ffeb 	bl	800353c <_ZNK9__gnu_cxx13new_allocatorIPPcE11_M_max_sizeEv>
 8003566:	4602      	mov	r2, r0
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	4293      	cmp	r3, r2
 800356c:	bf8c      	ite	hi
 800356e:	2301      	movhi	r3, #1
 8003570:	2300      	movls	r3, #0
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b00      	cmp	r3, #0
 8003576:	bf14      	ite	ne
 8003578:	2301      	movne	r3, #1
 800357a:	2300      	moveq	r3, #0
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d007      	beq.n	8003592 <_ZN9__gnu_cxx13new_allocatorIPPcE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003588:	d301      	bcc.n	800358e <_ZN9__gnu_cxx13new_allocatorIPPcE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800358a:	f007 fdc7 	bl	800b11c <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800358e:	f007 fdc2 	bl	800b116 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4618      	mov	r0, r3
 8003598:	f007 fdac 	bl	800b0f4 <_Znwj>
 800359c:	4603      	mov	r3, r0
      }
 800359e:	4618      	mov	r0, r3
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <_ZN9__gnu_cxx13new_allocatorIPcE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b084      	sub	sp, #16
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	60f8      	str	r0, [r7, #12]
 80035ae:	60b9      	str	r1, [r7, #8]
 80035b0:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	4619      	mov	r1, r3
 80035b8:	68b8      	ldr	r0, [r7, #8]
 80035ba:	f007 fd99 	bl	800b0f0 <_ZdlPvj>
      }
 80035be:	bf00      	nop
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <_ZN9__gnu_cxx13new_allocatorIPPcEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80035c6:	b480      	push	{r7}
 80035c8:	b083      	sub	sp, #12
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4618      	mov	r0, r3
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <_ZNSt16allocator_traitsISaIPcEE8max_sizeERKS1_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static _GLIBCXX20_CONSTEXPR size_type
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus <= 201703L
	return __a.max_size();
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 f87e 	bl	80036e6 <_ZNK9__gnu_cxx13new_allocatorIPcE8max_sizeEv>
 80035ea:	4603      	mov	r3, r0
#else
	return size_t(-1) / sizeof(value_type);
#endif
      }
 80035ec:	4618      	mov	r0, r3
 80035ee:	3708      	adds	r7, #8
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	429a      	cmp	r2, r3
 8003608:	d201      	bcs.n	800360e <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	e000      	b.n	8003610 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 800360e:	687b      	ldr	r3, [r7, #4]
    }
 8003610:	4618      	mov	r0, r3
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <_ZSt4copyIPPPcS2_ET0_T_S4_S3_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 800361c:	b590      	push	{r4, r7, lr}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f000 f868 	bl	80036fe <_ZSt12__miter_baseIPPPcET_S3_>
 800362e:	4604      	mov	r4, r0
 8003630:	68b8      	ldr	r0, [r7, #8]
 8003632:	f000 f864 	bl	80036fe <_ZSt12__miter_baseIPPPcET_S3_>
 8003636:	4603      	mov	r3, r0
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	4619      	mov	r1, r3
 800363c:	4620      	mov	r0, r4
 800363e:	f000 f869 	bl	8003714 <_ZSt13__copy_move_aILb0EPPPcS2_ET1_T0_S4_S3_>
 8003642:	4603      	mov	r3, r0
    }
 8003644:	4618      	mov	r0, r3
 8003646:	3714      	adds	r7, #20
 8003648:	46bd      	mov	sp, r7
 800364a:	bd90      	pop	{r4, r7, pc}

0800364c <_ZSt13copy_backwardIPPPcS2_ET0_T_S4_S3_>:
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    _GLIBCXX20_CONSTEXPR
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 800364c:	b590      	push	{r4, r7, lr}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a<__is_move_iterator<_BI1>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f000 f850 	bl	80036fe <_ZSt12__miter_baseIPPPcET_S3_>
 800365e:	4604      	mov	r4, r0
 8003660:	68b8      	ldr	r0, [r7, #8]
 8003662:	f000 f84c 	bl	80036fe <_ZSt12__miter_baseIPPPcET_S3_>
 8003666:	4603      	mov	r3, r0
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	4619      	mov	r1, r3
 800366c:	4620      	mov	r0, r4
 800366e:	f000 f874 	bl	800375a <_ZSt22__copy_move_backward_aILb0EPPPcS2_ET1_T0_S4_S3_>
 8003672:	4603      	mov	r3, r0
    }
 8003674:	4618      	mov	r0, r3
 8003676:	3714      	adds	r7, #20
 8003678:	46bd      	mov	sp, r7
 800367a:	bd90      	pop	{r4, r7, pc}

0800367c <_ZNK9__gnu_cxx13new_allocatorIPcE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8003684:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8003688:	4618      	mov	r0, r3
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <_ZN9__gnu_cxx13new_allocatorIPcE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f7ff ffeb 	bl	800367c <_ZNK9__gnu_cxx13new_allocatorIPcE11_M_max_sizeEv>
 80036a6:	4602      	mov	r2, r0
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	4293      	cmp	r3, r2
 80036ac:	bf8c      	ite	hi
 80036ae:	2301      	movhi	r3, #1
 80036b0:	2300      	movls	r3, #0
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	bf14      	ite	ne
 80036b8:	2301      	movne	r3, #1
 80036ba:	2300      	moveq	r3, #0
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d007      	beq.n	80036d2 <_ZN9__gnu_cxx13new_allocatorIPcE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c8:	d301      	bcc.n	80036ce <_ZN9__gnu_cxx13new_allocatorIPcE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 80036ca:	f007 fd27 	bl	800b11c <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 80036ce:	f007 fd22 	bl	800b116 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4618      	mov	r0, r3
 80036d8:	f007 fd0c 	bl	800b0f4 <_Znwj>
 80036dc:	4603      	mov	r3, r0
      }
 80036de:	4618      	mov	r0, r3
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <_ZNK9__gnu_cxx13new_allocatorIPcE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b082      	sub	sp, #8
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f7ff ffc4 	bl	800367c <_ZNK9__gnu_cxx13new_allocatorIPcE11_M_max_sizeEv>
 80036f4:	4603      	mov	r3, r0
 80036f6:	4618      	mov	r0, r3
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <_ZSt12__miter_baseIPPPcET_S3_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 80036fe:	b480      	push	{r7}
 8003700:	b083      	sub	sp, #12
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4618      	mov	r0, r3
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <_ZSt13__copy_move_aILb0EPPPcS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8003714:	b5b0      	push	{r4, r5, r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f000 f83d 	bl	80037a0 <_ZSt12__niter_baseIPPPcET_S3_>
 8003726:	4604      	mov	r4, r0
 8003728:	68b8      	ldr	r0, [r7, #8]
 800372a:	f000 f839 	bl	80037a0 <_ZSt12__niter_baseIPPPcET_S3_>
 800372e:	4605      	mov	r5, r0
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4618      	mov	r0, r3
 8003734:	f000 f834 	bl	80037a0 <_ZSt12__niter_baseIPPPcET_S3_>
 8003738:	4603      	mov	r3, r0
 800373a:	461a      	mov	r2, r3
 800373c:	4629      	mov	r1, r5
 800373e:	4620      	mov	r0, r4
 8003740:	f000 f839 	bl	80037b6 <_ZSt14__copy_move_a1ILb0EPPPcS2_ET1_T0_S4_S3_>
 8003744:	4602      	mov	r2, r0
 8003746:	1d3b      	adds	r3, r7, #4
 8003748:	4611      	mov	r1, r2
 800374a:	4618      	mov	r0, r3
 800374c:	f000 f843 	bl	80037d6 <_ZSt12__niter_wrapIPPPcET_RKS3_S3_>
 8003750:	4603      	mov	r3, r0
    }
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bdb0      	pop	{r4, r5, r7, pc}

0800375a <_ZSt22__copy_move_backward_aILb0EPPPcS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 800375a:	b5b0      	push	{r4, r5, r7, lr}
 800375c:	b084      	sub	sp, #16
 800375e:	af00      	add	r7, sp, #0
 8003760:	60f8      	str	r0, [r7, #12]
 8003762:	60b9      	str	r1, [r7, #8]
 8003764:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 f81a 	bl	80037a0 <_ZSt12__niter_baseIPPPcET_S3_>
 800376c:	4604      	mov	r4, r0
 800376e:	68b8      	ldr	r0, [r7, #8]
 8003770:	f000 f816 	bl	80037a0 <_ZSt12__niter_baseIPPPcET_S3_>
 8003774:	4605      	mov	r5, r0
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4618      	mov	r0, r3
 800377a:	f000 f811 	bl	80037a0 <_ZSt12__niter_baseIPPPcET_S3_>
 800377e:	4603      	mov	r3, r0
 8003780:	461a      	mov	r2, r3
 8003782:	4629      	mov	r1, r5
 8003784:	4620      	mov	r0, r4
 8003786:	f000 f832 	bl	80037ee <_ZSt23__copy_move_backward_a1ILb0EPPPcS2_ET1_T0_S4_S3_>
 800378a:	4602      	mov	r2, r0
 800378c:	1d3b      	adds	r3, r7, #4
 800378e:	4611      	mov	r1, r2
 8003790:	4618      	mov	r0, r3
 8003792:	f000 f820 	bl	80037d6 <_ZSt12__niter_wrapIPPPcET_RKS3_S3_>
 8003796:	4603      	mov	r3, r0
    }
 8003798:	4618      	mov	r0, r3
 800379a:	3710      	adds	r7, #16
 800379c:	46bd      	mov	sp, r7
 800379e:	bdb0      	pop	{r4, r5, r7, pc}

080037a0 <_ZSt12__niter_baseIPPPcET_S3_>:
    __niter_base(_Iterator __it)
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
    { return __it; }
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4618      	mov	r0, r3
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr

080037b6 <_ZSt14__copy_move_a1ILb0EPPPcS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b084      	sub	sp, #16
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	60f8      	str	r0, [r7, #12]
 80037be:	60b9      	str	r1, [r7, #8]
 80037c0:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	68b9      	ldr	r1, [r7, #8]
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f000 f821 	bl	800380e <_ZSt14__copy_move_a2ILb0EPPPcS2_ET1_T0_S4_S3_>
 80037cc:	4603      	mov	r3, r0
 80037ce:	4618      	mov	r0, r3
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <_ZSt12__niter_wrapIPPPcET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 80037d6:	b480      	push	{r7}
 80037d8:	b083      	sub	sp, #12
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
 80037de:	6039      	str	r1, [r7, #0]
    { return __res; }
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	4618      	mov	r0, r3
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr

080037ee <_ZSt23__copy_move_backward_a1ILb0EPPPcS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b084      	sub	sp, #16
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	60f8      	str	r0, [r7, #12]
 80037f6:	60b9      	str	r1, [r7, #8]
 80037f8:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	68b9      	ldr	r1, [r7, #8]
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f000 f815 	bl	800382e <_ZSt23__copy_move_backward_a2ILb0EPPPcS2_ET1_T0_S4_S3_>
 8003804:	4603      	mov	r3, r0
 8003806:	4618      	mov	r0, r3
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <_ZSt14__copy_move_a2ILb0EPPPcS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800380e:	b580      	push	{r7, lr}
 8003810:	b084      	sub	sp, #16
 8003812:	af00      	add	r7, sp, #0
 8003814:	60f8      	str	r0, [r7, #12]
 8003816:	60b9      	str	r1, [r7, #8]
 8003818:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	68b9      	ldr	r1, [r7, #8]
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f000 f815 	bl	800384e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPPcEEPT_PKS5_S8_S6_>
 8003824:	4603      	mov	r3, r0
    }
 8003826:	4618      	mov	r0, r3
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <_ZSt23__copy_move_backward_a2ILb0EPPPcS2_ET1_T0_S4_S3_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 800382e:	b580      	push	{r7, lr}
 8003830:	b084      	sub	sp, #16
 8003832:	af00      	add	r7, sp, #0
 8003834:	60f8      	str	r0, [r7, #12]
 8003836:	60b9      	str	r1, [r7, #8]
 8003838:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	68b9      	ldr	r1, [r7, #8]
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f000 f822 	bl	8003888 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPPcEEPT_PKS5_S8_S6_>
 8003844:	4603      	mov	r3, r0
    }
 8003846:	4618      	mov	r0, r3
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPPcEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800384e:	b580      	push	{r7, lr}
 8003850:	b086      	sub	sp, #24
 8003852:	af00      	add	r7, sp, #0
 8003854:	60f8      	str	r0, [r7, #12]
 8003856:	60b9      	str	r1, [r7, #8]
 8003858:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	109b      	asrs	r3, r3, #2
 8003862:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d006      	beq.n	8003878 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPPcEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	461a      	mov	r2, r3
 8003870:	68f9      	ldr	r1, [r7, #12]
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f008 fba2 	bl	800bfbc <memmove>
	  return __result + _Num;
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	4413      	add	r3, r2
	}
 8003880:	4618      	mov	r0, r3
 8003882:	3718      	adds	r7, #24
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPPcEEPT_PKS5_S8_S6_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8003894:	68ba      	ldr	r2, [r7, #8]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	109b      	asrs	r3, r3, #2
 800389c:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00a      	beq.n	80038ba <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPPcEEPT_PKS5_S8_S6_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	425b      	negs	r3, r3
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	18d0      	adds	r0, r2, r3
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	461a      	mov	r2, r3
 80038b4:	68f9      	ldr	r1, [r7, #12]
 80038b6:	f008 fb81 	bl	800bfbc <memmove>
	  return __result - _Num;
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	425b      	negs	r3, r3
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	4413      	add	r3, r2
	}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3718      	adds	r7, #24
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <_ZNSt5queueIPcSt5dequeIS0_SaIS0_EEED1Ev>:
    class queue
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7ff f934 	bl	8002b44 <_ZNSt5dequeIPcSaIS0_EED1Ev>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4618      	mov	r0, r3
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
	...

080038e8 <_Z41__static_initialization_and_destruction_0ii>:
		}
	}
	/* USER CODE END Error_Handler_Debug */
}
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d122      	bne.n	800393e <_Z41__static_initialization_and_destruction_0ii+0x56>
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038fe:	4293      	cmp	r3, r2
 8003900:	d11d      	bne.n	800393e <_Z41__static_initialization_and_destruction_0ii+0x56>
std::queue<char*> serialTXBuffer;
 8003902:	4816      	ldr	r0, [pc, #88]	; (800395c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8003904:	f7ff f897 	bl	8002a36 <_ZNSt5queueIPcSt5dequeIS0_SaIS0_EEEC1IS3_vEEv>
Settings *receivedSettings = (Settings*)malloc(sizeof(Settings));
 8003908:	f641 005b 	movw	r0, #6235	; 0x185b
 800390c:	f007 fc1e 	bl	800b14c <malloc>
 8003910:	4603      	mov	r3, r0
 8003912:	461a      	mov	r2, r3
 8003914:	4b12      	ldr	r3, [pc, #72]	; (8003960 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8003916:	601a      	str	r2, [r3, #0]
uint32_t lastCHPrint = HAL_GetTick();
 8003918:	f002 fa80 	bl	8005e1c <HAL_GetTick>
 800391c:	4603      	mov	r3, r0
 800391e:	4a11      	ldr	r2, [pc, #68]	; (8003964 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003920:	6013      	str	r3, [r2, #0]
uint32_t lastDataReceived = HAL_GetTick();
 8003922:	f002 fa7b 	bl	8005e1c <HAL_GetTick>
 8003926:	4603      	mov	r3, r0
 8003928:	4a0f      	ldr	r2, [pc, #60]	; (8003968 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800392a:	6013      	str	r3, [r2, #0]
bfs::SbusTx sbusTx(&SBUSUART);
 800392c:	490f      	ldr	r1, [pc, #60]	; (800396c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800392e:	4810      	ldr	r0, [pc, #64]	; (8003970 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8003930:	f7fd face 	bl	8000ed0 <_ZN3bfs6SbusTxC1EP20__UART_HandleTypeDef>
uint32_t lastSBUSSend = HAL_GetTick();
 8003934:	f002 fa72 	bl	8005e1c <HAL_GetTick>
 8003938:	4603      	mov	r3, r0
 800393a:	4a0e      	ldr	r2, [pc, #56]	; (8003974 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800393c:	6013      	str	r3, [r2, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d107      	bne.n	8003954 <_Z41__static_initialization_and_destruction_0ii+0x6c>
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800394a:	4293      	cmp	r3, r2
 800394c:	d102      	bne.n	8003954 <_Z41__static_initialization_and_destruction_0ii+0x6c>
std::queue<char*> serialTXBuffer;
 800394e:	4803      	ldr	r0, [pc, #12]	; (800395c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8003950:	f7ff ffbc 	bl	80038cc <_ZNSt5queueIPcSt5dequeIS0_SaIS0_EEED1Ev>
}
 8003954:	bf00      	nop
 8003956:	3708      	adds	r7, #8
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	200001fc 	.word	0x200001fc
 8003960:	20001e84 	.word	0x20001e84
 8003964:	20001e98 	.word	0x20001e98
 8003968:	20001e9c 	.word	0x20001e9c
 800396c:	20002620 	.word	0x20002620
 8003970:	20001ea0 	.word	0x20001ea0
 8003974:	20001ee4 	.word	0x20001ee4

08003978 <_GLOBAL__sub_I_nRF_hspi>:
 8003978:	b580      	push	{r7, lr}
 800397a:	af00      	add	r7, sp, #0
 800397c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003980:	2001      	movs	r0, #1
 8003982:	f7ff ffb1 	bl	80038e8 <_Z41__static_initialization_and_destruction_0ii>
 8003986:	bd80      	pop	{r7, pc}

08003988 <_GLOBAL__sub_D_nRF_hspi>:
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
 800398c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003990:	2000      	movs	r0, #0
 8003992:	f7ff ffa9 	bl	80038e8 <_Z41__static_initialization_and_destruction_0ii>
 8003996:	bd80      	pop	{r7, pc}

08003998 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800399c:	4b07      	ldr	r3, [pc, #28]	; (80039bc <MX_CRC_Init+0x24>)
 800399e:	4a08      	ldr	r2, [pc, #32]	; (80039c0 <MX_CRC_Init+0x28>)
 80039a0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80039a2:	4806      	ldr	r0, [pc, #24]	; (80039bc <MX_CRC_Init+0x24>)
 80039a4:	f002 fb7b 	bl	800609e <HAL_CRC_Init>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d003      	beq.n	80039b6 <MX_CRC_Init+0x1e>
  {
    Error_Handler();
 80039ae:	212b      	movs	r1, #43	; 0x2b
 80039b0:	4804      	ldr	r0, [pc, #16]	; (80039c4 <MX_CRC_Init+0x2c>)
 80039b2:	f000 faf7 	bl	8003fa4 <_Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80039b6:	bf00      	nop
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	200020fc 	.word	0x200020fc
 80039c0:	40023000 	.word	0x40023000
 80039c4:	0800e32c 	.word	0x0800e32c

080039c8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a0b      	ldr	r2, [pc, #44]	; (8003a04 <HAL_CRC_MspInit+0x3c>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d10d      	bne.n	80039f6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80039da:	2300      	movs	r3, #0
 80039dc:	60fb      	str	r3, [r7, #12]
 80039de:	4b0a      	ldr	r3, [pc, #40]	; (8003a08 <HAL_CRC_MspInit+0x40>)
 80039e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e2:	4a09      	ldr	r2, [pc, #36]	; (8003a08 <HAL_CRC_MspInit+0x40>)
 80039e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80039e8:	6313      	str	r3, [r2, #48]	; 0x30
 80039ea:	4b07      	ldr	r3, [pc, #28]	; (8003a08 <HAL_CRC_MspInit+0x40>)
 80039ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039f2:	60fb      	str	r3, [r7, #12]
 80039f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80039f6:	bf00      	nop
 80039f8:	3714      	adds	r7, #20
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	40023000 	.word	0x40023000
 8003a08:	40023800 	.word	0x40023800

08003a0c <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8003a12:	463b      	mov	r3, r7
 8003a14:	2200      	movs	r2, #0
 8003a16:	601a      	str	r2, [r3, #0]
 8003a18:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8003a1a:	4b17      	ldr	r3, [pc, #92]	; (8003a78 <MX_DAC_Init+0x6c>)
 8003a1c:	4a17      	ldr	r2, [pc, #92]	; (8003a7c <MX_DAC_Init+0x70>)
 8003a1e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8003a20:	4815      	ldr	r0, [pc, #84]	; (8003a78 <MX_DAC_Init+0x6c>)
 8003a22:	f002 fb8b 	bl	800613c <HAL_DAC_Init>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d003      	beq.n	8003a34 <MX_DAC_Init+0x28>
  {
    Error_Handler();
 8003a2c:	2130      	movs	r1, #48	; 0x30
 8003a2e:	4814      	ldr	r0, [pc, #80]	; (8003a80 <MX_DAC_Init+0x74>)
 8003a30:	f000 fab8 	bl	8003fa4 <_Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003a34:	2300      	movs	r3, #0
 8003a36:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003a3c:	463b      	mov	r3, r7
 8003a3e:	2200      	movs	r2, #0
 8003a40:	4619      	mov	r1, r3
 8003a42:	480d      	ldr	r0, [pc, #52]	; (8003a78 <MX_DAC_Init+0x6c>)
 8003a44:	f002 fc00 	bl	8006248 <HAL_DAC_ConfigChannel>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d003      	beq.n	8003a56 <MX_DAC_Init+0x4a>
  {
    Error_Handler();
 8003a4e:	2139      	movs	r1, #57	; 0x39
 8003a50:	480b      	ldr	r0, [pc, #44]	; (8003a80 <MX_DAC_Init+0x74>)
 8003a52:	f000 faa7 	bl	8003fa4 <_Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8003a56:	463b      	mov	r3, r7
 8003a58:	2210      	movs	r2, #16
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	4806      	ldr	r0, [pc, #24]	; (8003a78 <MX_DAC_Init+0x6c>)
 8003a5e:	f002 fbf3 	bl	8006248 <HAL_DAC_ConfigChannel>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d003      	beq.n	8003a70 <MX_DAC_Init+0x64>
  {
    Error_Handler();
 8003a68:	2140      	movs	r1, #64	; 0x40
 8003a6a:	4805      	ldr	r0, [pc, #20]	; (8003a80 <MX_DAC_Init+0x74>)
 8003a6c:	f000 fa9a 	bl	8003fa4 <_Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8003a70:	bf00      	nop
 8003a72:	3708      	adds	r7, #8
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	20002104 	.word	0x20002104
 8003a7c:	40007400 	.word	0x40007400
 8003a80:	0800e340 	.word	0x0800e340

08003a84 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b08a      	sub	sp, #40	; 0x28
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a8c:	f107 0314 	add.w	r3, r7, #20
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	605a      	str	r2, [r3, #4]
 8003a96:	609a      	str	r2, [r3, #8]
 8003a98:	60da      	str	r2, [r3, #12]
 8003a9a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a1b      	ldr	r2, [pc, #108]	; (8003b10 <HAL_DAC_MspInit+0x8c>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d12f      	bne.n	8003b06 <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	613b      	str	r3, [r7, #16]
 8003aaa:	4b1a      	ldr	r3, [pc, #104]	; (8003b14 <HAL_DAC_MspInit+0x90>)
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	4a19      	ldr	r2, [pc, #100]	; (8003b14 <HAL_DAC_MspInit+0x90>)
 8003ab0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ab6:	4b17      	ldr	r3, [pc, #92]	; (8003b14 <HAL_DAC_MspInit+0x90>)
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003abe:	613b      	str	r3, [r7, #16]
 8003ac0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	60fb      	str	r3, [r7, #12]
 8003ac6:	4b13      	ldr	r3, [pc, #76]	; (8003b14 <HAL_DAC_MspInit+0x90>)
 8003ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aca:	4a12      	ldr	r2, [pc, #72]	; (8003b14 <HAL_DAC_MspInit+0x90>)
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ad2:	4b10      	ldr	r3, [pc, #64]	; (8003b14 <HAL_DAC_MspInit+0x90>)
 8003ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	60fb      	str	r3, [r7, #12]
 8003adc:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003ade:	2330      	movs	r3, #48	; 0x30
 8003ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aea:	f107 0314 	add.w	r3, r7, #20
 8003aee:	4619      	mov	r1, r3
 8003af0:	4809      	ldr	r0, [pc, #36]	; (8003b18 <HAL_DAC_MspInit+0x94>)
 8003af2:	f002 fc95 	bl	8006420 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003af6:	2200      	movs	r2, #0
 8003af8:	2100      	movs	r1, #0
 8003afa:	2036      	movs	r0, #54	; 0x36
 8003afc:	f002 fa99 	bl	8006032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003b00:	2036      	movs	r0, #54	; 0x36
 8003b02:	f002 fab2 	bl	800606a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8003b06:	bf00      	nop
 8003b08:	3728      	adds	r7, #40	; 0x28
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	40007400 	.word	0x40007400
 8003b14:	40023800 	.word	0x40023800
 8003b18:	40020000 	.word	0x40020000

08003b1c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b08c      	sub	sp, #48	; 0x30
 8003b20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b22:	f107 031c 	add.w	r3, r7, #28
 8003b26:	2200      	movs	r2, #0
 8003b28:	601a      	str	r2, [r3, #0]
 8003b2a:	605a      	str	r2, [r3, #4]
 8003b2c:	609a      	str	r2, [r3, #8]
 8003b2e:	60da      	str	r2, [r3, #12]
 8003b30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b32:	2300      	movs	r3, #0
 8003b34:	61bb      	str	r3, [r7, #24]
 8003b36:	4b72      	ldr	r3, [pc, #456]	; (8003d00 <MX_GPIO_Init+0x1e4>)
 8003b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3a:	4a71      	ldr	r2, [pc, #452]	; (8003d00 <MX_GPIO_Init+0x1e4>)
 8003b3c:	f043 0310 	orr.w	r3, r3, #16
 8003b40:	6313      	str	r3, [r2, #48]	; 0x30
 8003b42:	4b6f      	ldr	r3, [pc, #444]	; (8003d00 <MX_GPIO_Init+0x1e4>)
 8003b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b46:	f003 0310 	and.w	r3, r3, #16
 8003b4a:	61bb      	str	r3, [r7, #24]
 8003b4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b4e:	2300      	movs	r3, #0
 8003b50:	617b      	str	r3, [r7, #20]
 8003b52:	4b6b      	ldr	r3, [pc, #428]	; (8003d00 <MX_GPIO_Init+0x1e4>)
 8003b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b56:	4a6a      	ldr	r2, [pc, #424]	; (8003d00 <MX_GPIO_Init+0x1e4>)
 8003b58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b5e:	4b68      	ldr	r3, [pc, #416]	; (8003d00 <MX_GPIO_Init+0x1e4>)
 8003b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b66:	617b      	str	r3, [r7, #20]
 8003b68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	613b      	str	r3, [r7, #16]
 8003b6e:	4b64      	ldr	r3, [pc, #400]	; (8003d00 <MX_GPIO_Init+0x1e4>)
 8003b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b72:	4a63      	ldr	r2, [pc, #396]	; (8003d00 <MX_GPIO_Init+0x1e4>)
 8003b74:	f043 0304 	orr.w	r3, r3, #4
 8003b78:	6313      	str	r3, [r2, #48]	; 0x30
 8003b7a:	4b61      	ldr	r3, [pc, #388]	; (8003d00 <MX_GPIO_Init+0x1e4>)
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7e:	f003 0304 	and.w	r3, r3, #4
 8003b82:	613b      	str	r3, [r7, #16]
 8003b84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b86:	2300      	movs	r3, #0
 8003b88:	60fb      	str	r3, [r7, #12]
 8003b8a:	4b5d      	ldr	r3, [pc, #372]	; (8003d00 <MX_GPIO_Init+0x1e4>)
 8003b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8e:	4a5c      	ldr	r2, [pc, #368]	; (8003d00 <MX_GPIO_Init+0x1e4>)
 8003b90:	f043 0301 	orr.w	r3, r3, #1
 8003b94:	6313      	str	r3, [r2, #48]	; 0x30
 8003b96:	4b5a      	ldr	r3, [pc, #360]	; (8003d00 <MX_GPIO_Init+0x1e4>)
 8003b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	60fb      	str	r3, [r7, #12]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	60bb      	str	r3, [r7, #8]
 8003ba6:	4b56      	ldr	r3, [pc, #344]	; (8003d00 <MX_GPIO_Init+0x1e4>)
 8003ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003baa:	4a55      	ldr	r2, [pc, #340]	; (8003d00 <MX_GPIO_Init+0x1e4>)
 8003bac:	f043 0302 	orr.w	r3, r3, #2
 8003bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8003bb2:	4b53      	ldr	r3, [pc, #332]	; (8003d00 <MX_GPIO_Init+0x1e4>)
 8003bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	60bb      	str	r3, [r7, #8]
 8003bbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	607b      	str	r3, [r7, #4]
 8003bc2:	4b4f      	ldr	r3, [pc, #316]	; (8003d00 <MX_GPIO_Init+0x1e4>)
 8003bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc6:	4a4e      	ldr	r2, [pc, #312]	; (8003d00 <MX_GPIO_Init+0x1e4>)
 8003bc8:	f043 0308 	orr.w	r3, r3, #8
 8003bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8003bce:	4b4c      	ldr	r3, [pc, #304]	; (8003d00 <MX_GPIO_Init+0x1e4>)
 8003bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd2:	f003 0308 	and.w	r3, r3, #8
 8003bd6:	607b      	str	r3, [r7, #4]
 8003bd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SLEDB_Pin|SLEDG_Pin|SLEDR_Pin|CHSEL_DAC1_CH5_Pin
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f249 119f 	movw	r1, #37279	; 0x919f
 8003be0:	4848      	ldr	r0, [pc, #288]	; (8003d04 <MX_GPIO_Init+0x1e8>)
 8003be2:	f002 fdd1 	bl	8006788 <HAL_GPIO_WritePin>
                          |CHSEL_DAC2_CH6_Pin|CHSEL_STEP3_FF5_CH8_Pin|CHSEL_STEP4_FF6_CH9_Pin|CHSEL_STEP1_FF3_CH16_Pin
                          |CHSEL_STEP2_FF4_CH17_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nRF_CSN_GPIO_Port, nRF_CSN_Pin, GPIO_PIN_SET);
 8003be6:	2201      	movs	r2, #1
 8003be8:	2101      	movs	r1, #1
 8003bea:	4847      	ldr	r0, [pc, #284]	; (8003d08 <MX_GPIO_Init+0x1ec>)
 8003bec:	f002 fdcc 	bl	8006788 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nRF_CE_GPIO_Port, nRF_CE_Pin, GPIO_PIN_RESET);
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	2102      	movs	r1, #2
 8003bf4:	4844      	ldr	r0, [pc, #272]	; (8003d08 <MX_GPIO_Init+0x1ec>)
 8003bf6:	f002 fdc7 	bl	8006788 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPIFLASH_CS_GPIO_Port, SPIFLASH_CS_Pin, GPIO_PIN_SET);
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	2101      	movs	r1, #1
 8003bfe:	4843      	ldr	r0, [pc, #268]	; (8003d0c <MX_GPIO_Init+0x1f0>)
 8003c00:	f002 fdc2 	bl	8006788 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CHSEL_FF2_1_CH1_Pin|CHSEL_FF2_2_CH2_Pin, GPIO_PIN_RESET);
 8003c04:	2200      	movs	r2, #0
 8003c06:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8003c0a:	4840      	ldr	r0, [pc, #256]	; (8003d0c <MX_GPIO_Init+0x1f0>)
 8003c0c:	f002 fdbc 	bl	8006788 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CHSEL_FF1_1_CH10_Pin|CHSEL_FF1_2_CH11_Pin|IO_DBG_1_Pin|IO_DBG_2_Pin, GPIO_PIN_RESET);
 8003c10:	2200      	movs	r2, #0
 8003c12:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8003c16:	483e      	ldr	r0, [pc, #248]	; (8003d10 <MX_GPIO_Init+0x1f4>)
 8003c18:	f002 fdb6 	bl	8006788 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = SLEDB_Pin|SLEDG_Pin|SLEDR_Pin|CHSEL_DAC1_CH5_Pin
 8003c1c:	f249 139f 	movw	r3, #37279	; 0x919f
 8003c20:	61fb      	str	r3, [r7, #28]
                          |CHSEL_DAC2_CH6_Pin|CHSEL_STEP3_FF5_CH8_Pin|CHSEL_STEP4_FF6_CH9_Pin|CHSEL_STEP1_FF3_CH16_Pin
                          |CHSEL_STEP2_FF4_CH17_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c22:	2301      	movs	r3, #1
 8003c24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c26:	2300      	movs	r3, #0
 8003c28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c2e:	f107 031c 	add.w	r3, r7, #28
 8003c32:	4619      	mov	r1, r3
 8003c34:	4833      	ldr	r0, [pc, #204]	; (8003d04 <MX_GPIO_Init+0x1e8>)
 8003c36:	f002 fbf3 	bl	8006420 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = nRF_CSN_Pin|nRF_CE_Pin;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c42:	2300      	movs	r3, #0
 8003c44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c46:	2303      	movs	r3, #3
 8003c48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c4a:	f107 031c 	add.w	r3, r7, #28
 8003c4e:	4619      	mov	r1, r3
 8003c50:	482d      	ldr	r0, [pc, #180]	; (8003d08 <MX_GPIO_Init+0x1ec>)
 8003c52:	f002 fbe5 	bl	8006420 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPIFLASH_CS_Pin;
 8003c56:	2301      	movs	r3, #1
 8003c58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c62:	2303      	movs	r3, #3
 8003c64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPIFLASH_CS_GPIO_Port, &GPIO_InitStruct);
 8003c66:	f107 031c 	add.w	r3, r7, #28
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	4827      	ldr	r0, [pc, #156]	; (8003d0c <MX_GPIO_Init+0x1f0>)
 8003c6e:	f002 fbd7 	bl	8006420 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CHSEL_FF2_1_CH1_Pin|CHSEL_FF2_2_CH2_Pin;
 8003c72:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003c76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c80:	2300      	movs	r3, #0
 8003c82:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c84:	f107 031c 	add.w	r3, r7, #28
 8003c88:	4619      	mov	r1, r3
 8003c8a:	4820      	ldr	r0, [pc, #128]	; (8003d0c <MX_GPIO_Init+0x1f0>)
 8003c8c:	f002 fbc8 	bl	8006420 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nRF_IRQ_Pin;
 8003c90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003c96:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003c9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(nRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003ca0:	f107 031c 	add.w	r3, r7, #28
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	4819      	ldr	r0, [pc, #100]	; (8003d0c <MX_GPIO_Init+0x1f0>)
 8003ca8:	f002 fbba 	bl	8006420 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = CHSEL_FF1_1_CH10_Pin|CHSEL_FF1_2_CH11_Pin;
 8003cac:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003cb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003cbe:	f107 031c 	add.w	r3, r7, #28
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	4812      	ldr	r0, [pc, #72]	; (8003d10 <MX_GPIO_Init+0x1f4>)
 8003cc6:	f002 fbab 	bl	8006420 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = IO_DBG_1_Pin|IO_DBG_2_Pin;
 8003cca:	23c0      	movs	r3, #192	; 0xc0
 8003ccc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003cda:	f107 031c 	add.w	r3, r7, #28
 8003cde:	4619      	mov	r1, r3
 8003ce0:	480b      	ldr	r0, [pc, #44]	; (8003d10 <MX_GPIO_Init+0x1f4>)
 8003ce2:	f002 fb9d 	bl	8006420 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	2104      	movs	r1, #4
 8003cea:	2028      	movs	r0, #40	; 0x28
 8003cec:	f002 f9a1 	bl	8006032 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003cf0:	2028      	movs	r0, #40	; 0x28
 8003cf2:	f002 f9ba 	bl	800606a <HAL_NVIC_EnableIRQ>

}
 8003cf6:	bf00      	nop
 8003cf8:	3730      	adds	r7, #48	; 0x30
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	40023800 	.word	0x40023800
 8003d04:	40021000 	.word	0x40021000
 8003d08:	40020800 	.word	0x40020800
 8003d0c:	40020400 	.word	0x40020400
 8003d10:	40020c00 	.word	0x40020c00

08003d14 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003d18:	4b13      	ldr	r3, [pc, #76]	; (8003d68 <MX_I2C1_Init+0x54>)
 8003d1a:	4a14      	ldr	r2, [pc, #80]	; (8003d6c <MX_I2C1_Init+0x58>)
 8003d1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003d1e:	4b12      	ldr	r3, [pc, #72]	; (8003d68 <MX_I2C1_Init+0x54>)
 8003d20:	4a13      	ldr	r2, [pc, #76]	; (8003d70 <MX_I2C1_Init+0x5c>)
 8003d22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003d24:	4b10      	ldr	r3, [pc, #64]	; (8003d68 <MX_I2C1_Init+0x54>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003d2a:	4b0f      	ldr	r3, [pc, #60]	; (8003d68 <MX_I2C1_Init+0x54>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003d30:	4b0d      	ldr	r3, [pc, #52]	; (8003d68 <MX_I2C1_Init+0x54>)
 8003d32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d36:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003d38:	4b0b      	ldr	r3, [pc, #44]	; (8003d68 <MX_I2C1_Init+0x54>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003d3e:	4b0a      	ldr	r3, [pc, #40]	; (8003d68 <MX_I2C1_Init+0x54>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003d44:	4b08      	ldr	r3, [pc, #32]	; (8003d68 <MX_I2C1_Init+0x54>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003d4a:	4b07      	ldr	r3, [pc, #28]	; (8003d68 <MX_I2C1_Init+0x54>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003d50:	4805      	ldr	r0, [pc, #20]	; (8003d68 <MX_I2C1_Init+0x54>)
 8003d52:	f002 fd65 	bl	8006820 <HAL_I2C_Init>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d003      	beq.n	8003d64 <MX_I2C1_Init+0x50>
  {
    Error_Handler();
 8003d5c:	2133      	movs	r1, #51	; 0x33
 8003d5e:	4805      	ldr	r0, [pc, #20]	; (8003d74 <MX_I2C1_Init+0x60>)
 8003d60:	f000 f920 	bl	8003fa4 <_Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003d64:	bf00      	nop
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	20002118 	.word	0x20002118
 8003d6c:	40005400 	.word	0x40005400
 8003d70:	000186a0 	.word	0x000186a0
 8003d74:	0800e354 	.word	0x0800e354

08003d78 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b08a      	sub	sp, #40	; 0x28
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d80:	f107 0314 	add.w	r3, r7, #20
 8003d84:	2200      	movs	r2, #0
 8003d86:	601a      	str	r2, [r3, #0]
 8003d88:	605a      	str	r2, [r3, #4]
 8003d8a:	609a      	str	r2, [r3, #8]
 8003d8c:	60da      	str	r2, [r3, #12]
 8003d8e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a19      	ldr	r2, [pc, #100]	; (8003dfc <HAL_I2C_MspInit+0x84>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d12b      	bne.n	8003df2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	613b      	str	r3, [r7, #16]
 8003d9e:	4b18      	ldr	r3, [pc, #96]	; (8003e00 <HAL_I2C_MspInit+0x88>)
 8003da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da2:	4a17      	ldr	r2, [pc, #92]	; (8003e00 <HAL_I2C_MspInit+0x88>)
 8003da4:	f043 0302 	orr.w	r3, r3, #2
 8003da8:	6313      	str	r3, [r2, #48]	; 0x30
 8003daa:	4b15      	ldr	r3, [pc, #84]	; (8003e00 <HAL_I2C_MspInit+0x88>)
 8003dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	613b      	str	r3, [r7, #16]
 8003db4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003db6:	23c0      	movs	r3, #192	; 0xc0
 8003db8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003dba:	2312      	movs	r3, #18
 8003dbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003dc6:	2304      	movs	r3, #4
 8003dc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dca:	f107 0314 	add.w	r3, r7, #20
 8003dce:	4619      	mov	r1, r3
 8003dd0:	480c      	ldr	r0, [pc, #48]	; (8003e04 <HAL_I2C_MspInit+0x8c>)
 8003dd2:	f002 fb25 	bl	8006420 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	60fb      	str	r3, [r7, #12]
 8003dda:	4b09      	ldr	r3, [pc, #36]	; (8003e00 <HAL_I2C_MspInit+0x88>)
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	4a08      	ldr	r2, [pc, #32]	; (8003e00 <HAL_I2C_MspInit+0x88>)
 8003de0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003de4:	6413      	str	r3, [r2, #64]	; 0x40
 8003de6:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <HAL_I2C_MspInit+0x88>)
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dee:	60fb      	str	r3, [r7, #12]
 8003df0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003df2:	bf00      	nop
 8003df4:	3728      	adds	r7, #40	; 0x28
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	40005400 	.word	0x40005400
 8003e00:	40023800 	.word	0x40023800
 8003e04:	40020400 	.word	0x40020400

08003e08 <_read>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _read(int file, char *ptr, int len) {
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef hstatus;
    hstatus = HAL_UART_Receive(&huart1, (uint8_t*) ptr, 1, HAL_MAX_DELAY);
 8003e14:	f04f 33ff 	mov.w	r3, #4294967295
 8003e18:	2201      	movs	r2, #1
 8003e1a:	68b9      	ldr	r1, [r7, #8]
 8003e1c:	4807      	ldr	r0, [pc, #28]	; (8003e3c <_read+0x34>)
 8003e1e:	f004 ffdd 	bl	8008ddc <HAL_UART_Receive>
 8003e22:	4603      	mov	r3, r0
 8003e24:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8003e26:	7dfb      	ldrb	r3, [r7, #23]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d101      	bne.n	8003e30 <_read+0x28>
        return 1;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e000      	b.n	8003e32 <_read+0x2a>
    else
        return 0;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3718      	adds	r7, #24
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	200025ac 	.word	0x200025ac

08003e40 <_write>:

int _write(int file, char *ptr, int len) {
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]
	SerialPrint(ptr, len);
 8003e4c:	6879      	ldr	r1, [r7, #4]
 8003e4e:	68b8      	ldr	r0, [r7, #8]
 8003e50:	f7fe fd76 	bl	8002940 <SerialPrint>
	return len;
 8003e54:	687b      	ldr	r3, [r7, #4]
    	HAL_UART_DeInit(&huart1);
    	MX_USART1_UART_Init();
    }
//    	HAL_UART_AbortTransmit(&huart1); // Discard what was still being transmitted. Wil this work?
    return 0;
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003e62:	f001 ff75 	bl	8005d50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003e66:	f000 f82d 	bl	8003ec4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e6a:	f7ff fe57 	bl	8003b1c <MX_GPIO_Init>
  MX_DAC_Init();
 8003e6e:	f7ff fdcd 	bl	8003a0c <MX_DAC_Init>
  MX_TIM1_Init();
 8003e72:	f000 fa65 	bl	8004340 <MX_TIM1_Init>
  MX_TIM2_Init();
 8003e76:	f000 fb1b 	bl	80044b0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003e7a:	f000 fba1 	bl	80045c0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8003e7e:	f000 fc11 	bl	80046a4 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8003e82:	f001 fa7f 	bl	8005384 <MX_USART1_UART_Init>
  MX_UART5_Init();
 8003e86:	f001 fa4f 	bl	8005328 <MX_UART5_Init>
  MX_USART3_UART_Init();
 8003e8a:	f001 faa9 	bl	80053e0 <MX_USART3_UART_Init>
  MX_CRC_Init();
 8003e8e:	f7ff fd83 	bl	8003998 <MX_CRC_Init>
  MX_TIM9_Init();
 8003e92:	f000 fd43 	bl	800491c <MX_TIM9_Init>
  MX_TIM10_Init();
 8003e96:	f000 fd9d 	bl	80049d4 <MX_TIM10_Init>
  MX_TIM11_Init();
 8003e9a:	f000 fdf3 	bl	8004a84 <MX_TIM11_Init>
  MX_TIM12_Init();
 8003e9e:	f000 fe49 	bl	8004b34 <MX_TIM12_Init>
  MX_TIM13_Init();
 8003ea2:	f000 fea3 	bl	8004bec <MX_TIM13_Init>
  MX_TIM14_Init();
 8003ea6:	f000 fef9 	bl	8004c9c <MX_TIM14_Init>
  MX_SPI2_Init();
 8003eaa:	f000 f8a5 	bl	8003ff8 <MX_SPI2_Init>
  MX_TIM8_Init();
 8003eae:	f000 fc85 	bl	80047bc <MX_TIM8_Init>
  MX_I2C1_Init();
 8003eb2:	f7ff ff2f 	bl	8003d14 <MX_I2C1_Init>
  MX_SPI3_Init();
 8003eb6:	f000 f8d9 	bl	800406c <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  setup(); // Defined in main.cpp
 8003eba:	f7fe f9d3 	bl	8002264 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 8003ebe:	f7fe fae3 	bl	8002488 <loop>
 8003ec2:	e7fc      	b.n	8003ebe <main+0x60>

08003ec4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b094      	sub	sp, #80	; 0x50
 8003ec8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003eca:	f107 0320 	add.w	r3, r7, #32
 8003ece:	2230      	movs	r2, #48	; 0x30
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f008 f88c 	bl	800bff0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ed8:	f107 030c 	add.w	r3, r7, #12
 8003edc:	2200      	movs	r2, #0
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	605a      	str	r2, [r3, #4]
 8003ee2:	609a      	str	r2, [r3, #8]
 8003ee4:	60da      	str	r2, [r3, #12]
 8003ee6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ee8:	2300      	movs	r3, #0
 8003eea:	60bb      	str	r3, [r7, #8]
 8003eec:	4b2a      	ldr	r3, [pc, #168]	; (8003f98 <SystemClock_Config+0xd4>)
 8003eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef0:	4a29      	ldr	r2, [pc, #164]	; (8003f98 <SystemClock_Config+0xd4>)
 8003ef2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ef6:	6413      	str	r3, [r2, #64]	; 0x40
 8003ef8:	4b27      	ldr	r3, [pc, #156]	; (8003f98 <SystemClock_Config+0xd4>)
 8003efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f00:	60bb      	str	r3, [r7, #8]
 8003f02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f04:	2300      	movs	r3, #0
 8003f06:	607b      	str	r3, [r7, #4]
 8003f08:	4b24      	ldr	r3, [pc, #144]	; (8003f9c <SystemClock_Config+0xd8>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a23      	ldr	r2, [pc, #140]	; (8003f9c <SystemClock_Config+0xd8>)
 8003f0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f12:	6013      	str	r3, [r2, #0]
 8003f14:	4b21      	ldr	r3, [pc, #132]	; (8003f9c <SystemClock_Config+0xd8>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f1c:	607b      	str	r3, [r7, #4]
 8003f1e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003f20:	2301      	movs	r3, #1
 8003f22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003f24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f28:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003f2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003f34:	2308      	movs	r3, #8
 8003f36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003f38:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003f3c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003f3e:	2302      	movs	r3, #2
 8003f40:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003f42:	2307      	movs	r3, #7
 8003f44:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f46:	f107 0320 	add.w	r3, r7, #32
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f002 fdac 	bl	8006aa8 <HAL_RCC_OscConfig>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003f56:	21b6      	movs	r1, #182	; 0xb6
 8003f58:	4811      	ldr	r0, [pc, #68]	; (8003fa0 <SystemClock_Config+0xdc>)
 8003f5a:	f000 f823 	bl	8003fa4 <_Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f5e:	230f      	movs	r3, #15
 8003f60:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003f62:	2302      	movs	r3, #2
 8003f64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f66:	2300      	movs	r3, #0
 8003f68:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003f6a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003f6e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003f70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f74:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003f76:	f107 030c 	add.w	r3, r7, #12
 8003f7a:	2105      	movs	r1, #5
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f003 f80b 	bl	8006f98 <HAL_RCC_ClockConfig>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d003      	beq.n	8003f90 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8003f88:	21c4      	movs	r1, #196	; 0xc4
 8003f8a:	4805      	ldr	r0, [pc, #20]	; (8003fa0 <SystemClock_Config+0xdc>)
 8003f8c:	f000 f80a 	bl	8003fa4 <_Error_Handler>
  }
}
 8003f90:	bf00      	nop
 8003f92:	3750      	adds	r7, #80	; 0x50
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	40023800 	.word	0x40023800
 8003f9c:	40007000 	.word	0x40007000
 8003fa0:	0800e368 	.word	0x0800e368

08003fa4 <_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	Error_Handler_CPP(file,line); // Call cpp error handler
 8003fae:	6839      	ldr	r1, [r7, #0]
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f7fe fcfb 	bl	80029ac <Error_Handler_CPP>

  /* USER CODE END Error_Handler_Debug */
}
 8003fb6:	bf00      	nop
 8003fb8:	3708      	adds	r7, #8
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <map>:
#include "math.h"

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b085      	sub	sp, #20
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	60f8      	str	r0, [r7, #12]
 8003fc6:	60b9      	str	r1, [r7, #8]
 8003fc8:	607a      	str	r2, [r7, #4]
 8003fca:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	69b9      	ldr	r1, [r7, #24]
 8003fd4:	683a      	ldr	r2, [r7, #0]
 8003fd6:	1a8a      	subs	r2, r1, r2
 8003fd8:	fb03 f202 	mul.w	r2, r3, r2
 8003fdc:	6879      	ldr	r1, [r7, #4]
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	1acb      	subs	r3, r1, r3
 8003fe2:	fb92 f2f3 	sdiv	r2, r2, r3
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	4413      	add	r3, r2
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3714      	adds	r7, #20
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
	...

08003ff8 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003ffc:	4b18      	ldr	r3, [pc, #96]	; (8004060 <MX_SPI2_Init+0x68>)
 8003ffe:	4a19      	ldr	r2, [pc, #100]	; (8004064 <MX_SPI2_Init+0x6c>)
 8004000:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004002:	4b17      	ldr	r3, [pc, #92]	; (8004060 <MX_SPI2_Init+0x68>)
 8004004:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004008:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800400a:	4b15      	ldr	r3, [pc, #84]	; (8004060 <MX_SPI2_Init+0x68>)
 800400c:	2200      	movs	r2, #0
 800400e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004010:	4b13      	ldr	r3, [pc, #76]	; (8004060 <MX_SPI2_Init+0x68>)
 8004012:	2200      	movs	r2, #0
 8004014:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004016:	4b12      	ldr	r3, [pc, #72]	; (8004060 <MX_SPI2_Init+0x68>)
 8004018:	2200      	movs	r2, #0
 800401a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800401c:	4b10      	ldr	r3, [pc, #64]	; (8004060 <MX_SPI2_Init+0x68>)
 800401e:	2200      	movs	r2, #0
 8004020:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004022:	4b0f      	ldr	r3, [pc, #60]	; (8004060 <MX_SPI2_Init+0x68>)
 8004024:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004028:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800402a:	4b0d      	ldr	r3, [pc, #52]	; (8004060 <MX_SPI2_Init+0x68>)
 800402c:	2208      	movs	r2, #8
 800402e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004030:	4b0b      	ldr	r3, [pc, #44]	; (8004060 <MX_SPI2_Init+0x68>)
 8004032:	2200      	movs	r2, #0
 8004034:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004036:	4b0a      	ldr	r3, [pc, #40]	; (8004060 <MX_SPI2_Init+0x68>)
 8004038:	2200      	movs	r2, #0
 800403a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800403c:	4b08      	ldr	r3, [pc, #32]	; (8004060 <MX_SPI2_Init+0x68>)
 800403e:	2200      	movs	r2, #0
 8004040:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8004042:	4b07      	ldr	r3, [pc, #28]	; (8004060 <MX_SPI2_Init+0x68>)
 8004044:	220a      	movs	r2, #10
 8004046:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004048:	4805      	ldr	r0, [pc, #20]	; (8004060 <MX_SPI2_Init+0x68>)
 800404a:	f003 f9f7 	bl	800743c <HAL_SPI_Init>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d003      	beq.n	800405c <MX_SPI2_Init+0x64>
  {
    Error_Handler();
 8004054:	2137      	movs	r1, #55	; 0x37
 8004056:	4804      	ldr	r0, [pc, #16]	; (8004068 <MX_SPI2_Init+0x70>)
 8004058:	f7ff ffa4 	bl	8003fa4 <_Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800405c:	bf00      	nop
 800405e:	bd80      	pop	{r7, pc}
 8004060:	20002170 	.word	0x20002170
 8004064:	40003800 	.word	0x40003800
 8004068:	0800e37c 	.word	0x0800e37c

0800406c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8004070:	4b18      	ldr	r3, [pc, #96]	; (80040d4 <MX_SPI3_Init+0x68>)
 8004072:	4a19      	ldr	r2, [pc, #100]	; (80040d8 <MX_SPI3_Init+0x6c>)
 8004074:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004076:	4b17      	ldr	r3, [pc, #92]	; (80040d4 <MX_SPI3_Init+0x68>)
 8004078:	f44f 7282 	mov.w	r2, #260	; 0x104
 800407c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800407e:	4b15      	ldr	r3, [pc, #84]	; (80040d4 <MX_SPI3_Init+0x68>)
 8004080:	2200      	movs	r2, #0
 8004082:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004084:	4b13      	ldr	r3, [pc, #76]	; (80040d4 <MX_SPI3_Init+0x68>)
 8004086:	2200      	movs	r2, #0
 8004088:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800408a:	4b12      	ldr	r3, [pc, #72]	; (80040d4 <MX_SPI3_Init+0x68>)
 800408c:	2200      	movs	r2, #0
 800408e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004090:	4b10      	ldr	r3, [pc, #64]	; (80040d4 <MX_SPI3_Init+0x68>)
 8004092:	2200      	movs	r2, #0
 8004094:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004096:	4b0f      	ldr	r3, [pc, #60]	; (80040d4 <MX_SPI3_Init+0x68>)
 8004098:	f44f 7200 	mov.w	r2, #512	; 0x200
 800409c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800409e:	4b0d      	ldr	r3, [pc, #52]	; (80040d4 <MX_SPI3_Init+0x68>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80040a4:	4b0b      	ldr	r3, [pc, #44]	; (80040d4 <MX_SPI3_Init+0x68>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80040aa:	4b0a      	ldr	r3, [pc, #40]	; (80040d4 <MX_SPI3_Init+0x68>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040b0:	4b08      	ldr	r3, [pc, #32]	; (80040d4 <MX_SPI3_Init+0x68>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80040b6:	4b07      	ldr	r3, [pc, #28]	; (80040d4 <MX_SPI3_Init+0x68>)
 80040b8:	220a      	movs	r2, #10
 80040ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80040bc:	4805      	ldr	r0, [pc, #20]	; (80040d4 <MX_SPI3_Init+0x68>)
 80040be:	f003 f9bd 	bl	800743c <HAL_SPI_Init>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d003      	beq.n	80040d0 <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 80040c8:	2157      	movs	r1, #87	; 0x57
 80040ca:	4804      	ldr	r0, [pc, #16]	; (80040dc <MX_SPI3_Init+0x70>)
 80040cc:	f7ff ff6a 	bl	8003fa4 <_Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80040d0:	bf00      	nop
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	200021c8 	.word	0x200021c8
 80040d8:	40003c00 	.word	0x40003c00
 80040dc:	0800e37c 	.word	0x0800e37c

080040e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b08c      	sub	sp, #48	; 0x30
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040e8:	f107 031c 	add.w	r3, r7, #28
 80040ec:	2200      	movs	r2, #0
 80040ee:	601a      	str	r2, [r3, #0]
 80040f0:	605a      	str	r2, [r3, #4]
 80040f2:	609a      	str	r2, [r3, #8]
 80040f4:	60da      	str	r2, [r3, #12]
 80040f6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a41      	ldr	r2, [pc, #260]	; (8004204 <HAL_SPI_MspInit+0x124>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d14b      	bne.n	800419a <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004102:	2300      	movs	r3, #0
 8004104:	61bb      	str	r3, [r7, #24]
 8004106:	4b40      	ldr	r3, [pc, #256]	; (8004208 <HAL_SPI_MspInit+0x128>)
 8004108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410a:	4a3f      	ldr	r2, [pc, #252]	; (8004208 <HAL_SPI_MspInit+0x128>)
 800410c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004110:	6413      	str	r3, [r2, #64]	; 0x40
 8004112:	4b3d      	ldr	r3, [pc, #244]	; (8004208 <HAL_SPI_MspInit+0x128>)
 8004114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004116:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800411a:	61bb      	str	r3, [r7, #24]
 800411c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800411e:	2300      	movs	r3, #0
 8004120:	617b      	str	r3, [r7, #20]
 8004122:	4b39      	ldr	r3, [pc, #228]	; (8004208 <HAL_SPI_MspInit+0x128>)
 8004124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004126:	4a38      	ldr	r2, [pc, #224]	; (8004208 <HAL_SPI_MspInit+0x128>)
 8004128:	f043 0304 	orr.w	r3, r3, #4
 800412c:	6313      	str	r3, [r2, #48]	; 0x30
 800412e:	4b36      	ldr	r3, [pc, #216]	; (8004208 <HAL_SPI_MspInit+0x128>)
 8004130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004132:	f003 0304 	and.w	r3, r3, #4
 8004136:	617b      	str	r3, [r7, #20]
 8004138:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800413a:	2300      	movs	r3, #0
 800413c:	613b      	str	r3, [r7, #16]
 800413e:	4b32      	ldr	r3, [pc, #200]	; (8004208 <HAL_SPI_MspInit+0x128>)
 8004140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004142:	4a31      	ldr	r2, [pc, #196]	; (8004208 <HAL_SPI_MspInit+0x128>)
 8004144:	f043 0302 	orr.w	r3, r3, #2
 8004148:	6313      	str	r3, [r2, #48]	; 0x30
 800414a:	4b2f      	ldr	r3, [pc, #188]	; (8004208 <HAL_SPI_MspInit+0x128>)
 800414c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	613b      	str	r3, [r7, #16]
 8004154:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004156:	230c      	movs	r3, #12
 8004158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800415a:	2302      	movs	r3, #2
 800415c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800415e:	2300      	movs	r3, #0
 8004160:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004162:	2303      	movs	r3, #3
 8004164:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004166:	2305      	movs	r3, #5
 8004168:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800416a:	f107 031c 	add.w	r3, r7, #28
 800416e:	4619      	mov	r1, r3
 8004170:	4826      	ldr	r0, [pc, #152]	; (800420c <HAL_SPI_MspInit+0x12c>)
 8004172:	f002 f955 	bl	8006420 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004176:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800417a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800417c:	2302      	movs	r3, #2
 800417e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004180:	2300      	movs	r3, #0
 8004182:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004184:	2303      	movs	r3, #3
 8004186:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004188:	2305      	movs	r3, #5
 800418a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800418c:	f107 031c 	add.w	r3, r7, #28
 8004190:	4619      	mov	r1, r3
 8004192:	481f      	ldr	r0, [pc, #124]	; (8004210 <HAL_SPI_MspInit+0x130>)
 8004194:	f002 f944 	bl	8006420 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8004198:	e030      	b.n	80041fc <HAL_SPI_MspInit+0x11c>
  else if(spiHandle->Instance==SPI3)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a1d      	ldr	r2, [pc, #116]	; (8004214 <HAL_SPI_MspInit+0x134>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d12b      	bne.n	80041fc <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80041a4:	2300      	movs	r3, #0
 80041a6:	60fb      	str	r3, [r7, #12]
 80041a8:	4b17      	ldr	r3, [pc, #92]	; (8004208 <HAL_SPI_MspInit+0x128>)
 80041aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ac:	4a16      	ldr	r2, [pc, #88]	; (8004208 <HAL_SPI_MspInit+0x128>)
 80041ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041b2:	6413      	str	r3, [r2, #64]	; 0x40
 80041b4:	4b14      	ldr	r3, [pc, #80]	; (8004208 <HAL_SPI_MspInit+0x128>)
 80041b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041bc:	60fb      	str	r3, [r7, #12]
 80041be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041c0:	2300      	movs	r3, #0
 80041c2:	60bb      	str	r3, [r7, #8]
 80041c4:	4b10      	ldr	r3, [pc, #64]	; (8004208 <HAL_SPI_MspInit+0x128>)
 80041c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c8:	4a0f      	ldr	r2, [pc, #60]	; (8004208 <HAL_SPI_MspInit+0x128>)
 80041ca:	f043 0302 	orr.w	r3, r3, #2
 80041ce:	6313      	str	r3, [r2, #48]	; 0x30
 80041d0:	4b0d      	ldr	r3, [pc, #52]	; (8004208 <HAL_SPI_MspInit+0x128>)
 80041d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	60bb      	str	r3, [r7, #8]
 80041da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80041dc:	2338      	movs	r3, #56	; 0x38
 80041de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041e0:	2302      	movs	r3, #2
 80041e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e4:	2300      	movs	r3, #0
 80041e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041e8:	2303      	movs	r3, #3
 80041ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80041ec:	2306      	movs	r3, #6
 80041ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041f0:	f107 031c 	add.w	r3, r7, #28
 80041f4:	4619      	mov	r1, r3
 80041f6:	4806      	ldr	r0, [pc, #24]	; (8004210 <HAL_SPI_MspInit+0x130>)
 80041f8:	f002 f912 	bl	8006420 <HAL_GPIO_Init>
}
 80041fc:	bf00      	nop
 80041fe:	3730      	adds	r7, #48	; 0x30
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	40003800 	.word	0x40003800
 8004208:	40023800 	.word	0x40023800
 800420c:	40020800 	.word	0x40020800
 8004210:	40020400 	.word	0x40020400
 8004214:	40003c00 	.word	0x40003c00

08004218 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800421e:	2300      	movs	r3, #0
 8004220:	607b      	str	r3, [r7, #4]
 8004222:	4b10      	ldr	r3, [pc, #64]	; (8004264 <HAL_MspInit+0x4c>)
 8004224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004226:	4a0f      	ldr	r2, [pc, #60]	; (8004264 <HAL_MspInit+0x4c>)
 8004228:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800422c:	6453      	str	r3, [r2, #68]	; 0x44
 800422e:	4b0d      	ldr	r3, [pc, #52]	; (8004264 <HAL_MspInit+0x4c>)
 8004230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004236:	607b      	str	r3, [r7, #4]
 8004238:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800423a:	2300      	movs	r3, #0
 800423c:	603b      	str	r3, [r7, #0]
 800423e:	4b09      	ldr	r3, [pc, #36]	; (8004264 <HAL_MspInit+0x4c>)
 8004240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004242:	4a08      	ldr	r2, [pc, #32]	; (8004264 <HAL_MspInit+0x4c>)
 8004244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004248:	6413      	str	r3, [r2, #64]	; 0x40
 800424a:	4b06      	ldr	r3, [pc, #24]	; (8004264 <HAL_MspInit+0x4c>)
 800424c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004252:	603b      	str	r3, [r7, #0]
 8004254:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004256:	bf00      	nop
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	40023800 	.word	0x40023800

08004268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800426c:	e7fe      	b.n	800426c <NMI_Handler+0x4>

0800426e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800426e:	b480      	push	{r7}
 8004270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004272:	e7fe      	b.n	8004272 <HardFault_Handler+0x4>

08004274 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004274:	b480      	push	{r7}
 8004276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004278:	e7fe      	b.n	8004278 <MemManage_Handler+0x4>

0800427a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800427a:	b480      	push	{r7}
 800427c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800427e:	e7fe      	b.n	800427e <BusFault_Handler+0x4>

08004280 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004280:	b480      	push	{r7}
 8004282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004284:	e7fe      	b.n	8004284 <UsageFault_Handler+0x4>

08004286 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004286:	b480      	push	{r7}
 8004288:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800428a:	bf00      	nop
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004294:	b480      	push	{r7}
 8004296:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004298:	bf00      	nop
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042a2:	b480      	push	{r7}
 80042a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80042a6:	bf00      	nop
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042b4:	f001 fd9e 	bl	8005df4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042b8:	bf00      	nop
 80042ba:	bd80      	pop	{r7, pc}

080042bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80042c0:	4802      	ldr	r0, [pc, #8]	; (80042cc <USART1_IRQHandler+0x10>)
 80042c2:	f004 fea3 	bl	800900c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80042c6:	bf00      	nop
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	200025ac 	.word	0x200025ac

080042d0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80042d4:	4802      	ldr	r0, [pc, #8]	; (80042e0 <USART3_IRQHandler+0x10>)
 80042d6:	f004 fe99 	bl	800900c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80042da:	bf00      	nop
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	20002620 	.word	0x20002620

080042e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(nRF_IRQ_Pin);
 80042e8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80042ec:	f002 fa80 	bl	80067f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80042f0:	bf00      	nop
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80042f8:	4802      	ldr	r0, [pc, #8]	; (8004304 <UART5_IRQHandler+0x10>)
 80042fa:	f004 fe87 	bl	800900c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80042fe:	bf00      	nop
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	20002538 	.word	0x20002538

08004308 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 800430c:	4802      	ldr	r0, [pc, #8]	; (8004318 <TIM6_DAC_IRQHandler+0x10>)
 800430e:	f001 ff37 	bl	8006180 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004312:	bf00      	nop
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	20002104 	.word	0x20002104

0800431c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800431c:	b480      	push	{r7}
 800431e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004320:	4b06      	ldr	r3, [pc, #24]	; (800433c <SystemInit+0x20>)
 8004322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004326:	4a05      	ldr	r2, [pc, #20]	; (800433c <SystemInit+0x20>)
 8004328:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800432c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004330:	bf00      	nop
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	e000ed00 	.word	0xe000ed00

08004340 <MX_TIM1_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b092      	sub	sp, #72	; 0x48
 8004344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004346:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800434a:	2200      	movs	r2, #0
 800434c:	601a      	str	r2, [r3, #0]
 800434e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004350:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004354:	2200      	movs	r2, #0
 8004356:	601a      	str	r2, [r3, #0]
 8004358:	605a      	str	r2, [r3, #4]
 800435a:	609a      	str	r2, [r3, #8]
 800435c:	60da      	str	r2, [r3, #12]
 800435e:	611a      	str	r2, [r3, #16]
 8004360:	615a      	str	r2, [r3, #20]
 8004362:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004364:	1d3b      	adds	r3, r7, #4
 8004366:	2220      	movs	r2, #32
 8004368:	2100      	movs	r1, #0
 800436a:	4618      	mov	r0, r3
 800436c:	f007 fe40 	bl	800bff0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004370:	4b4c      	ldr	r3, [pc, #304]	; (80044a4 <MX_TIM1_Init+0x164>)
 8004372:	4a4d      	ldr	r2, [pc, #308]	; (80044a8 <MX_TIM1_Init+0x168>)
 8004374:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8004376:	4b4b      	ldr	r3, [pc, #300]	; (80044a4 <MX_TIM1_Init+0x164>)
 8004378:	22a7      	movs	r2, #167	; 0xa7
 800437a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800437c:	4b49      	ldr	r3, [pc, #292]	; (80044a4 <MX_TIM1_Init+0x164>)
 800437e:	2200      	movs	r2, #0
 8004380:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7000;
 8004382:	4b48      	ldr	r3, [pc, #288]	; (80044a4 <MX_TIM1_Init+0x164>)
 8004384:	f641 3258 	movw	r2, #7000	; 0x1b58
 8004388:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800438a:	4b46      	ldr	r3, [pc, #280]	; (80044a4 <MX_TIM1_Init+0x164>)
 800438c:	2200      	movs	r2, #0
 800438e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004390:	4b44      	ldr	r3, [pc, #272]	; (80044a4 <MX_TIM1_Init+0x164>)
 8004392:	2200      	movs	r2, #0
 8004394:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004396:	4b43      	ldr	r3, [pc, #268]	; (80044a4 <MX_TIM1_Init+0x164>)
 8004398:	2280      	movs	r2, #128	; 0x80
 800439a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800439c:	4841      	ldr	r0, [pc, #260]	; (80044a4 <MX_TIM1_Init+0x164>)
 800439e:	f003 fe44 	bl	800802a <HAL_TIM_PWM_Init>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d003      	beq.n	80043b0 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 80043a8:	213f      	movs	r1, #63	; 0x3f
 80043aa:	4840      	ldr	r0, [pc, #256]	; (80044ac <MX_TIM1_Init+0x16c>)
 80043ac:	f7ff fdfa 	bl	8003fa4 <_Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043b0:	2300      	movs	r3, #0
 80043b2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043b4:	2300      	movs	r3, #0
 80043b6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80043b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80043bc:	4619      	mov	r1, r3
 80043be:	4839      	ldr	r0, [pc, #228]	; (80044a4 <MX_TIM1_Init+0x164>)
 80043c0:	f004 faaa 	bl	8008918 <HAL_TIMEx_MasterConfigSynchronization>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d003      	beq.n	80043d2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80043ca:	2145      	movs	r1, #69	; 0x45
 80043cc:	4837      	ldr	r0, [pc, #220]	; (80044ac <MX_TIM1_Init+0x16c>)
 80043ce:	f7ff fde9 	bl	8003fa4 <_Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80043d2:	2360      	movs	r3, #96	; 0x60
 80043d4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1500;
 80043d6:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80043da:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80043dc:	2300      	movs	r3, #0
 80043de:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80043e0:	2300      	movs	r3, #0
 80043e2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80043e4:	2300      	movs	r3, #0
 80043e6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80043e8:	2300      	movs	r3, #0
 80043ea:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80043ec:	2300      	movs	r3, #0
 80043ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80043f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043f4:	2200      	movs	r2, #0
 80043f6:	4619      	mov	r1, r3
 80043f8:	482a      	ldr	r0, [pc, #168]	; (80044a4 <MX_TIM1_Init+0x164>)
 80043fa:	f003 ff2d 	bl	8008258 <HAL_TIM_PWM_ConfigChannel>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d003      	beq.n	800440c <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8004404:	2150      	movs	r1, #80	; 0x50
 8004406:	4829      	ldr	r0, [pc, #164]	; (80044ac <MX_TIM1_Init+0x16c>)
 8004408:	f7ff fdcc 	bl	8003fa4 <_Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800440c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004410:	2204      	movs	r2, #4
 8004412:	4619      	mov	r1, r3
 8004414:	4823      	ldr	r0, [pc, #140]	; (80044a4 <MX_TIM1_Init+0x164>)
 8004416:	f003 ff1f 	bl	8008258 <HAL_TIM_PWM_ConfigChannel>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d003      	beq.n	8004428 <MX_TIM1_Init+0xe8>
  {
    Error_Handler();
 8004420:	2154      	movs	r1, #84	; 0x54
 8004422:	4822      	ldr	r0, [pc, #136]	; (80044ac <MX_TIM1_Init+0x16c>)
 8004424:	f7ff fdbe 	bl	8003fa4 <_Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004428:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800442c:	2208      	movs	r2, #8
 800442e:	4619      	mov	r1, r3
 8004430:	481c      	ldr	r0, [pc, #112]	; (80044a4 <MX_TIM1_Init+0x164>)
 8004432:	f003 ff11 	bl	8008258 <HAL_TIM_PWM_ConfigChannel>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d003      	beq.n	8004444 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 800443c:	2158      	movs	r1, #88	; 0x58
 800443e:	481b      	ldr	r0, [pc, #108]	; (80044ac <MX_TIM1_Init+0x16c>)
 8004440:	f7ff fdb0 	bl	8003fa4 <_Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004444:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004448:	220c      	movs	r2, #12
 800444a:	4619      	mov	r1, r3
 800444c:	4815      	ldr	r0, [pc, #84]	; (80044a4 <MX_TIM1_Init+0x164>)
 800444e:	f003 ff03 	bl	8008258 <HAL_TIM_PWM_ConfigChannel>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d003      	beq.n	8004460 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8004458:	215c      	movs	r1, #92	; 0x5c
 800445a:	4814      	ldr	r0, [pc, #80]	; (80044ac <MX_TIM1_Init+0x16c>)
 800445c:	f7ff fda2 	bl	8003fa4 <_Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004460:	2300      	movs	r3, #0
 8004462:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004464:	2300      	movs	r3, #0
 8004466:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004468:	2300      	movs	r3, #0
 800446a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800446c:	2300      	movs	r3, #0
 800446e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004470:	2300      	movs	r3, #0
 8004472:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004474:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004478:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800447a:	2300      	movs	r3, #0
 800447c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800447e:	1d3b      	adds	r3, r7, #4
 8004480:	4619      	mov	r1, r3
 8004482:	4808      	ldr	r0, [pc, #32]	; (80044a4 <MX_TIM1_Init+0x164>)
 8004484:	f004 fac4 	bl	8008a10 <HAL_TIMEx_ConfigBreakDeadTime>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d003      	beq.n	8004496 <MX_TIM1_Init+0x156>
  {
    Error_Handler();
 800448e:	2167      	movs	r1, #103	; 0x67
 8004490:	4806      	ldr	r0, [pc, #24]	; (80044ac <MX_TIM1_Init+0x16c>)
 8004492:	f7ff fd87 	bl	8003fa4 <_Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004496:	4803      	ldr	r0, [pc, #12]	; (80044a4 <MX_TIM1_Init+0x164>)
 8004498:	f000 fd60 	bl	8004f5c <HAL_TIM_MspPostInit>

}
 800449c:	bf00      	nop
 800449e:	3748      	adds	r7, #72	; 0x48
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	20002220 	.word	0x20002220
 80044a8:	40010000 	.word	0x40010000
 80044ac:	0800e390 	.word	0x0800e390

080044b0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b08a      	sub	sp, #40	; 0x28
 80044b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044b6:	f107 0320 	add.w	r3, r7, #32
 80044ba:	2200      	movs	r2, #0
 80044bc:	601a      	str	r2, [r3, #0]
 80044be:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80044c0:	1d3b      	adds	r3, r7, #4
 80044c2:	2200      	movs	r2, #0
 80044c4:	601a      	str	r2, [r3, #0]
 80044c6:	605a      	str	r2, [r3, #4]
 80044c8:	609a      	str	r2, [r3, #8]
 80044ca:	60da      	str	r2, [r3, #12]
 80044cc:	611a      	str	r2, [r3, #16]
 80044ce:	615a      	str	r2, [r3, #20]
 80044d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80044d2:	4b39      	ldr	r3, [pc, #228]	; (80045b8 <MX_TIM2_Init+0x108>)
 80044d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80044d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80044da:	4b37      	ldr	r3, [pc, #220]	; (80045b8 <MX_TIM2_Init+0x108>)
 80044dc:	2253      	movs	r2, #83	; 0x53
 80044de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044e0:	4b35      	ldr	r3, [pc, #212]	; (80045b8 <MX_TIM2_Init+0x108>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7000;
 80044e6:	4b34      	ldr	r3, [pc, #208]	; (80045b8 <MX_TIM2_Init+0x108>)
 80044e8:	f641 3258 	movw	r2, #7000	; 0x1b58
 80044ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044ee:	4b32      	ldr	r3, [pc, #200]	; (80045b8 <MX_TIM2_Init+0x108>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80044f4:	4b30      	ldr	r3, [pc, #192]	; (80045b8 <MX_TIM2_Init+0x108>)
 80044f6:	2280      	movs	r2, #128	; 0x80
 80044f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80044fa:	482f      	ldr	r0, [pc, #188]	; (80045b8 <MX_TIM2_Init+0x108>)
 80044fc:	f003 fd95 	bl	800802a <HAL_TIM_PWM_Init>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d003      	beq.n	800450e <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8004506:	2185      	movs	r1, #133	; 0x85
 8004508:	482c      	ldr	r0, [pc, #176]	; (80045bc <MX_TIM2_Init+0x10c>)
 800450a:	f7ff fd4b 	bl	8003fa4 <_Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800450e:	2300      	movs	r3, #0
 8004510:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004512:	2300      	movs	r3, #0
 8004514:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004516:	f107 0320 	add.w	r3, r7, #32
 800451a:	4619      	mov	r1, r3
 800451c:	4826      	ldr	r0, [pc, #152]	; (80045b8 <MX_TIM2_Init+0x108>)
 800451e:	f004 f9fb 	bl	8008918 <HAL_TIMEx_MasterConfigSynchronization>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d003      	beq.n	8004530 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8004528:	218b      	movs	r1, #139	; 0x8b
 800452a:	4824      	ldr	r0, [pc, #144]	; (80045bc <MX_TIM2_Init+0x10c>)
 800452c:	f7ff fd3a 	bl	8003fa4 <_Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004530:	2360      	movs	r3, #96	; 0x60
 8004532:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8004534:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8004538:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800453a:	2300      	movs	r3, #0
 800453c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800453e:	2300      	movs	r3, #0
 8004540:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004542:	1d3b      	adds	r3, r7, #4
 8004544:	2200      	movs	r2, #0
 8004546:	4619      	mov	r1, r3
 8004548:	481b      	ldr	r0, [pc, #108]	; (80045b8 <MX_TIM2_Init+0x108>)
 800454a:	f003 fe85 	bl	8008258 <HAL_TIM_PWM_ConfigChannel>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d003      	beq.n	800455c <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8004554:	2193      	movs	r1, #147	; 0x93
 8004556:	4819      	ldr	r0, [pc, #100]	; (80045bc <MX_TIM2_Init+0x10c>)
 8004558:	f7ff fd24 	bl	8003fa4 <_Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800455c:	1d3b      	adds	r3, r7, #4
 800455e:	2204      	movs	r2, #4
 8004560:	4619      	mov	r1, r3
 8004562:	4815      	ldr	r0, [pc, #84]	; (80045b8 <MX_TIM2_Init+0x108>)
 8004564:	f003 fe78 	bl	8008258 <HAL_TIM_PWM_ConfigChannel>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d003      	beq.n	8004576 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 800456e:	2197      	movs	r1, #151	; 0x97
 8004570:	4812      	ldr	r0, [pc, #72]	; (80045bc <MX_TIM2_Init+0x10c>)
 8004572:	f7ff fd17 	bl	8003fa4 <_Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004576:	1d3b      	adds	r3, r7, #4
 8004578:	2208      	movs	r2, #8
 800457a:	4619      	mov	r1, r3
 800457c:	480e      	ldr	r0, [pc, #56]	; (80045b8 <MX_TIM2_Init+0x108>)
 800457e:	f003 fe6b 	bl	8008258 <HAL_TIM_PWM_ConfigChannel>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d003      	beq.n	8004590 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8004588:	219b      	movs	r1, #155	; 0x9b
 800458a:	480c      	ldr	r0, [pc, #48]	; (80045bc <MX_TIM2_Init+0x10c>)
 800458c:	f7ff fd0a 	bl	8003fa4 <_Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004590:	1d3b      	adds	r3, r7, #4
 8004592:	220c      	movs	r2, #12
 8004594:	4619      	mov	r1, r3
 8004596:	4808      	ldr	r0, [pc, #32]	; (80045b8 <MX_TIM2_Init+0x108>)
 8004598:	f003 fe5e 	bl	8008258 <HAL_TIM_PWM_ConfigChannel>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d003      	beq.n	80045aa <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 80045a2:	219f      	movs	r1, #159	; 0x9f
 80045a4:	4805      	ldr	r0, [pc, #20]	; (80045bc <MX_TIM2_Init+0x10c>)
 80045a6:	f7ff fcfd 	bl	8003fa4 <_Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80045aa:	4803      	ldr	r0, [pc, #12]	; (80045b8 <MX_TIM2_Init+0x108>)
 80045ac:	f000 fcd6 	bl	8004f5c <HAL_TIM_MspPostInit>

}
 80045b0:	bf00      	nop
 80045b2:	3728      	adds	r7, #40	; 0x28
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	20002268 	.word	0x20002268
 80045bc:	0800e390 	.word	0x0800e390

080045c0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b08a      	sub	sp, #40	; 0x28
 80045c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045c6:	f107 0320 	add.w	r3, r7, #32
 80045ca:	2200      	movs	r2, #0
 80045cc:	601a      	str	r2, [r3, #0]
 80045ce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80045d0:	1d3b      	adds	r3, r7, #4
 80045d2:	2200      	movs	r2, #0
 80045d4:	601a      	str	r2, [r3, #0]
 80045d6:	605a      	str	r2, [r3, #4]
 80045d8:	609a      	str	r2, [r3, #8]
 80045da:	60da      	str	r2, [r3, #12]
 80045dc:	611a      	str	r2, [r3, #16]
 80045de:	615a      	str	r2, [r3, #20]
 80045e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80045e2:	4b2d      	ldr	r3, [pc, #180]	; (8004698 <MX_TIM3_Init+0xd8>)
 80045e4:	4a2d      	ldr	r2, [pc, #180]	; (800469c <MX_TIM3_Init+0xdc>)
 80045e6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 80045e8:	4b2b      	ldr	r3, [pc, #172]	; (8004698 <MX_TIM3_Init+0xd8>)
 80045ea:	2253      	movs	r2, #83	; 0x53
 80045ec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045ee:	4b2a      	ldr	r3, [pc, #168]	; (8004698 <MX_TIM3_Init+0xd8>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7000;
 80045f4:	4b28      	ldr	r3, [pc, #160]	; (8004698 <MX_TIM3_Init+0xd8>)
 80045f6:	f641 3258 	movw	r2, #7000	; 0x1b58
 80045fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045fc:	4b26      	ldr	r3, [pc, #152]	; (8004698 <MX_TIM3_Init+0xd8>)
 80045fe:	2200      	movs	r2, #0
 8004600:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004602:	4b25      	ldr	r3, [pc, #148]	; (8004698 <MX_TIM3_Init+0xd8>)
 8004604:	2280      	movs	r2, #128	; 0x80
 8004606:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004608:	4823      	ldr	r0, [pc, #140]	; (8004698 <MX_TIM3_Init+0xd8>)
 800460a:	f003 fd0e 	bl	800802a <HAL_TIM_PWM_Init>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d003      	beq.n	800461c <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8004614:	21bd      	movs	r1, #189	; 0xbd
 8004616:	4822      	ldr	r0, [pc, #136]	; (80046a0 <MX_TIM3_Init+0xe0>)
 8004618:	f7ff fcc4 	bl	8003fa4 <_Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800461c:	2300      	movs	r3, #0
 800461e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004620:	2300      	movs	r3, #0
 8004622:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004624:	f107 0320 	add.w	r3, r7, #32
 8004628:	4619      	mov	r1, r3
 800462a:	481b      	ldr	r0, [pc, #108]	; (8004698 <MX_TIM3_Init+0xd8>)
 800462c:	f004 f974 	bl	8008918 <HAL_TIMEx_MasterConfigSynchronization>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d003      	beq.n	800463e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8004636:	21c3      	movs	r1, #195	; 0xc3
 8004638:	4819      	ldr	r0, [pc, #100]	; (80046a0 <MX_TIM3_Init+0xe0>)
 800463a:	f7ff fcb3 	bl	8003fa4 <_Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800463e:	2360      	movs	r3, #96	; 0x60
 8004640:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004642:	2300      	movs	r3, #0
 8004644:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004646:	2300      	movs	r3, #0
 8004648:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800464a:	2300      	movs	r3, #0
 800464c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800464e:	1d3b      	adds	r3, r7, #4
 8004650:	2208      	movs	r2, #8
 8004652:	4619      	mov	r1, r3
 8004654:	4810      	ldr	r0, [pc, #64]	; (8004698 <MX_TIM3_Init+0xd8>)
 8004656:	f003 fdff 	bl	8008258 <HAL_TIM_PWM_ConfigChannel>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d003      	beq.n	8004668 <MX_TIM3_Init+0xa8>
  {
    Error_Handler();
 8004660:	21cb      	movs	r1, #203	; 0xcb
 8004662:	480f      	ldr	r0, [pc, #60]	; (80046a0 <MX_TIM3_Init+0xe0>)
 8004664:	f7ff fc9e 	bl	8003fa4 <_Error_Handler>
  }
  sConfigOC.Pulse = 1500;
 8004668:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800466c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800466e:	1d3b      	adds	r3, r7, #4
 8004670:	220c      	movs	r2, #12
 8004672:	4619      	mov	r1, r3
 8004674:	4808      	ldr	r0, [pc, #32]	; (8004698 <MX_TIM3_Init+0xd8>)
 8004676:	f003 fdef 	bl	8008258 <HAL_TIM_PWM_ConfigChannel>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d003      	beq.n	8004688 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8004680:	21d0      	movs	r1, #208	; 0xd0
 8004682:	4807      	ldr	r0, [pc, #28]	; (80046a0 <MX_TIM3_Init+0xe0>)
 8004684:	f7ff fc8e 	bl	8003fa4 <_Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004688:	4803      	ldr	r0, [pc, #12]	; (8004698 <MX_TIM3_Init+0xd8>)
 800468a:	f000 fc67 	bl	8004f5c <HAL_TIM_MspPostInit>

}
 800468e:	bf00      	nop
 8004690:	3728      	adds	r7, #40	; 0x28
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	200022b0 	.word	0x200022b0
 800469c:	40000400 	.word	0x40000400
 80046a0:	0800e390 	.word	0x0800e390

080046a4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b08a      	sub	sp, #40	; 0x28
 80046a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046aa:	f107 0320 	add.w	r3, r7, #32
 80046ae:	2200      	movs	r2, #0
 80046b0:	601a      	str	r2, [r3, #0]
 80046b2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80046b4:	1d3b      	adds	r3, r7, #4
 80046b6:	2200      	movs	r2, #0
 80046b8:	601a      	str	r2, [r3, #0]
 80046ba:	605a      	str	r2, [r3, #4]
 80046bc:	609a      	str	r2, [r3, #8]
 80046be:	60da      	str	r2, [r3, #12]
 80046c0:	611a      	str	r2, [r3, #16]
 80046c2:	615a      	str	r2, [r3, #20]
 80046c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80046c6:	4b3a      	ldr	r3, [pc, #232]	; (80047b0 <MX_TIM4_Init+0x10c>)
 80046c8:	4a3a      	ldr	r2, [pc, #232]	; (80047b4 <MX_TIM4_Init+0x110>)
 80046ca:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 80046cc:	4b38      	ldr	r3, [pc, #224]	; (80047b0 <MX_TIM4_Init+0x10c>)
 80046ce:	2253      	movs	r2, #83	; 0x53
 80046d0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046d2:	4b37      	ldr	r3, [pc, #220]	; (80047b0 <MX_TIM4_Init+0x10c>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7000;
 80046d8:	4b35      	ldr	r3, [pc, #212]	; (80047b0 <MX_TIM4_Init+0x10c>)
 80046da:	f641 3258 	movw	r2, #7000	; 0x1b58
 80046de:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046e0:	4b33      	ldr	r3, [pc, #204]	; (80047b0 <MX_TIM4_Init+0x10c>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80046e6:	4b32      	ldr	r3, [pc, #200]	; (80047b0 <MX_TIM4_Init+0x10c>)
 80046e8:	2280      	movs	r2, #128	; 0x80
 80046ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80046ec:	4830      	ldr	r0, [pc, #192]	; (80047b0 <MX_TIM4_Init+0x10c>)
 80046ee:	f003 fc9c 	bl	800802a <HAL_TIM_PWM_Init>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d003      	beq.n	8004700 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 80046f8:	21ee      	movs	r1, #238	; 0xee
 80046fa:	482f      	ldr	r0, [pc, #188]	; (80047b8 <MX_TIM4_Init+0x114>)
 80046fc:	f7ff fc52 	bl	8003fa4 <_Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004700:	2300      	movs	r3, #0
 8004702:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004704:	2300      	movs	r3, #0
 8004706:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004708:	f107 0320 	add.w	r3, r7, #32
 800470c:	4619      	mov	r1, r3
 800470e:	4828      	ldr	r0, [pc, #160]	; (80047b0 <MX_TIM4_Init+0x10c>)
 8004710:	f004 f902 	bl	8008918 <HAL_TIMEx_MasterConfigSynchronization>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d003      	beq.n	8004722 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800471a:	21f4      	movs	r1, #244	; 0xf4
 800471c:	4826      	ldr	r0, [pc, #152]	; (80047b8 <MX_TIM4_Init+0x114>)
 800471e:	f7ff fc41 	bl	8003fa4 <_Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004722:	2360      	movs	r3, #96	; 0x60
 8004724:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8004726:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800472a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800472c:	2300      	movs	r3, #0
 800472e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004730:	2300      	movs	r3, #0
 8004732:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004734:	1d3b      	adds	r3, r7, #4
 8004736:	2200      	movs	r2, #0
 8004738:	4619      	mov	r1, r3
 800473a:	481d      	ldr	r0, [pc, #116]	; (80047b0 <MX_TIM4_Init+0x10c>)
 800473c:	f003 fd8c 	bl	8008258 <HAL_TIM_PWM_ConfigChannel>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d003      	beq.n	800474e <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8004746:	21fc      	movs	r1, #252	; 0xfc
 8004748:	481b      	ldr	r0, [pc, #108]	; (80047b8 <MX_TIM4_Init+0x114>)
 800474a:	f7ff fc2b 	bl	8003fa4 <_Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800474e:	1d3b      	adds	r3, r7, #4
 8004750:	2204      	movs	r2, #4
 8004752:	4619      	mov	r1, r3
 8004754:	4816      	ldr	r0, [pc, #88]	; (80047b0 <MX_TIM4_Init+0x10c>)
 8004756:	f003 fd7f 	bl	8008258 <HAL_TIM_PWM_ConfigChannel>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d004      	beq.n	800476a <MX_TIM4_Init+0xc6>
  {
    Error_Handler();
 8004760:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004764:	4814      	ldr	r0, [pc, #80]	; (80047b8 <MX_TIM4_Init+0x114>)
 8004766:	f7ff fc1d 	bl	8003fa4 <_Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800476a:	1d3b      	adds	r3, r7, #4
 800476c:	2208      	movs	r2, #8
 800476e:	4619      	mov	r1, r3
 8004770:	480f      	ldr	r0, [pc, #60]	; (80047b0 <MX_TIM4_Init+0x10c>)
 8004772:	f003 fd71 	bl	8008258 <HAL_TIM_PWM_ConfigChannel>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d004      	beq.n	8004786 <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 800477c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8004780:	480d      	ldr	r0, [pc, #52]	; (80047b8 <MX_TIM4_Init+0x114>)
 8004782:	f7ff fc0f 	bl	8003fa4 <_Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004786:	1d3b      	adds	r3, r7, #4
 8004788:	220c      	movs	r2, #12
 800478a:	4619      	mov	r1, r3
 800478c:	4808      	ldr	r0, [pc, #32]	; (80047b0 <MX_TIM4_Init+0x10c>)
 800478e:	f003 fd63 	bl	8008258 <HAL_TIM_PWM_ConfigChannel>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d004      	beq.n	80047a2 <MX_TIM4_Init+0xfe>
  {
    Error_Handler();
 8004798:	f44f 7184 	mov.w	r1, #264	; 0x108
 800479c:	4806      	ldr	r0, [pc, #24]	; (80047b8 <MX_TIM4_Init+0x114>)
 800479e:	f7ff fc01 	bl	8003fa4 <_Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80047a2:	4803      	ldr	r0, [pc, #12]	; (80047b0 <MX_TIM4_Init+0x10c>)
 80047a4:	f000 fbda 	bl	8004f5c <HAL_TIM_MspPostInit>

}
 80047a8:	bf00      	nop
 80047aa:	3728      	adds	r7, #40	; 0x28
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	200022f8 	.word	0x200022f8
 80047b4:	40000800 	.word	0x40000800
 80047b8:	0800e390 	.word	0x0800e390

080047bc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b092      	sub	sp, #72	; 0x48
 80047c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80047c6:	2200      	movs	r2, #0
 80047c8:	601a      	str	r2, [r3, #0]
 80047ca:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80047cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047d0:	2200      	movs	r2, #0
 80047d2:	601a      	str	r2, [r3, #0]
 80047d4:	605a      	str	r2, [r3, #4]
 80047d6:	609a      	str	r2, [r3, #8]
 80047d8:	60da      	str	r2, [r3, #12]
 80047da:	611a      	str	r2, [r3, #16]
 80047dc:	615a      	str	r2, [r3, #20]
 80047de:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80047e0:	1d3b      	adds	r3, r7, #4
 80047e2:	2220      	movs	r2, #32
 80047e4:	2100      	movs	r1, #0
 80047e6:	4618      	mov	r0, r3
 80047e8:	f007 fc02 	bl	800bff0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80047ec:	4b48      	ldr	r3, [pc, #288]	; (8004910 <MX_TIM8_Init+0x154>)
 80047ee:	4a49      	ldr	r2, [pc, #292]	; (8004914 <MX_TIM8_Init+0x158>)
 80047f0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 83;
 80047f2:	4b47      	ldr	r3, [pc, #284]	; (8004910 <MX_TIM8_Init+0x154>)
 80047f4:	2253      	movs	r2, #83	; 0x53
 80047f6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047f8:	4b45      	ldr	r3, [pc, #276]	; (8004910 <MX_TIM8_Init+0x154>)
 80047fa:	2200      	movs	r2, #0
 80047fc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7000;
 80047fe:	4b44      	ldr	r3, [pc, #272]	; (8004910 <MX_TIM8_Init+0x154>)
 8004800:	f641 3258 	movw	r2, #7000	; 0x1b58
 8004804:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004806:	4b42      	ldr	r3, [pc, #264]	; (8004910 <MX_TIM8_Init+0x154>)
 8004808:	2200      	movs	r2, #0
 800480a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800480c:	4b40      	ldr	r3, [pc, #256]	; (8004910 <MX_TIM8_Init+0x154>)
 800480e:	2200      	movs	r2, #0
 8004810:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004812:	4b3f      	ldr	r3, [pc, #252]	; (8004910 <MX_TIM8_Init+0x154>)
 8004814:	2200      	movs	r2, #0
 8004816:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8004818:	483d      	ldr	r0, [pc, #244]	; (8004910 <MX_TIM8_Init+0x154>)
 800481a:	f003 fc06 	bl	800802a <HAL_TIM_PWM_Init>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d004      	beq.n	800482e <MX_TIM8_Init+0x72>
  {
    Error_Handler();
 8004824:	f44f 7194 	mov.w	r1, #296	; 0x128
 8004828:	483b      	ldr	r0, [pc, #236]	; (8004918 <MX_TIM8_Init+0x15c>)
 800482a:	f7ff fbbb 	bl	8003fa4 <_Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800482e:	2300      	movs	r3, #0
 8004830:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004832:	2300      	movs	r3, #0
 8004834:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004836:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800483a:	4619      	mov	r1, r3
 800483c:	4834      	ldr	r0, [pc, #208]	; (8004910 <MX_TIM8_Init+0x154>)
 800483e:	f004 f86b 	bl	8008918 <HAL_TIMEx_MasterConfigSynchronization>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d004      	beq.n	8004852 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8004848:	f44f 7197 	mov.w	r1, #302	; 0x12e
 800484c:	4832      	ldr	r0, [pc, #200]	; (8004918 <MX_TIM8_Init+0x15c>)
 800484e:	f7ff fba9 	bl	8003fa4 <_Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004852:	2360      	movs	r3, #96	; 0x60
 8004854:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8004856:	2300      	movs	r3, #0
 8004858:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800485a:	2300      	movs	r3, #0
 800485c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800485e:	2300      	movs	r3, #0
 8004860:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004862:	2300      	movs	r3, #0
 8004864:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004866:	2300      	movs	r3, #0
 8004868:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800486a:	2300      	movs	r3, #0
 800486c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800486e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004872:	2200      	movs	r2, #0
 8004874:	4619      	mov	r1, r3
 8004876:	4826      	ldr	r0, [pc, #152]	; (8004910 <MX_TIM8_Init+0x154>)
 8004878:	f003 fcee 	bl	8008258 <HAL_TIM_PWM_ConfigChannel>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d004      	beq.n	800488c <MX_TIM8_Init+0xd0>
  {
    Error_Handler();
 8004882:	f240 1139 	movw	r1, #313	; 0x139
 8004886:	4824      	ldr	r0, [pc, #144]	; (8004918 <MX_TIM8_Init+0x15c>)
 8004888:	f7ff fb8c 	bl	8003fa4 <_Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800488c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004890:	2204      	movs	r2, #4
 8004892:	4619      	mov	r1, r3
 8004894:	481e      	ldr	r0, [pc, #120]	; (8004910 <MX_TIM8_Init+0x154>)
 8004896:	f003 fcdf 	bl	8008258 <HAL_TIM_PWM_ConfigChannel>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d004      	beq.n	80048aa <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 80048a0:	f240 113d 	movw	r1, #317	; 0x13d
 80048a4:	481c      	ldr	r0, [pc, #112]	; (8004918 <MX_TIM8_Init+0x15c>)
 80048a6:	f7ff fb7d 	bl	8003fa4 <_Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80048aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048ae:	220c      	movs	r2, #12
 80048b0:	4619      	mov	r1, r3
 80048b2:	4817      	ldr	r0, [pc, #92]	; (8004910 <MX_TIM8_Init+0x154>)
 80048b4:	f003 fcd0 	bl	8008258 <HAL_TIM_PWM_ConfigChannel>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d004      	beq.n	80048c8 <MX_TIM8_Init+0x10c>
  {
    Error_Handler();
 80048be:	f240 1141 	movw	r1, #321	; 0x141
 80048c2:	4815      	ldr	r0, [pc, #84]	; (8004918 <MX_TIM8_Init+0x15c>)
 80048c4:	f7ff fb6e 	bl	8003fa4 <_Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80048c8:	2300      	movs	r3, #0
 80048ca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80048cc:	2300      	movs	r3, #0
 80048ce:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80048d0:	2300      	movs	r3, #0
 80048d2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80048d4:	2300      	movs	r3, #0
 80048d6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80048d8:	2300      	movs	r3, #0
 80048da:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80048dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80048e0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80048e2:	2300      	movs	r3, #0
 80048e4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80048e6:	1d3b      	adds	r3, r7, #4
 80048e8:	4619      	mov	r1, r3
 80048ea:	4809      	ldr	r0, [pc, #36]	; (8004910 <MX_TIM8_Init+0x154>)
 80048ec:	f004 f890 	bl	8008a10 <HAL_TIMEx_ConfigBreakDeadTime>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d004      	beq.n	8004900 <MX_TIM8_Init+0x144>
  {
    Error_Handler();
 80048f6:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 80048fa:	4807      	ldr	r0, [pc, #28]	; (8004918 <MX_TIM8_Init+0x15c>)
 80048fc:	f7ff fb52 	bl	8003fa4 <_Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8004900:	4803      	ldr	r0, [pc, #12]	; (8004910 <MX_TIM8_Init+0x154>)
 8004902:	f000 fb2b 	bl	8004f5c <HAL_TIM_MspPostInit>

}
 8004906:	bf00      	nop
 8004908:	3748      	adds	r7, #72	; 0x48
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	20002340 	.word	0x20002340
 8004914:	40010400 	.word	0x40010400
 8004918:	0800e390 	.word	0x0800e390

0800491c <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b088      	sub	sp, #32
 8004920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004922:	1d3b      	adds	r3, r7, #4
 8004924:	2200      	movs	r2, #0
 8004926:	601a      	str	r2, [r3, #0]
 8004928:	605a      	str	r2, [r3, #4]
 800492a:	609a      	str	r2, [r3, #8]
 800492c:	60da      	str	r2, [r3, #12]
 800492e:	611a      	str	r2, [r3, #16]
 8004930:	615a      	str	r2, [r3, #20]
 8004932:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8004934:	4b24      	ldr	r3, [pc, #144]	; (80049c8 <MX_TIM9_Init+0xac>)
 8004936:	4a25      	ldr	r2, [pc, #148]	; (80049cc <MX_TIM9_Init+0xb0>)
 8004938:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 800493a:	4b23      	ldr	r3, [pc, #140]	; (80049c8 <MX_TIM9_Init+0xac>)
 800493c:	2200      	movs	r2, #0
 800493e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004940:	4b21      	ldr	r3, [pc, #132]	; (80049c8 <MX_TIM9_Init+0xac>)
 8004942:	2200      	movs	r2, #0
 8004944:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8004946:	4b20      	ldr	r3, [pc, #128]	; (80049c8 <MX_TIM9_Init+0xac>)
 8004948:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800494c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800494e:	4b1e      	ldr	r3, [pc, #120]	; (80049c8 <MX_TIM9_Init+0xac>)
 8004950:	2200      	movs	r2, #0
 8004952:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004954:	4b1c      	ldr	r3, [pc, #112]	; (80049c8 <MX_TIM9_Init+0xac>)
 8004956:	2200      	movs	r2, #0
 8004958:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800495a:	481b      	ldr	r0, [pc, #108]	; (80049c8 <MX_TIM9_Init+0xac>)
 800495c:	f003 fb65 	bl	800802a <HAL_TIM_PWM_Init>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d004      	beq.n	8004970 <MX_TIM9_Init+0x54>
  {
    Error_Handler();
 8004966:	f240 1169 	movw	r1, #361	; 0x169
 800496a:	4819      	ldr	r0, [pc, #100]	; (80049d0 <MX_TIM9_Init+0xb4>)
 800496c:	f7ff fb1a 	bl	8003fa4 <_Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004970:	2360      	movs	r3, #96	; 0x60
 8004972:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004974:	2300      	movs	r3, #0
 8004976:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004978:	2300      	movs	r3, #0
 800497a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800497c:	2300      	movs	r3, #0
 800497e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004980:	1d3b      	adds	r3, r7, #4
 8004982:	2200      	movs	r2, #0
 8004984:	4619      	mov	r1, r3
 8004986:	4810      	ldr	r0, [pc, #64]	; (80049c8 <MX_TIM9_Init+0xac>)
 8004988:	f003 fc66 	bl	8008258 <HAL_TIM_PWM_ConfigChannel>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d004      	beq.n	800499c <MX_TIM9_Init+0x80>
  {
    Error_Handler();
 8004992:	f240 1171 	movw	r1, #369	; 0x171
 8004996:	480e      	ldr	r0, [pc, #56]	; (80049d0 <MX_TIM9_Init+0xb4>)
 8004998:	f7ff fb04 	bl	8003fa4 <_Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800499c:	1d3b      	adds	r3, r7, #4
 800499e:	2204      	movs	r2, #4
 80049a0:	4619      	mov	r1, r3
 80049a2:	4809      	ldr	r0, [pc, #36]	; (80049c8 <MX_TIM9_Init+0xac>)
 80049a4:	f003 fc58 	bl	8008258 <HAL_TIM_PWM_ConfigChannel>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d004      	beq.n	80049b8 <MX_TIM9_Init+0x9c>
  {
    Error_Handler();
 80049ae:	f240 1175 	movw	r1, #373	; 0x175
 80049b2:	4807      	ldr	r0, [pc, #28]	; (80049d0 <MX_TIM9_Init+0xb4>)
 80049b4:	f7ff faf6 	bl	8003fa4 <_Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80049b8:	4803      	ldr	r0, [pc, #12]	; (80049c8 <MX_TIM9_Init+0xac>)
 80049ba:	f000 facf 	bl	8004f5c <HAL_TIM_MspPostInit>

}
 80049be:	bf00      	nop
 80049c0:	3720      	adds	r7, #32
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	20002388 	.word	0x20002388
 80049cc:	40014000 	.word	0x40014000
 80049d0:	0800e390 	.word	0x0800e390

080049d4 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b088      	sub	sp, #32
 80049d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80049da:	1d3b      	adds	r3, r7, #4
 80049dc:	2200      	movs	r2, #0
 80049de:	601a      	str	r2, [r3, #0]
 80049e0:	605a      	str	r2, [r3, #4]
 80049e2:	609a      	str	r2, [r3, #8]
 80049e4:	60da      	str	r2, [r3, #12]
 80049e6:	611a      	str	r2, [r3, #16]
 80049e8:	615a      	str	r2, [r3, #20]
 80049ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80049ec:	4b22      	ldr	r3, [pc, #136]	; (8004a78 <MX_TIM10_Init+0xa4>)
 80049ee:	4a23      	ldr	r2, [pc, #140]	; (8004a7c <MX_TIM10_Init+0xa8>)
 80049f0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80049f2:	4b21      	ldr	r3, [pc, #132]	; (8004a78 <MX_TIM10_Init+0xa4>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049f8:	4b1f      	ldr	r3, [pc, #124]	; (8004a78 <MX_TIM10_Init+0xa4>)
 80049fa:	2200      	movs	r2, #0
 80049fc:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80049fe:	4b1e      	ldr	r3, [pc, #120]	; (8004a78 <MX_TIM10_Init+0xa4>)
 8004a00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a04:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a06:	4b1c      	ldr	r3, [pc, #112]	; (8004a78 <MX_TIM10_Init+0xa4>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a0c:	4b1a      	ldr	r3, [pc, #104]	; (8004a78 <MX_TIM10_Init+0xa4>)
 8004a0e:	2200      	movs	r2, #0
 8004a10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8004a12:	4819      	ldr	r0, [pc, #100]	; (8004a78 <MX_TIM10_Init+0xa4>)
 8004a14:	f003 faba 	bl	8007f8c <HAL_TIM_Base_Init>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d004      	beq.n	8004a28 <MX_TIM10_Init+0x54>
  {
    Error_Handler();
 8004a1e:	f44f 71c9 	mov.w	r1, #402	; 0x192
 8004a22:	4817      	ldr	r0, [pc, #92]	; (8004a80 <MX_TIM10_Init+0xac>)
 8004a24:	f7ff fabe 	bl	8003fa4 <_Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8004a28:	4813      	ldr	r0, [pc, #76]	; (8004a78 <MX_TIM10_Init+0xa4>)
 8004a2a:	f003 fafe 	bl	800802a <HAL_TIM_PWM_Init>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d004      	beq.n	8004a3e <MX_TIM10_Init+0x6a>
  {
    Error_Handler();
 8004a34:	f44f 71cb 	mov.w	r1, #406	; 0x196
 8004a38:	4811      	ldr	r0, [pc, #68]	; (8004a80 <MX_TIM10_Init+0xac>)
 8004a3a:	f7ff fab3 	bl	8003fa4 <_Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004a3e:	2360      	movs	r3, #96	; 0x60
 8004a40:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004a42:	2300      	movs	r3, #0
 8004a44:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a46:	2300      	movs	r3, #0
 8004a48:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004a4e:	1d3b      	adds	r3, r7, #4
 8004a50:	2200      	movs	r2, #0
 8004a52:	4619      	mov	r1, r3
 8004a54:	4808      	ldr	r0, [pc, #32]	; (8004a78 <MX_TIM10_Init+0xa4>)
 8004a56:	f003 fbff 	bl	8008258 <HAL_TIM_PWM_ConfigChannel>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d004      	beq.n	8004a6a <MX_TIM10_Init+0x96>
  {
    Error_Handler();
 8004a60:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8004a64:	4806      	ldr	r0, [pc, #24]	; (8004a80 <MX_TIM10_Init+0xac>)
 8004a66:	f7ff fa9d 	bl	8003fa4 <_Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8004a6a:	4803      	ldr	r0, [pc, #12]	; (8004a78 <MX_TIM10_Init+0xa4>)
 8004a6c:	f000 fa76 	bl	8004f5c <HAL_TIM_MspPostInit>

}
 8004a70:	bf00      	nop
 8004a72:	3720      	adds	r7, #32
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	200023d0 	.word	0x200023d0
 8004a7c:	40014400 	.word	0x40014400
 8004a80:	0800e390 	.word	0x0800e390

08004a84 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b088      	sub	sp, #32
 8004a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004a8a:	1d3b      	adds	r3, r7, #4
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	601a      	str	r2, [r3, #0]
 8004a90:	605a      	str	r2, [r3, #4]
 8004a92:	609a      	str	r2, [r3, #8]
 8004a94:	60da      	str	r2, [r3, #12]
 8004a96:	611a      	str	r2, [r3, #16]
 8004a98:	615a      	str	r2, [r3, #20]
 8004a9a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8004a9c:	4b22      	ldr	r3, [pc, #136]	; (8004b28 <MX_TIM11_Init+0xa4>)
 8004a9e:	4a23      	ldr	r2, [pc, #140]	; (8004b2c <MX_TIM11_Init+0xa8>)
 8004aa0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8004aa2:	4b21      	ldr	r3, [pc, #132]	; (8004b28 <MX_TIM11_Init+0xa4>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004aa8:	4b1f      	ldr	r3, [pc, #124]	; (8004b28 <MX_TIM11_Init+0xa4>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8004aae:	4b1e      	ldr	r3, [pc, #120]	; (8004b28 <MX_TIM11_Init+0xa4>)
 8004ab0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ab4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ab6:	4b1c      	ldr	r3, [pc, #112]	; (8004b28 <MX_TIM11_Init+0xa4>)
 8004ab8:	2200      	movs	r2, #0
 8004aba:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004abc:	4b1a      	ldr	r3, [pc, #104]	; (8004b28 <MX_TIM11_Init+0xa4>)
 8004abe:	2200      	movs	r2, #0
 8004ac0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8004ac2:	4819      	ldr	r0, [pc, #100]	; (8004b28 <MX_TIM11_Init+0xa4>)
 8004ac4:	f003 fa62 	bl	8007f8c <HAL_TIM_Base_Init>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d004      	beq.n	8004ad8 <MX_TIM11_Init+0x54>
  {
    Error_Handler();
 8004ace:	f240 11bb 	movw	r1, #443	; 0x1bb
 8004ad2:	4817      	ldr	r0, [pc, #92]	; (8004b30 <MX_TIM11_Init+0xac>)
 8004ad4:	f7ff fa66 	bl	8003fa4 <_Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8004ad8:	4813      	ldr	r0, [pc, #76]	; (8004b28 <MX_TIM11_Init+0xa4>)
 8004ada:	f003 faa6 	bl	800802a <HAL_TIM_PWM_Init>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d004      	beq.n	8004aee <MX_TIM11_Init+0x6a>
  {
    Error_Handler();
 8004ae4:	f240 11bf 	movw	r1, #447	; 0x1bf
 8004ae8:	4811      	ldr	r0, [pc, #68]	; (8004b30 <MX_TIM11_Init+0xac>)
 8004aea:	f7ff fa5b 	bl	8003fa4 <_Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004aee:	2360      	movs	r3, #96	; 0x60
 8004af0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004af2:	2300      	movs	r3, #0
 8004af4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004af6:	2300      	movs	r3, #0
 8004af8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004afa:	2300      	movs	r3, #0
 8004afc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004afe:	1d3b      	adds	r3, r7, #4
 8004b00:	2200      	movs	r2, #0
 8004b02:	4619      	mov	r1, r3
 8004b04:	4808      	ldr	r0, [pc, #32]	; (8004b28 <MX_TIM11_Init+0xa4>)
 8004b06:	f003 fba7 	bl	8008258 <HAL_TIM_PWM_ConfigChannel>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d004      	beq.n	8004b1a <MX_TIM11_Init+0x96>
  {
    Error_Handler();
 8004b10:	f240 11c7 	movw	r1, #455	; 0x1c7
 8004b14:	4806      	ldr	r0, [pc, #24]	; (8004b30 <MX_TIM11_Init+0xac>)
 8004b16:	f7ff fa45 	bl	8003fa4 <_Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8004b1a:	4803      	ldr	r0, [pc, #12]	; (8004b28 <MX_TIM11_Init+0xa4>)
 8004b1c:	f000 fa1e 	bl	8004f5c <HAL_TIM_MspPostInit>

}
 8004b20:	bf00      	nop
 8004b22:	3720      	adds	r7, #32
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	20002418 	.word	0x20002418
 8004b2c:	40014800 	.word	0x40014800
 8004b30:	0800e390 	.word	0x0800e390

08004b34 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b088      	sub	sp, #32
 8004b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004b3a:	1d3b      	adds	r3, r7, #4
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	601a      	str	r2, [r3, #0]
 8004b40:	605a      	str	r2, [r3, #4]
 8004b42:	609a      	str	r2, [r3, #8]
 8004b44:	60da      	str	r2, [r3, #12]
 8004b46:	611a      	str	r2, [r3, #16]
 8004b48:	615a      	str	r2, [r3, #20]
 8004b4a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8004b4c:	4b24      	ldr	r3, [pc, #144]	; (8004be0 <MX_TIM12_Init+0xac>)
 8004b4e:	4a25      	ldr	r2, [pc, #148]	; (8004be4 <MX_TIM12_Init+0xb0>)
 8004b50:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8004b52:	4b23      	ldr	r3, [pc, #140]	; (8004be0 <MX_TIM12_Init+0xac>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b58:	4b21      	ldr	r3, [pc, #132]	; (8004be0 <MX_TIM12_Init+0xac>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8004b5e:	4b20      	ldr	r3, [pc, #128]	; (8004be0 <MX_TIM12_Init+0xac>)
 8004b60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b64:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b66:	4b1e      	ldr	r3, [pc, #120]	; (8004be0 <MX_TIM12_Init+0xac>)
 8004b68:	2200      	movs	r2, #0
 8004b6a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b6c:	4b1c      	ldr	r3, [pc, #112]	; (8004be0 <MX_TIM12_Init+0xac>)
 8004b6e:	2200      	movs	r2, #0
 8004b70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8004b72:	481b      	ldr	r0, [pc, #108]	; (8004be0 <MX_TIM12_Init+0xac>)
 8004b74:	f003 fa59 	bl	800802a <HAL_TIM_PWM_Init>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d004      	beq.n	8004b88 <MX_TIM12_Init+0x54>
  {
    Error_Handler();
 8004b7e:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 8004b82:	4819      	ldr	r0, [pc, #100]	; (8004be8 <MX_TIM12_Init+0xb4>)
 8004b84:	f7ff fa0e 	bl	8003fa4 <_Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004b88:	2360      	movs	r3, #96	; 0x60
 8004b8a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004b90:	2300      	movs	r3, #0
 8004b92:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004b94:	2300      	movs	r3, #0
 8004b96:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004b98:	1d3b      	adds	r3, r7, #4
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	4810      	ldr	r0, [pc, #64]	; (8004be0 <MX_TIM12_Init+0xac>)
 8004ba0:	f003 fb5a 	bl	8008258 <HAL_TIM_PWM_ConfigChannel>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d004      	beq.n	8004bb4 <MX_TIM12_Init+0x80>
  {
    Error_Handler();
 8004baa:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 8004bae:	480e      	ldr	r0, [pc, #56]	; (8004be8 <MX_TIM12_Init+0xb4>)
 8004bb0:	f7ff f9f8 	bl	8003fa4 <_Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004bb4:	1d3b      	adds	r3, r7, #4
 8004bb6:	2204      	movs	r2, #4
 8004bb8:	4619      	mov	r1, r3
 8004bba:	4809      	ldr	r0, [pc, #36]	; (8004be0 <MX_TIM12_Init+0xac>)
 8004bbc:	f003 fb4c 	bl	8008258 <HAL_TIM_PWM_ConfigChannel>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d004      	beq.n	8004bd0 <MX_TIM12_Init+0x9c>
  {
    Error_Handler();
 8004bc6:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8004bca:	4807      	ldr	r0, [pc, #28]	; (8004be8 <MX_TIM12_Init+0xb4>)
 8004bcc:	f7ff f9ea 	bl	8003fa4 <_Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8004bd0:	4803      	ldr	r0, [pc, #12]	; (8004be0 <MX_TIM12_Init+0xac>)
 8004bd2:	f000 f9c3 	bl	8004f5c <HAL_TIM_MspPostInit>

}
 8004bd6:	bf00      	nop
 8004bd8:	3720      	adds	r7, #32
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	20002460 	.word	0x20002460
 8004be4:	40001800 	.word	0x40001800
 8004be8:	0800e390 	.word	0x0800e390

08004bec <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b088      	sub	sp, #32
 8004bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004bf2:	1d3b      	adds	r3, r7, #4
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	601a      	str	r2, [r3, #0]
 8004bf8:	605a      	str	r2, [r3, #4]
 8004bfa:	609a      	str	r2, [r3, #8]
 8004bfc:	60da      	str	r2, [r3, #12]
 8004bfe:	611a      	str	r2, [r3, #16]
 8004c00:	615a      	str	r2, [r3, #20]
 8004c02:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004c04:	4b22      	ldr	r3, [pc, #136]	; (8004c90 <MX_TIM13_Init+0xa4>)
 8004c06:	4a23      	ldr	r2, [pc, #140]	; (8004c94 <MX_TIM13_Init+0xa8>)
 8004c08:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8004c0a:	4b21      	ldr	r3, [pc, #132]	; (8004c90 <MX_TIM13_Init+0xa4>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c10:	4b1f      	ldr	r3, [pc, #124]	; (8004c90 <MX_TIM13_Init+0xa4>)
 8004c12:	2200      	movs	r2, #0
 8004c14:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8004c16:	4b1e      	ldr	r3, [pc, #120]	; (8004c90 <MX_TIM13_Init+0xa4>)
 8004c18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c1c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c1e:	4b1c      	ldr	r3, [pc, #112]	; (8004c90 <MX_TIM13_Init+0xa4>)
 8004c20:	2200      	movs	r2, #0
 8004c22:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c24:	4b1a      	ldr	r3, [pc, #104]	; (8004c90 <MX_TIM13_Init+0xa4>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004c2a:	4819      	ldr	r0, [pc, #100]	; (8004c90 <MX_TIM13_Init+0xa4>)
 8004c2c:	f003 f9ae 	bl	8007f8c <HAL_TIM_Base_Init>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d004      	beq.n	8004c40 <MX_TIM13_Init+0x54>
  {
    Error_Handler();
 8004c36:	f240 210d 	movw	r1, #525	; 0x20d
 8004c3a:	4817      	ldr	r0, [pc, #92]	; (8004c98 <MX_TIM13_Init+0xac>)
 8004c3c:	f7ff f9b2 	bl	8003fa4 <_Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8004c40:	4813      	ldr	r0, [pc, #76]	; (8004c90 <MX_TIM13_Init+0xa4>)
 8004c42:	f003 f9f2 	bl	800802a <HAL_TIM_PWM_Init>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d004      	beq.n	8004c56 <MX_TIM13_Init+0x6a>
  {
    Error_Handler();
 8004c4c:	f240 2111 	movw	r1, #529	; 0x211
 8004c50:	4811      	ldr	r0, [pc, #68]	; (8004c98 <MX_TIM13_Init+0xac>)
 8004c52:	f7ff f9a7 	bl	8003fa4 <_Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004c56:	2360      	movs	r3, #96	; 0x60
 8004c58:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004c62:	2300      	movs	r3, #0
 8004c64:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004c66:	1d3b      	adds	r3, r7, #4
 8004c68:	2200      	movs	r2, #0
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	4808      	ldr	r0, [pc, #32]	; (8004c90 <MX_TIM13_Init+0xa4>)
 8004c6e:	f003 faf3 	bl	8008258 <HAL_TIM_PWM_ConfigChannel>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d004      	beq.n	8004c82 <MX_TIM13_Init+0x96>
  {
    Error_Handler();
 8004c78:	f240 2119 	movw	r1, #537	; 0x219
 8004c7c:	4806      	ldr	r0, [pc, #24]	; (8004c98 <MX_TIM13_Init+0xac>)
 8004c7e:	f7ff f991 	bl	8003fa4 <_Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8004c82:	4803      	ldr	r0, [pc, #12]	; (8004c90 <MX_TIM13_Init+0xa4>)
 8004c84:	f000 f96a 	bl	8004f5c <HAL_TIM_MspPostInit>

}
 8004c88:	bf00      	nop
 8004c8a:	3720      	adds	r7, #32
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	200024a8 	.word	0x200024a8
 8004c94:	40001c00 	.word	0x40001c00
 8004c98:	0800e390 	.word	0x0800e390

08004c9c <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b088      	sub	sp, #32
 8004ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004ca2:	1d3b      	adds	r3, r7, #4
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	601a      	str	r2, [r3, #0]
 8004ca8:	605a      	str	r2, [r3, #4]
 8004caa:	609a      	str	r2, [r3, #8]
 8004cac:	60da      	str	r2, [r3, #12]
 8004cae:	611a      	str	r2, [r3, #16]
 8004cb0:	615a      	str	r2, [r3, #20]
 8004cb2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8004cb4:	4b22      	ldr	r3, [pc, #136]	; (8004d40 <MX_TIM14_Init+0xa4>)
 8004cb6:	4a23      	ldr	r2, [pc, #140]	; (8004d44 <MX_TIM14_Init+0xa8>)
 8004cb8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8004cba:	4b21      	ldr	r3, [pc, #132]	; (8004d40 <MX_TIM14_Init+0xa4>)
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cc0:	4b1f      	ldr	r3, [pc, #124]	; (8004d40 <MX_TIM14_Init+0xa4>)
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8004cc6:	4b1e      	ldr	r3, [pc, #120]	; (8004d40 <MX_TIM14_Init+0xa4>)
 8004cc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ccc:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004cce:	4b1c      	ldr	r3, [pc, #112]	; (8004d40 <MX_TIM14_Init+0xa4>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004cd4:	4b1a      	ldr	r3, [pc, #104]	; (8004d40 <MX_TIM14_Init+0xa4>)
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004cda:	4819      	ldr	r0, [pc, #100]	; (8004d40 <MX_TIM14_Init+0xa4>)
 8004cdc:	f003 f956 	bl	8007f8c <HAL_TIM_Base_Init>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d004      	beq.n	8004cf0 <MX_TIM14_Init+0x54>
  {
    Error_Handler();
 8004ce6:	f240 2136 	movw	r1, #566	; 0x236
 8004cea:	4817      	ldr	r0, [pc, #92]	; (8004d48 <MX_TIM14_Init+0xac>)
 8004cec:	f7ff f95a 	bl	8003fa4 <_Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8004cf0:	4813      	ldr	r0, [pc, #76]	; (8004d40 <MX_TIM14_Init+0xa4>)
 8004cf2:	f003 f99a 	bl	800802a <HAL_TIM_PWM_Init>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d004      	beq.n	8004d06 <MX_TIM14_Init+0x6a>
  {
    Error_Handler();
 8004cfc:	f240 213a 	movw	r1, #570	; 0x23a
 8004d00:	4811      	ldr	r0, [pc, #68]	; (8004d48 <MX_TIM14_Init+0xac>)
 8004d02:	f7ff f94f 	bl	8003fa4 <_Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004d06:	2360      	movs	r3, #96	; 0x60
 8004d08:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004d12:	2300      	movs	r3, #0
 8004d14:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004d16:	1d3b      	adds	r3, r7, #4
 8004d18:	2200      	movs	r2, #0
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	4808      	ldr	r0, [pc, #32]	; (8004d40 <MX_TIM14_Init+0xa4>)
 8004d1e:	f003 fa9b 	bl	8008258 <HAL_TIM_PWM_ConfigChannel>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d004      	beq.n	8004d32 <MX_TIM14_Init+0x96>
  {
    Error_Handler();
 8004d28:	f240 2142 	movw	r1, #578	; 0x242
 8004d2c:	4806      	ldr	r0, [pc, #24]	; (8004d48 <MX_TIM14_Init+0xac>)
 8004d2e:	f7ff f939 	bl	8003fa4 <_Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8004d32:	4803      	ldr	r0, [pc, #12]	; (8004d40 <MX_TIM14_Init+0xa4>)
 8004d34:	f000 f912 	bl	8004f5c <HAL_TIM_MspPostInit>

}
 8004d38:	bf00      	nop
 8004d3a:	3720      	adds	r7, #32
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	200024f0 	.word	0x200024f0
 8004d44:	40002000 	.word	0x40002000
 8004d48:	0800e390 	.word	0x0800e390

08004d4c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b08b      	sub	sp, #44	; 0x2c
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a47      	ldr	r2, [pc, #284]	; (8004e78 <HAL_TIM_PWM_MspInit+0x12c>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d10e      	bne.n	8004d7c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004d5e:	2300      	movs	r3, #0
 8004d60:	627b      	str	r3, [r7, #36]	; 0x24
 8004d62:	4b46      	ldr	r3, [pc, #280]	; (8004e7c <HAL_TIM_PWM_MspInit+0x130>)
 8004d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d66:	4a45      	ldr	r2, [pc, #276]	; (8004e7c <HAL_TIM_PWM_MspInit+0x130>)
 8004d68:	f043 0301 	orr.w	r3, r3, #1
 8004d6c:	6453      	str	r3, [r2, #68]	; 0x44
 8004d6e:	4b43      	ldr	r3, [pc, #268]	; (8004e7c <HAL_TIM_PWM_MspInit+0x130>)
 8004d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	627b      	str	r3, [r7, #36]	; 0x24
 8004d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8004d7a:	e076      	b.n	8004e6a <HAL_TIM_PWM_MspInit+0x11e>
  else if(tim_pwmHandle->Instance==TIM2)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d84:	d10e      	bne.n	8004da4 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004d86:	2300      	movs	r3, #0
 8004d88:	623b      	str	r3, [r7, #32]
 8004d8a:	4b3c      	ldr	r3, [pc, #240]	; (8004e7c <HAL_TIM_PWM_MspInit+0x130>)
 8004d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8e:	4a3b      	ldr	r2, [pc, #236]	; (8004e7c <HAL_TIM_PWM_MspInit+0x130>)
 8004d90:	f043 0301 	orr.w	r3, r3, #1
 8004d94:	6413      	str	r3, [r2, #64]	; 0x40
 8004d96:	4b39      	ldr	r3, [pc, #228]	; (8004e7c <HAL_TIM_PWM_MspInit+0x130>)
 8004d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9a:	f003 0301 	and.w	r3, r3, #1
 8004d9e:	623b      	str	r3, [r7, #32]
 8004da0:	6a3b      	ldr	r3, [r7, #32]
}
 8004da2:	e062      	b.n	8004e6a <HAL_TIM_PWM_MspInit+0x11e>
  else if(tim_pwmHandle->Instance==TIM3)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a35      	ldr	r2, [pc, #212]	; (8004e80 <HAL_TIM_PWM_MspInit+0x134>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d10e      	bne.n	8004dcc <HAL_TIM_PWM_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004dae:	2300      	movs	r3, #0
 8004db0:	61fb      	str	r3, [r7, #28]
 8004db2:	4b32      	ldr	r3, [pc, #200]	; (8004e7c <HAL_TIM_PWM_MspInit+0x130>)
 8004db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db6:	4a31      	ldr	r2, [pc, #196]	; (8004e7c <HAL_TIM_PWM_MspInit+0x130>)
 8004db8:	f043 0302 	orr.w	r3, r3, #2
 8004dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8004dbe:	4b2f      	ldr	r3, [pc, #188]	; (8004e7c <HAL_TIM_PWM_MspInit+0x130>)
 8004dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	61fb      	str	r3, [r7, #28]
 8004dc8:	69fb      	ldr	r3, [r7, #28]
}
 8004dca:	e04e      	b.n	8004e6a <HAL_TIM_PWM_MspInit+0x11e>
  else if(tim_pwmHandle->Instance==TIM4)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a2c      	ldr	r2, [pc, #176]	; (8004e84 <HAL_TIM_PWM_MspInit+0x138>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d10e      	bne.n	8004df4 <HAL_TIM_PWM_MspInit+0xa8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	61bb      	str	r3, [r7, #24]
 8004dda:	4b28      	ldr	r3, [pc, #160]	; (8004e7c <HAL_TIM_PWM_MspInit+0x130>)
 8004ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dde:	4a27      	ldr	r2, [pc, #156]	; (8004e7c <HAL_TIM_PWM_MspInit+0x130>)
 8004de0:	f043 0304 	orr.w	r3, r3, #4
 8004de4:	6413      	str	r3, [r2, #64]	; 0x40
 8004de6:	4b25      	ldr	r3, [pc, #148]	; (8004e7c <HAL_TIM_PWM_MspInit+0x130>)
 8004de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dea:	f003 0304 	and.w	r3, r3, #4
 8004dee:	61bb      	str	r3, [r7, #24]
 8004df0:	69bb      	ldr	r3, [r7, #24]
}
 8004df2:	e03a      	b.n	8004e6a <HAL_TIM_PWM_MspInit+0x11e>
  else if(tim_pwmHandle->Instance==TIM8)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a23      	ldr	r2, [pc, #140]	; (8004e88 <HAL_TIM_PWM_MspInit+0x13c>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d10e      	bne.n	8004e1c <HAL_TIM_PWM_MspInit+0xd0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004dfe:	2300      	movs	r3, #0
 8004e00:	617b      	str	r3, [r7, #20]
 8004e02:	4b1e      	ldr	r3, [pc, #120]	; (8004e7c <HAL_TIM_PWM_MspInit+0x130>)
 8004e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e06:	4a1d      	ldr	r2, [pc, #116]	; (8004e7c <HAL_TIM_PWM_MspInit+0x130>)
 8004e08:	f043 0302 	orr.w	r3, r3, #2
 8004e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8004e0e:	4b1b      	ldr	r3, [pc, #108]	; (8004e7c <HAL_TIM_PWM_MspInit+0x130>)
 8004e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	617b      	str	r3, [r7, #20]
 8004e18:	697b      	ldr	r3, [r7, #20]
}
 8004e1a:	e026      	b.n	8004e6a <HAL_TIM_PWM_MspInit+0x11e>
  else if(tim_pwmHandle->Instance==TIM9)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a1a      	ldr	r2, [pc, #104]	; (8004e8c <HAL_TIM_PWM_MspInit+0x140>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d10e      	bne.n	8004e44 <HAL_TIM_PWM_MspInit+0xf8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8004e26:	2300      	movs	r3, #0
 8004e28:	613b      	str	r3, [r7, #16]
 8004e2a:	4b14      	ldr	r3, [pc, #80]	; (8004e7c <HAL_TIM_PWM_MspInit+0x130>)
 8004e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e2e:	4a13      	ldr	r2, [pc, #76]	; (8004e7c <HAL_TIM_PWM_MspInit+0x130>)
 8004e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e34:	6453      	str	r3, [r2, #68]	; 0x44
 8004e36:	4b11      	ldr	r3, [pc, #68]	; (8004e7c <HAL_TIM_PWM_MspInit+0x130>)
 8004e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e3e:	613b      	str	r3, [r7, #16]
 8004e40:	693b      	ldr	r3, [r7, #16]
}
 8004e42:	e012      	b.n	8004e6a <HAL_TIM_PWM_MspInit+0x11e>
  else if(tim_pwmHandle->Instance==TIM12)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a11      	ldr	r2, [pc, #68]	; (8004e90 <HAL_TIM_PWM_MspInit+0x144>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d10d      	bne.n	8004e6a <HAL_TIM_PWM_MspInit+0x11e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004e4e:	2300      	movs	r3, #0
 8004e50:	60fb      	str	r3, [r7, #12]
 8004e52:	4b0a      	ldr	r3, [pc, #40]	; (8004e7c <HAL_TIM_PWM_MspInit+0x130>)
 8004e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e56:	4a09      	ldr	r2, [pc, #36]	; (8004e7c <HAL_TIM_PWM_MspInit+0x130>)
 8004e58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e5e:	4b07      	ldr	r3, [pc, #28]	; (8004e7c <HAL_TIM_PWM_MspInit+0x130>)
 8004e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e66:	60fb      	str	r3, [r7, #12]
 8004e68:	68fb      	ldr	r3, [r7, #12]
}
 8004e6a:	bf00      	nop
 8004e6c:	372c      	adds	r7, #44	; 0x2c
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	40010000 	.word	0x40010000
 8004e7c:	40023800 	.word	0x40023800
 8004e80:	40000400 	.word	0x40000400
 8004e84:	40000800 	.word	0x40000800
 8004e88:	40010400 	.word	0x40010400
 8004e8c:	40014000 	.word	0x40014000
 8004e90:	40001800 	.word	0x40001800

08004e94 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b087      	sub	sp, #28
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a29      	ldr	r2, [pc, #164]	; (8004f48 <HAL_TIM_Base_MspInit+0xb4>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d10e      	bne.n	8004ec4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	617b      	str	r3, [r7, #20]
 8004eaa:	4b28      	ldr	r3, [pc, #160]	; (8004f4c <HAL_TIM_Base_MspInit+0xb8>)
 8004eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eae:	4a27      	ldr	r2, [pc, #156]	; (8004f4c <HAL_TIM_Base_MspInit+0xb8>)
 8004eb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8004eb6:	4b25      	ldr	r3, [pc, #148]	; (8004f4c <HAL_TIM_Base_MspInit+0xb8>)
 8004eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ebe:	617b      	str	r3, [r7, #20]
 8004ec0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8004ec2:	e03a      	b.n	8004f3a <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM11)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a21      	ldr	r2, [pc, #132]	; (8004f50 <HAL_TIM_Base_MspInit+0xbc>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d10e      	bne.n	8004eec <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004ece:	2300      	movs	r3, #0
 8004ed0:	613b      	str	r3, [r7, #16]
 8004ed2:	4b1e      	ldr	r3, [pc, #120]	; (8004f4c <HAL_TIM_Base_MspInit+0xb8>)
 8004ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed6:	4a1d      	ldr	r2, [pc, #116]	; (8004f4c <HAL_TIM_Base_MspInit+0xb8>)
 8004ed8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004edc:	6453      	str	r3, [r2, #68]	; 0x44
 8004ede:	4b1b      	ldr	r3, [pc, #108]	; (8004f4c <HAL_TIM_Base_MspInit+0xb8>)
 8004ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ee2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ee6:	613b      	str	r3, [r7, #16]
 8004ee8:	693b      	ldr	r3, [r7, #16]
}
 8004eea:	e026      	b.n	8004f3a <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM13)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a18      	ldr	r2, [pc, #96]	; (8004f54 <HAL_TIM_Base_MspInit+0xc0>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d10e      	bne.n	8004f14 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	60fb      	str	r3, [r7, #12]
 8004efa:	4b14      	ldr	r3, [pc, #80]	; (8004f4c <HAL_TIM_Base_MspInit+0xb8>)
 8004efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efe:	4a13      	ldr	r2, [pc, #76]	; (8004f4c <HAL_TIM_Base_MspInit+0xb8>)
 8004f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f04:	6413      	str	r3, [r2, #64]	; 0x40
 8004f06:	4b11      	ldr	r3, [pc, #68]	; (8004f4c <HAL_TIM_Base_MspInit+0xb8>)
 8004f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f0e:	60fb      	str	r3, [r7, #12]
 8004f10:	68fb      	ldr	r3, [r7, #12]
}
 8004f12:	e012      	b.n	8004f3a <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM14)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a0f      	ldr	r2, [pc, #60]	; (8004f58 <HAL_TIM_Base_MspInit+0xc4>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d10d      	bne.n	8004f3a <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004f1e:	2300      	movs	r3, #0
 8004f20:	60bb      	str	r3, [r7, #8]
 8004f22:	4b0a      	ldr	r3, [pc, #40]	; (8004f4c <HAL_TIM_Base_MspInit+0xb8>)
 8004f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f26:	4a09      	ldr	r2, [pc, #36]	; (8004f4c <HAL_TIM_Base_MspInit+0xb8>)
 8004f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8004f2e:	4b07      	ldr	r3, [pc, #28]	; (8004f4c <HAL_TIM_Base_MspInit+0xb8>)
 8004f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f36:	60bb      	str	r3, [r7, #8]
 8004f38:	68bb      	ldr	r3, [r7, #8]
}
 8004f3a:	bf00      	nop
 8004f3c:	371c      	adds	r7, #28
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	40014400 	.word	0x40014400
 8004f4c:	40023800 	.word	0x40023800
 8004f50:	40014800 	.word	0x40014800
 8004f54:	40001c00 	.word	0x40001c00
 8004f58:	40002000 	.word	0x40002000

08004f5c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b094      	sub	sp, #80	; 0x50
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f64:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004f68:	2200      	movs	r2, #0
 8004f6a:	601a      	str	r2, [r3, #0]
 8004f6c:	605a      	str	r2, [r3, #4]
 8004f6e:	609a      	str	r2, [r3, #8]
 8004f70:	60da      	str	r2, [r3, #12]
 8004f72:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4aa0      	ldr	r2, [pc, #640]	; (80051fc <HAL_TIM_MspPostInit+0x2a0>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d11f      	bne.n	8004fbe <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004f7e:	2300      	movs	r3, #0
 8004f80:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f82:	4b9f      	ldr	r3, [pc, #636]	; (8005200 <HAL_TIM_MspPostInit+0x2a4>)
 8004f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f86:	4a9e      	ldr	r2, [pc, #632]	; (8005200 <HAL_TIM_MspPostInit+0x2a4>)
 8004f88:	f043 0310 	orr.w	r3, r3, #16
 8004f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8004f8e:	4b9c      	ldr	r3, [pc, #624]	; (8005200 <HAL_TIM_MspPostInit+0x2a4>)
 8004f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f92:	f003 0310 	and.w	r3, r3, #16
 8004f96:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = CH6_Pin|CH7_Pin|CH8_Pin|CH9_Pin;
 8004f9a:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8004f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fa0:	2302      	movs	r3, #2
 8004fa2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004fac:	2301      	movs	r3, #1
 8004fae:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004fb0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	4893      	ldr	r0, [pc, #588]	; (8005204 <HAL_TIM_MspPostInit+0x2a8>)
 8004fb8:	f001 fa32 	bl	8006420 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8004fbc:	e1a4      	b.n	8005308 <HAL_TIM_MspPostInit+0x3ac>
  else if(timHandle->Instance==TIM2)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fc6:	d11e      	bne.n	8005006 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fc8:	2300      	movs	r3, #0
 8004fca:	637b      	str	r3, [r7, #52]	; 0x34
 8004fcc:	4b8c      	ldr	r3, [pc, #560]	; (8005200 <HAL_TIM_MspPostInit+0x2a4>)
 8004fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd0:	4a8b      	ldr	r2, [pc, #556]	; (8005200 <HAL_TIM_MspPostInit+0x2a4>)
 8004fd2:	f043 0301 	orr.w	r3, r3, #1
 8004fd6:	6313      	str	r3, [r2, #48]	; 0x30
 8004fd8:	4b89      	ldr	r3, [pc, #548]	; (8005200 <HAL_TIM_MspPostInit+0x2a4>)
 8004fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fdc:	f003 0301 	and.w	r3, r3, #1
 8004fe0:	637b      	str	r3, [r7, #52]	; 0x34
 8004fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Pin = CH1_Pin|CH2_Pin|CH3_Pin|CH4_Pin;
 8004fe4:	230f      	movs	r3, #15
 8004fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fe8:	2302      	movs	r3, #2
 8004fea:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fec:	2300      	movs	r3, #0
 8004fee:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ff8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	4882      	ldr	r0, [pc, #520]	; (8005208 <HAL_TIM_MspPostInit+0x2ac>)
 8005000:	f001 fa0e 	bl	8006420 <HAL_GPIO_Init>
}
 8005004:	e180      	b.n	8005308 <HAL_TIM_MspPostInit+0x3ac>
  else if(timHandle->Instance==TIM3)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a80      	ldr	r2, [pc, #512]	; (800520c <HAL_TIM_MspPostInit+0x2b0>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d13d      	bne.n	800508c <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005010:	2300      	movs	r3, #0
 8005012:	633b      	str	r3, [r7, #48]	; 0x30
 8005014:	4b7a      	ldr	r3, [pc, #488]	; (8005200 <HAL_TIM_MspPostInit+0x2a4>)
 8005016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005018:	4a79      	ldr	r2, [pc, #484]	; (8005200 <HAL_TIM_MspPostInit+0x2a4>)
 800501a:	f043 0302 	orr.w	r3, r3, #2
 800501e:	6313      	str	r3, [r2, #48]	; 0x30
 8005020:	4b77      	ldr	r3, [pc, #476]	; (8005200 <HAL_TIM_MspPostInit+0x2a4>)
 8005022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005024:	f003 0302 	and.w	r3, r3, #2
 8005028:	633b      	str	r3, [r7, #48]	; 0x30
 800502a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800502c:	2300      	movs	r3, #0
 800502e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005030:	4b73      	ldr	r3, [pc, #460]	; (8005200 <HAL_TIM_MspPostInit+0x2a4>)
 8005032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005034:	4a72      	ldr	r2, [pc, #456]	; (8005200 <HAL_TIM_MspPostInit+0x2a4>)
 8005036:	f043 0304 	orr.w	r3, r3, #4
 800503a:	6313      	str	r3, [r2, #48]	; 0x30
 800503c:	4b70      	ldr	r3, [pc, #448]	; (8005200 <HAL_TIM_MspPostInit+0x2a4>)
 800503e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005040:	f003 0304 	and.w	r3, r3, #4
 8005044:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = CH5_Pin;
 8005048:	2302      	movs	r3, #2
 800504a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800504c:	2302      	movs	r3, #2
 800504e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005050:	2300      	movs	r3, #0
 8005052:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005054:	2300      	movs	r3, #0
 8005056:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005058:	2302      	movs	r3, #2
 800505a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(CH5_GPIO_Port, &GPIO_InitStruct);
 800505c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005060:	4619      	mov	r1, r3
 8005062:	486b      	ldr	r0, [pc, #428]	; (8005210 <HAL_TIM_MspPostInit+0x2b4>)
 8005064:	f001 f9dc 	bl	8006420 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CH16_Pin;
 8005068:	f44f 7380 	mov.w	r3, #256	; 0x100
 800506c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800506e:	2302      	movs	r3, #2
 8005070:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005072:	2300      	movs	r3, #0
 8005074:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005076:	2300      	movs	r3, #0
 8005078:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800507a:	2302      	movs	r3, #2
 800507c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(CH16_GPIO_Port, &GPIO_InitStruct);
 800507e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005082:	4619      	mov	r1, r3
 8005084:	4863      	ldr	r0, [pc, #396]	; (8005214 <HAL_TIM_MspPostInit+0x2b8>)
 8005086:	f001 f9cb 	bl	8006420 <HAL_GPIO_Init>
}
 800508a:	e13d      	b.n	8005308 <HAL_TIM_MspPostInit+0x3ac>
  else if(timHandle->Instance==TIM4)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a61      	ldr	r2, [pc, #388]	; (8005218 <HAL_TIM_MspPostInit+0x2bc>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d11f      	bne.n	80050d6 <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005096:	2300      	movs	r3, #0
 8005098:	62bb      	str	r3, [r7, #40]	; 0x28
 800509a:	4b59      	ldr	r3, [pc, #356]	; (8005200 <HAL_TIM_MspPostInit+0x2a4>)
 800509c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509e:	4a58      	ldr	r2, [pc, #352]	; (8005200 <HAL_TIM_MspPostInit+0x2a4>)
 80050a0:	f043 0308 	orr.w	r3, r3, #8
 80050a4:	6313      	str	r3, [r2, #48]	; 0x30
 80050a6:	4b56      	ldr	r3, [pc, #344]	; (8005200 <HAL_TIM_MspPostInit+0x2a4>)
 80050a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050aa:	f003 0308 	and.w	r3, r3, #8
 80050ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80050b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = CH10_Pin|CH11_Pin|CH12_Pin|CH13_Pin;
 80050b2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80050b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050b8:	2302      	movs	r3, #2
 80050ba:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050bc:	2300      	movs	r3, #0
 80050be:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050c0:	2300      	movs	r3, #0
 80050c2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80050c4:	2302      	movs	r3, #2
 80050c6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80050c8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80050cc:	4619      	mov	r1, r3
 80050ce:	4853      	ldr	r0, [pc, #332]	; (800521c <HAL_TIM_MspPostInit+0x2c0>)
 80050d0:	f001 f9a6 	bl	8006420 <HAL_GPIO_Init>
}
 80050d4:	e118      	b.n	8005308 <HAL_TIM_MspPostInit+0x3ac>
  else if(timHandle->Instance==TIM8)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a51      	ldr	r2, [pc, #324]	; (8005220 <HAL_TIM_MspPostInit+0x2c4>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d11f      	bne.n	8005120 <HAL_TIM_MspPostInit+0x1c4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80050e0:	2300      	movs	r3, #0
 80050e2:	627b      	str	r3, [r7, #36]	; 0x24
 80050e4:	4b46      	ldr	r3, [pc, #280]	; (8005200 <HAL_TIM_MspPostInit+0x2a4>)
 80050e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e8:	4a45      	ldr	r2, [pc, #276]	; (8005200 <HAL_TIM_MspPostInit+0x2a4>)
 80050ea:	f043 0304 	orr.w	r3, r3, #4
 80050ee:	6313      	str	r3, [r2, #48]	; 0x30
 80050f0:	4b43      	ldr	r3, [pc, #268]	; (8005200 <HAL_TIM_MspPostInit+0x2a4>)
 80050f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f4:	f003 0304 	and.w	r3, r3, #4
 80050f8:	627b      	str	r3, [r7, #36]	; 0x24
 80050fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = CH14_Pin|CH15_Pin|CH17_Pin;
 80050fc:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8005100:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005102:	2302      	movs	r3, #2
 8005104:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005106:	2300      	movs	r3, #0
 8005108:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800510a:	2300      	movs	r3, #0
 800510c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800510e:	2303      	movs	r3, #3
 8005110:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005112:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005116:	4619      	mov	r1, r3
 8005118:	483e      	ldr	r0, [pc, #248]	; (8005214 <HAL_TIM_MspPostInit+0x2b8>)
 800511a:	f001 f981 	bl	8006420 <HAL_GPIO_Init>
}
 800511e:	e0f3      	b.n	8005308 <HAL_TIM_MspPostInit+0x3ac>
  else if(timHandle->Instance==TIM9)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a3f      	ldr	r2, [pc, #252]	; (8005224 <HAL_TIM_MspPostInit+0x2c8>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d11e      	bne.n	8005168 <HAL_TIM_MspPostInit+0x20c>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800512a:	2300      	movs	r3, #0
 800512c:	623b      	str	r3, [r7, #32]
 800512e:	4b34      	ldr	r3, [pc, #208]	; (8005200 <HAL_TIM_MspPostInit+0x2a4>)
 8005130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005132:	4a33      	ldr	r2, [pc, #204]	; (8005200 <HAL_TIM_MspPostInit+0x2a4>)
 8005134:	f043 0310 	orr.w	r3, r3, #16
 8005138:	6313      	str	r3, [r2, #48]	; 0x30
 800513a:	4b31      	ldr	r3, [pc, #196]	; (8005200 <HAL_TIM_MspPostInit+0x2a4>)
 800513c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513e:	f003 0310 	and.w	r3, r3, #16
 8005142:	623b      	str	r3, [r7, #32]
 8005144:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = FF2_1_Pin|FF2_2_Pin;
 8005146:	2360      	movs	r3, #96	; 0x60
 8005148:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800514a:	2302      	movs	r3, #2
 800514c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800514e:	2300      	movs	r3, #0
 8005150:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005152:	2300      	movs	r3, #0
 8005154:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8005156:	2303      	movs	r3, #3
 8005158:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800515a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800515e:	4619      	mov	r1, r3
 8005160:	4828      	ldr	r0, [pc, #160]	; (8005204 <HAL_TIM_MspPostInit+0x2a8>)
 8005162:	f001 f95d 	bl	8006420 <HAL_GPIO_Init>
}
 8005166:	e0cf      	b.n	8005308 <HAL_TIM_MspPostInit+0x3ac>
  else if(timHandle->Instance==TIM10)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a2e      	ldr	r2, [pc, #184]	; (8005228 <HAL_TIM_MspPostInit+0x2cc>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d11f      	bne.n	80051b2 <HAL_TIM_MspPostInit+0x256>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005172:	2300      	movs	r3, #0
 8005174:	61fb      	str	r3, [r7, #28]
 8005176:	4b22      	ldr	r3, [pc, #136]	; (8005200 <HAL_TIM_MspPostInit+0x2a4>)
 8005178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517a:	4a21      	ldr	r2, [pc, #132]	; (8005200 <HAL_TIM_MspPostInit+0x2a4>)
 800517c:	f043 0302 	orr.w	r3, r3, #2
 8005180:	6313      	str	r3, [r2, #48]	; 0x30
 8005182:	4b1f      	ldr	r3, [pc, #124]	; (8005200 <HAL_TIM_MspPostInit+0x2a4>)
 8005184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005186:	f003 0302 	and.w	r3, r3, #2
 800518a:	61fb      	str	r3, [r7, #28]
 800518c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = STEP1_FF3_Pin;
 800518e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005192:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005194:	2302      	movs	r3, #2
 8005196:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005198:	2300      	movs	r3, #0
 800519a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800519c:	2300      	movs	r3, #0
 800519e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80051a0:	2303      	movs	r3, #3
 80051a2:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(STEP1_FF3_GPIO_Port, &GPIO_InitStruct);
 80051a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80051a8:	4619      	mov	r1, r3
 80051aa:	4819      	ldr	r0, [pc, #100]	; (8005210 <HAL_TIM_MspPostInit+0x2b4>)
 80051ac:	f001 f938 	bl	8006420 <HAL_GPIO_Init>
}
 80051b0:	e0aa      	b.n	8005308 <HAL_TIM_MspPostInit+0x3ac>
  else if(timHandle->Instance==TIM11)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a1d      	ldr	r2, [pc, #116]	; (800522c <HAL_TIM_MspPostInit+0x2d0>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d139      	bne.n	8005230 <HAL_TIM_MspPostInit+0x2d4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051bc:	2300      	movs	r3, #0
 80051be:	61bb      	str	r3, [r7, #24]
 80051c0:	4b0f      	ldr	r3, [pc, #60]	; (8005200 <HAL_TIM_MspPostInit+0x2a4>)
 80051c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c4:	4a0e      	ldr	r2, [pc, #56]	; (8005200 <HAL_TIM_MspPostInit+0x2a4>)
 80051c6:	f043 0302 	orr.w	r3, r3, #2
 80051ca:	6313      	str	r3, [r2, #48]	; 0x30
 80051cc:	4b0c      	ldr	r3, [pc, #48]	; (8005200 <HAL_TIM_MspPostInit+0x2a4>)
 80051ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d0:	f003 0302 	and.w	r3, r3, #2
 80051d4:	61bb      	str	r3, [r7, #24]
 80051d6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = STEP2_FF4_Pin;
 80051d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051de:	2302      	movs	r3, #2
 80051e0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051e2:	2300      	movs	r3, #0
 80051e4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051e6:	2300      	movs	r3, #0
 80051e8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80051ea:	2303      	movs	r3, #3
 80051ec:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(STEP2_FF4_GPIO_Port, &GPIO_InitStruct);
 80051ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80051f2:	4619      	mov	r1, r3
 80051f4:	4806      	ldr	r0, [pc, #24]	; (8005210 <HAL_TIM_MspPostInit+0x2b4>)
 80051f6:	f001 f913 	bl	8006420 <HAL_GPIO_Init>
}
 80051fa:	e085      	b.n	8005308 <HAL_TIM_MspPostInit+0x3ac>
 80051fc:	40010000 	.word	0x40010000
 8005200:	40023800 	.word	0x40023800
 8005204:	40021000 	.word	0x40021000
 8005208:	40020000 	.word	0x40020000
 800520c:	40000400 	.word	0x40000400
 8005210:	40020400 	.word	0x40020400
 8005214:	40020800 	.word	0x40020800
 8005218:	40000800 	.word	0x40000800
 800521c:	40020c00 	.word	0x40020c00
 8005220:	40010400 	.word	0x40010400
 8005224:	40014000 	.word	0x40014000
 8005228:	40014400 	.word	0x40014400
 800522c:	40014800 	.word	0x40014800
  else if(timHandle->Instance==TIM12)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a36      	ldr	r2, [pc, #216]	; (8005310 <HAL_TIM_MspPostInit+0x3b4>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d11f      	bne.n	800527a <HAL_TIM_MspPostInit+0x31e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800523a:	2300      	movs	r3, #0
 800523c:	617b      	str	r3, [r7, #20]
 800523e:	4b35      	ldr	r3, [pc, #212]	; (8005314 <HAL_TIM_MspPostInit+0x3b8>)
 8005240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005242:	4a34      	ldr	r2, [pc, #208]	; (8005314 <HAL_TIM_MspPostInit+0x3b8>)
 8005244:	f043 0302 	orr.w	r3, r3, #2
 8005248:	6313      	str	r3, [r2, #48]	; 0x30
 800524a:	4b32      	ldr	r3, [pc, #200]	; (8005314 <HAL_TIM_MspPostInit+0x3b8>)
 800524c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	617b      	str	r3, [r7, #20]
 8005254:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = FF1_1_Pin|FF1_2_Pin;
 8005256:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800525a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800525c:	2302      	movs	r3, #2
 800525e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005260:	2300      	movs	r3, #0
 8005262:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005264:	2300      	movs	r3, #0
 8005266:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8005268:	2309      	movs	r3, #9
 800526a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800526c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005270:	4619      	mov	r1, r3
 8005272:	4829      	ldr	r0, [pc, #164]	; (8005318 <HAL_TIM_MspPostInit+0x3bc>)
 8005274:	f001 f8d4 	bl	8006420 <HAL_GPIO_Init>
}
 8005278:	e046      	b.n	8005308 <HAL_TIM_MspPostInit+0x3ac>
  else if(timHandle->Instance==TIM13)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a27      	ldr	r2, [pc, #156]	; (800531c <HAL_TIM_MspPostInit+0x3c0>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d11e      	bne.n	80052c2 <HAL_TIM_MspPostInit+0x366>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005284:	2300      	movs	r3, #0
 8005286:	613b      	str	r3, [r7, #16]
 8005288:	4b22      	ldr	r3, [pc, #136]	; (8005314 <HAL_TIM_MspPostInit+0x3b8>)
 800528a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800528c:	4a21      	ldr	r2, [pc, #132]	; (8005314 <HAL_TIM_MspPostInit+0x3b8>)
 800528e:	f043 0301 	orr.w	r3, r3, #1
 8005292:	6313      	str	r3, [r2, #48]	; 0x30
 8005294:	4b1f      	ldr	r3, [pc, #124]	; (8005314 <HAL_TIM_MspPostInit+0x3b8>)
 8005296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005298:	f003 0301 	and.w	r3, r3, #1
 800529c:	613b      	str	r3, [r7, #16]
 800529e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP3_FF5_Pin;
 80052a0:	2340      	movs	r3, #64	; 0x40
 80052a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052a4:	2302      	movs	r3, #2
 80052a6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052a8:	2300      	movs	r3, #0
 80052aa:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052ac:	2300      	movs	r3, #0
 80052ae:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80052b0:	2309      	movs	r3, #9
 80052b2:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(STEP3_FF5_GPIO_Port, &GPIO_InitStruct);
 80052b4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80052b8:	4619      	mov	r1, r3
 80052ba:	4819      	ldr	r0, [pc, #100]	; (8005320 <HAL_TIM_MspPostInit+0x3c4>)
 80052bc:	f001 f8b0 	bl	8006420 <HAL_GPIO_Init>
}
 80052c0:	e022      	b.n	8005308 <HAL_TIM_MspPostInit+0x3ac>
  else if(timHandle->Instance==TIM14)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a17      	ldr	r2, [pc, #92]	; (8005324 <HAL_TIM_MspPostInit+0x3c8>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d11d      	bne.n	8005308 <HAL_TIM_MspPostInit+0x3ac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052cc:	2300      	movs	r3, #0
 80052ce:	60fb      	str	r3, [r7, #12]
 80052d0:	4b10      	ldr	r3, [pc, #64]	; (8005314 <HAL_TIM_MspPostInit+0x3b8>)
 80052d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d4:	4a0f      	ldr	r2, [pc, #60]	; (8005314 <HAL_TIM_MspPostInit+0x3b8>)
 80052d6:	f043 0301 	orr.w	r3, r3, #1
 80052da:	6313      	str	r3, [r2, #48]	; 0x30
 80052dc:	4b0d      	ldr	r3, [pc, #52]	; (8005314 <HAL_TIM_MspPostInit+0x3b8>)
 80052de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e0:	f003 0301 	and.w	r3, r3, #1
 80052e4:	60fb      	str	r3, [r7, #12]
 80052e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP4_FF6_Pin;
 80052e8:	2380      	movs	r3, #128	; 0x80
 80052ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052ec:	2302      	movs	r3, #2
 80052ee:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052f0:	2300      	movs	r3, #0
 80052f2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052f4:	2300      	movs	r3, #0
 80052f6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 80052f8:	2309      	movs	r3, #9
 80052fa:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(STEP4_FF6_GPIO_Port, &GPIO_InitStruct);
 80052fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005300:	4619      	mov	r1, r3
 8005302:	4807      	ldr	r0, [pc, #28]	; (8005320 <HAL_TIM_MspPostInit+0x3c4>)
 8005304:	f001 f88c 	bl	8006420 <HAL_GPIO_Init>
}
 8005308:	bf00      	nop
 800530a:	3750      	adds	r7, #80	; 0x50
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}
 8005310:	40001800 	.word	0x40001800
 8005314:	40023800 	.word	0x40023800
 8005318:	40020400 	.word	0x40020400
 800531c:	40001c00 	.word	0x40001c00
 8005320:	40020000 	.word	0x40020000
 8005324:	40002000 	.word	0x40002000

08005328 <MX_UART5_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart3;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800532c:	4b12      	ldr	r3, [pc, #72]	; (8005378 <MX_UART5_Init+0x50>)
 800532e:	4a13      	ldr	r2, [pc, #76]	; (800537c <MX_UART5_Init+0x54>)
 8005330:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8005332:	4b11      	ldr	r3, [pc, #68]	; (8005378 <MX_UART5_Init+0x50>)
 8005334:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005338:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800533a:	4b0f      	ldr	r3, [pc, #60]	; (8005378 <MX_UART5_Init+0x50>)
 800533c:	2200      	movs	r2, #0
 800533e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8005340:	4b0d      	ldr	r3, [pc, #52]	; (8005378 <MX_UART5_Init+0x50>)
 8005342:	2200      	movs	r2, #0
 8005344:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8005346:	4b0c      	ldr	r3, [pc, #48]	; (8005378 <MX_UART5_Init+0x50>)
 8005348:	2200      	movs	r2, #0
 800534a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800534c:	4b0a      	ldr	r3, [pc, #40]	; (8005378 <MX_UART5_Init+0x50>)
 800534e:	220c      	movs	r2, #12
 8005350:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005352:	4b09      	ldr	r3, [pc, #36]	; (8005378 <MX_UART5_Init+0x50>)
 8005354:	2200      	movs	r2, #0
 8005356:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8005358:	4b07      	ldr	r3, [pc, #28]	; (8005378 <MX_UART5_Init+0x50>)
 800535a:	2200      	movs	r2, #0
 800535c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800535e:	4806      	ldr	r0, [pc, #24]	; (8005378 <MX_UART5_Init+0x50>)
 8005360:	f003 fba8 	bl	8008ab4 <HAL_UART_Init>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d003      	beq.n	8005372 <MX_UART5_Init+0x4a>
  {
    Error_Handler();
 800536a:	2134      	movs	r1, #52	; 0x34
 800536c:	4804      	ldr	r0, [pc, #16]	; (8005380 <MX_UART5_Init+0x58>)
 800536e:	f7fe fe19 	bl	8003fa4 <_Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8005372:	bf00      	nop
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	20002538 	.word	0x20002538
 800537c:	40005000 	.word	0x40005000
 8005380:	0800e3a4 	.word	0x0800e3a4

08005384 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005388:	4b12      	ldr	r3, [pc, #72]	; (80053d4 <MX_USART1_UART_Init+0x50>)
 800538a:	4a13      	ldr	r2, [pc, #76]	; (80053d8 <MX_USART1_UART_Init+0x54>)
 800538c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800538e:	4b11      	ldr	r3, [pc, #68]	; (80053d4 <MX_USART1_UART_Init+0x50>)
 8005390:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005394:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005396:	4b0f      	ldr	r3, [pc, #60]	; (80053d4 <MX_USART1_UART_Init+0x50>)
 8005398:	2200      	movs	r2, #0
 800539a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800539c:	4b0d      	ldr	r3, [pc, #52]	; (80053d4 <MX_USART1_UART_Init+0x50>)
 800539e:	2200      	movs	r2, #0
 80053a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80053a2:	4b0c      	ldr	r3, [pc, #48]	; (80053d4 <MX_USART1_UART_Init+0x50>)
 80053a4:	2200      	movs	r2, #0
 80053a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80053a8:	4b0a      	ldr	r3, [pc, #40]	; (80053d4 <MX_USART1_UART_Init+0x50>)
 80053aa:	220c      	movs	r2, #12
 80053ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80053ae:	4b09      	ldr	r3, [pc, #36]	; (80053d4 <MX_USART1_UART_Init+0x50>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80053b4:	4b07      	ldr	r3, [pc, #28]	; (80053d4 <MX_USART1_UART_Init+0x50>)
 80053b6:	2200      	movs	r2, #0
 80053b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80053ba:	4806      	ldr	r0, [pc, #24]	; (80053d4 <MX_USART1_UART_Init+0x50>)
 80053bc:	f003 fb7a 	bl	8008ab4 <HAL_UART_Init>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d003      	beq.n	80053ce <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 80053c6:	2151      	movs	r1, #81	; 0x51
 80053c8:	4804      	ldr	r0, [pc, #16]	; (80053dc <MX_USART1_UART_Init+0x58>)
 80053ca:	f7fe fdeb 	bl	8003fa4 <_Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 80053ce:	bf00      	nop
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	200025ac 	.word	0x200025ac
 80053d8:	40011000 	.word	0x40011000
 80053dc:	0800e3a4 	.word	0x0800e3a4

080053e0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80053e4:	4b12      	ldr	r3, [pc, #72]	; (8005430 <MX_USART3_UART_Init+0x50>)
 80053e6:	4a13      	ldr	r2, [pc, #76]	; (8005434 <MX_USART3_UART_Init+0x54>)
 80053e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 80053ea:	4b11      	ldr	r3, [pc, #68]	; (8005430 <MX_USART3_UART_Init+0x50>)
 80053ec:	4a12      	ldr	r2, [pc, #72]	; (8005438 <MX_USART3_UART_Init+0x58>)
 80053ee:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80053f0:	4b0f      	ldr	r3, [pc, #60]	; (8005430 <MX_USART3_UART_Init+0x50>)
 80053f2:	2200      	movs	r2, #0
 80053f4:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_2;
 80053f6:	4b0e      	ldr	r3, [pc, #56]	; (8005430 <MX_USART3_UART_Init+0x50>)
 80053f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80053fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 80053fe:	4b0c      	ldr	r3, [pc, #48]	; (8005430 <MX_USART3_UART_Init+0x50>)
 8005400:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005404:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005406:	4b0a      	ldr	r3, [pc, #40]	; (8005430 <MX_USART3_UART_Init+0x50>)
 8005408:	220c      	movs	r2, #12
 800540a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800540c:	4b08      	ldr	r3, [pc, #32]	; (8005430 <MX_USART3_UART_Init+0x50>)
 800540e:	2200      	movs	r2, #0
 8005410:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005412:	4b07      	ldr	r3, [pc, #28]	; (8005430 <MX_USART3_UART_Init+0x50>)
 8005414:	2200      	movs	r2, #0
 8005416:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005418:	4805      	ldr	r0, [pc, #20]	; (8005430 <MX_USART3_UART_Init+0x50>)
 800541a:	f003 fb4b 	bl	8008ab4 <HAL_UART_Init>
 800541e:	4603      	mov	r3, r0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d003      	beq.n	800542c <MX_USART3_UART_Init+0x4c>
  {
    Error_Handler();
 8005424:	216d      	movs	r1, #109	; 0x6d
 8005426:	4805      	ldr	r0, [pc, #20]	; (800543c <MX_USART3_UART_Init+0x5c>)
 8005428:	f7fe fdbc 	bl	8003fa4 <_Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800542c:	bf00      	nop
 800542e:	bd80      	pop	{r7, pc}
 8005430:	20002620 	.word	0x20002620
 8005434:	40004800 	.word	0x40004800
 8005438:	000186a0 	.word	0x000186a0
 800543c:	0800e3a4 	.word	0x0800e3a4

08005440 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b08e      	sub	sp, #56	; 0x38
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005448:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800544c:	2200      	movs	r2, #0
 800544e:	601a      	str	r2, [r3, #0]
 8005450:	605a      	str	r2, [r3, #4]
 8005452:	609a      	str	r2, [r3, #8]
 8005454:	60da      	str	r2, [r3, #12]
 8005456:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a67      	ldr	r2, [pc, #412]	; (80055fc <HAL_UART_MspInit+0x1bc>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d153      	bne.n	800550a <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8005462:	2300      	movs	r3, #0
 8005464:	623b      	str	r3, [r7, #32]
 8005466:	4b66      	ldr	r3, [pc, #408]	; (8005600 <HAL_UART_MspInit+0x1c0>)
 8005468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546a:	4a65      	ldr	r2, [pc, #404]	; (8005600 <HAL_UART_MspInit+0x1c0>)
 800546c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005470:	6413      	str	r3, [r2, #64]	; 0x40
 8005472:	4b63      	ldr	r3, [pc, #396]	; (8005600 <HAL_UART_MspInit+0x1c0>)
 8005474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005476:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800547a:	623b      	str	r3, [r7, #32]
 800547c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800547e:	2300      	movs	r3, #0
 8005480:	61fb      	str	r3, [r7, #28]
 8005482:	4b5f      	ldr	r3, [pc, #380]	; (8005600 <HAL_UART_MspInit+0x1c0>)
 8005484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005486:	4a5e      	ldr	r2, [pc, #376]	; (8005600 <HAL_UART_MspInit+0x1c0>)
 8005488:	f043 0304 	orr.w	r3, r3, #4
 800548c:	6313      	str	r3, [r2, #48]	; 0x30
 800548e:	4b5c      	ldr	r3, [pc, #368]	; (8005600 <HAL_UART_MspInit+0x1c0>)
 8005490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005492:	f003 0304 	and.w	r3, r3, #4
 8005496:	61fb      	str	r3, [r7, #28]
 8005498:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800549a:	2300      	movs	r3, #0
 800549c:	61bb      	str	r3, [r7, #24]
 800549e:	4b58      	ldr	r3, [pc, #352]	; (8005600 <HAL_UART_MspInit+0x1c0>)
 80054a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a2:	4a57      	ldr	r2, [pc, #348]	; (8005600 <HAL_UART_MspInit+0x1c0>)
 80054a4:	f043 0308 	orr.w	r3, r3, #8
 80054a8:	6313      	str	r3, [r2, #48]	; 0x30
 80054aa:	4b55      	ldr	r3, [pc, #340]	; (8005600 <HAL_UART_MspInit+0x1c0>)
 80054ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ae:	f003 0308 	and.w	r3, r3, #8
 80054b2:	61bb      	str	r3, [r7, #24]
 80054b4:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = CUSTOM_TX_Pin;
 80054b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054bc:	2302      	movs	r3, #2
 80054be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054c0:	2300      	movs	r3, #0
 80054c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054c4:	2303      	movs	r3, #3
 80054c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80054c8:	2308      	movs	r3, #8
 80054ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(CUSTOM_TX_GPIO_Port, &GPIO_InitStruct);
 80054cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054d0:	4619      	mov	r1, r3
 80054d2:	484c      	ldr	r0, [pc, #304]	; (8005604 <HAL_UART_MspInit+0x1c4>)
 80054d4:	f000 ffa4 	bl	8006420 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CUSTOM_RX_Pin;
 80054d8:	2304      	movs	r3, #4
 80054da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054dc:	2302      	movs	r3, #2
 80054de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054e0:	2300      	movs	r3, #0
 80054e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054e4:	2303      	movs	r3, #3
 80054e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80054e8:	2308      	movs	r3, #8
 80054ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(CUSTOM_RX_GPIO_Port, &GPIO_InitStruct);
 80054ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054f0:	4619      	mov	r1, r3
 80054f2:	4845      	ldr	r0, [pc, #276]	; (8005608 <HAL_UART_MspInit+0x1c8>)
 80054f4:	f000 ff94 	bl	8006420 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 3, 0);
 80054f8:	2200      	movs	r2, #0
 80054fa:	2103      	movs	r1, #3
 80054fc:	2035      	movs	r0, #53	; 0x35
 80054fe:	f000 fd98 	bl	8006032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8005502:	2035      	movs	r0, #53	; 0x35
 8005504:	f000 fdb1 	bl	800606a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8005508:	e074      	b.n	80055f4 <HAL_UART_MspInit+0x1b4>
  else if(uartHandle->Instance==USART1)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a3f      	ldr	r2, [pc, #252]	; (800560c <HAL_UART_MspInit+0x1cc>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d135      	bne.n	8005580 <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005514:	2300      	movs	r3, #0
 8005516:	617b      	str	r3, [r7, #20]
 8005518:	4b39      	ldr	r3, [pc, #228]	; (8005600 <HAL_UART_MspInit+0x1c0>)
 800551a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800551c:	4a38      	ldr	r2, [pc, #224]	; (8005600 <HAL_UART_MspInit+0x1c0>)
 800551e:	f043 0310 	orr.w	r3, r3, #16
 8005522:	6453      	str	r3, [r2, #68]	; 0x44
 8005524:	4b36      	ldr	r3, [pc, #216]	; (8005600 <HAL_UART_MspInit+0x1c0>)
 8005526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005528:	f003 0310 	and.w	r3, r3, #16
 800552c:	617b      	str	r3, [r7, #20]
 800552e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005530:	2300      	movs	r3, #0
 8005532:	613b      	str	r3, [r7, #16]
 8005534:	4b32      	ldr	r3, [pc, #200]	; (8005600 <HAL_UART_MspInit+0x1c0>)
 8005536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005538:	4a31      	ldr	r2, [pc, #196]	; (8005600 <HAL_UART_MspInit+0x1c0>)
 800553a:	f043 0301 	orr.w	r3, r3, #1
 800553e:	6313      	str	r3, [r2, #48]	; 0x30
 8005540:	4b2f      	ldr	r3, [pc, #188]	; (8005600 <HAL_UART_MspInit+0x1c0>)
 8005542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005544:	f003 0301 	and.w	r3, r3, #1
 8005548:	613b      	str	r3, [r7, #16]
 800554a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800554c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005550:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005552:	2302      	movs	r3, #2
 8005554:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005556:	2300      	movs	r3, #0
 8005558:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800555a:	2303      	movs	r3, #3
 800555c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800555e:	2307      	movs	r3, #7
 8005560:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005566:	4619      	mov	r1, r3
 8005568:	4829      	ldr	r0, [pc, #164]	; (8005610 <HAL_UART_MspInit+0x1d0>)
 800556a:	f000 ff59 	bl	8006420 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 800556e:	2200      	movs	r2, #0
 8005570:	2103      	movs	r1, #3
 8005572:	2025      	movs	r0, #37	; 0x25
 8005574:	f000 fd5d 	bl	8006032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005578:	2025      	movs	r0, #37	; 0x25
 800557a:	f000 fd76 	bl	800606a <HAL_NVIC_EnableIRQ>
}
 800557e:	e039      	b.n	80055f4 <HAL_UART_MspInit+0x1b4>
  else if(uartHandle->Instance==USART3)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a23      	ldr	r2, [pc, #140]	; (8005614 <HAL_UART_MspInit+0x1d4>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d134      	bne.n	80055f4 <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART3_CLK_ENABLE();
 800558a:	2300      	movs	r3, #0
 800558c:	60fb      	str	r3, [r7, #12]
 800558e:	4b1c      	ldr	r3, [pc, #112]	; (8005600 <HAL_UART_MspInit+0x1c0>)
 8005590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005592:	4a1b      	ldr	r2, [pc, #108]	; (8005600 <HAL_UART_MspInit+0x1c0>)
 8005594:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005598:	6413      	str	r3, [r2, #64]	; 0x40
 800559a:	4b19      	ldr	r3, [pc, #100]	; (8005600 <HAL_UART_MspInit+0x1c0>)
 800559c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055a2:	60fb      	str	r3, [r7, #12]
 80055a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80055a6:	2300      	movs	r3, #0
 80055a8:	60bb      	str	r3, [r7, #8]
 80055aa:	4b15      	ldr	r3, [pc, #84]	; (8005600 <HAL_UART_MspInit+0x1c0>)
 80055ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ae:	4a14      	ldr	r2, [pc, #80]	; (8005600 <HAL_UART_MspInit+0x1c0>)
 80055b0:	f043 0304 	orr.w	r3, r3, #4
 80055b4:	6313      	str	r3, [r2, #48]	; 0x30
 80055b6:	4b12      	ldr	r3, [pc, #72]	; (8005600 <HAL_UART_MspInit+0x1c0>)
 80055b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ba:	f003 0304 	and.w	r3, r3, #4
 80055be:	60bb      	str	r3, [r7, #8]
 80055c0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SBUS_TX_Pin|SBUS_RX_Pin;
 80055c2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80055c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055c8:	2302      	movs	r3, #2
 80055ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055cc:	2300      	movs	r3, #0
 80055ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055d0:	2303      	movs	r3, #3
 80055d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80055d4:	2307      	movs	r3, #7
 80055d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80055d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055dc:	4619      	mov	r1, r3
 80055de:	4809      	ldr	r0, [pc, #36]	; (8005604 <HAL_UART_MspInit+0x1c4>)
 80055e0:	f000 ff1e 	bl	8006420 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 3, 0);
 80055e4:	2200      	movs	r2, #0
 80055e6:	2103      	movs	r1, #3
 80055e8:	2027      	movs	r0, #39	; 0x27
 80055ea:	f000 fd22 	bl	8006032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80055ee:	2027      	movs	r0, #39	; 0x27
 80055f0:	f000 fd3b 	bl	800606a <HAL_NVIC_EnableIRQ>
}
 80055f4:	bf00      	nop
 80055f6:	3738      	adds	r7, #56	; 0x38
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	40005000 	.word	0x40005000
 8005600:	40023800 	.word	0x40023800
 8005604:	40020800 	.word	0x40020800
 8005608:	40020c00 	.word	0x40020c00
 800560c:	40011000 	.word	0x40011000
 8005610:	40020000 	.word	0x40020000
 8005614:	40004800 	.word	0x40004800

08005618 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005618:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005650 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800561c:	480d      	ldr	r0, [pc, #52]	; (8005654 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800561e:	490e      	ldr	r1, [pc, #56]	; (8005658 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005620:	4a0e      	ldr	r2, [pc, #56]	; (800565c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005622:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005624:	e002      	b.n	800562c <LoopCopyDataInit>

08005626 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005626:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005628:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800562a:	3304      	adds	r3, #4

0800562c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800562c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800562e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005630:	d3f9      	bcc.n	8005626 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005632:	4a0b      	ldr	r2, [pc, #44]	; (8005660 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005634:	4c0b      	ldr	r4, [pc, #44]	; (8005664 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005636:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005638:	e001      	b.n	800563e <LoopFillZerobss>

0800563a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800563a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800563c:	3204      	adds	r2, #4

0800563e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800563e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005640:	d3fb      	bcc.n	800563a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005642:	f7fe fe6b 	bl	800431c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005646:	f006 fd79 	bl	800c13c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800564a:	f7fe fc08 	bl	8003e5e <main>
  bx  lr    
 800564e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005650:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005654:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005658:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800565c:	0800eb04 	.word	0x0800eb04
  ldr r2, =_sbss
 8005660:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8005664:	20002820 	.word	0x20002820

08005668 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005668:	e7fe      	b.n	8005668 <ADC_IRQHandler>
	...

0800566c <_Z18TIM_getTimerClkSrcP17TIM_HandleTypeDef>:
  * @brief  This function return the timer clock source.
  * @param  tim: timer instance
  * @retval 1 = PCLK1 or 2 = PCLK2
  */
uint8_t TIM_getTimerClkSrc(TIM_HandleTypeDef *_timer)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  uint8_t clkSrc = 0;
 8005674:	2300      	movs	r3, #0
 8005676:	73fb      	strb	r3, [r7, #15]
#if defined(STM32F0xx) || defined(STM32G0xx)
    /* TIMx source CLK is PCKL1 */
    clkSrc = 1;
#else
    /* Get source clock depending on TIM instance */
    switch ((uint32_t)_timer->Instance) {
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a2e      	ldr	r2, [pc, #184]	; (8005738 <_Z18TIM_getTimerClkSrcP17TIM_HandleTypeDef+0xcc>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d04d      	beq.n	800571e <_Z18TIM_getTimerClkSrcP17TIM_HandleTypeDef+0xb2>
 8005682:	4a2d      	ldr	r2, [pc, #180]	; (8005738 <_Z18TIM_getTimerClkSrcP17TIM_HandleTypeDef+0xcc>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d84d      	bhi.n	8005724 <_Z18TIM_getTimerClkSrcP17TIM_HandleTypeDef+0xb8>
 8005688:	4a2c      	ldr	r2, [pc, #176]	; (800573c <_Z18TIM_getTimerClkSrcP17TIM_HandleTypeDef+0xd0>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d047      	beq.n	800571e <_Z18TIM_getTimerClkSrcP17TIM_HandleTypeDef+0xb2>
 800568e:	4a2b      	ldr	r2, [pc, #172]	; (800573c <_Z18TIM_getTimerClkSrcP17TIM_HandleTypeDef+0xd0>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d847      	bhi.n	8005724 <_Z18TIM_getTimerClkSrcP17TIM_HandleTypeDef+0xb8>
 8005694:	4a2a      	ldr	r2, [pc, #168]	; (8005740 <_Z18TIM_getTimerClkSrcP17TIM_HandleTypeDef+0xd4>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d041      	beq.n	800571e <_Z18TIM_getTimerClkSrcP17TIM_HandleTypeDef+0xb2>
 800569a:	4a29      	ldr	r2, [pc, #164]	; (8005740 <_Z18TIM_getTimerClkSrcP17TIM_HandleTypeDef+0xd4>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d841      	bhi.n	8005724 <_Z18TIM_getTimerClkSrcP17TIM_HandleTypeDef+0xb8>
 80056a0:	4a28      	ldr	r2, [pc, #160]	; (8005744 <_Z18TIM_getTimerClkSrcP17TIM_HandleTypeDef+0xd8>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d03b      	beq.n	800571e <_Z18TIM_getTimerClkSrcP17TIM_HandleTypeDef+0xb2>
 80056a6:	4a27      	ldr	r2, [pc, #156]	; (8005744 <_Z18TIM_getTimerClkSrcP17TIM_HandleTypeDef+0xd8>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d83b      	bhi.n	8005724 <_Z18TIM_getTimerClkSrcP17TIM_HandleTypeDef+0xb8>
 80056ac:	4a26      	ldr	r2, [pc, #152]	; (8005748 <_Z18TIM_getTimerClkSrcP17TIM_HandleTypeDef+0xdc>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d035      	beq.n	800571e <_Z18TIM_getTimerClkSrcP17TIM_HandleTypeDef+0xb2>
 80056b2:	4a25      	ldr	r2, [pc, #148]	; (8005748 <_Z18TIM_getTimerClkSrcP17TIM_HandleTypeDef+0xdc>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d835      	bhi.n	8005724 <_Z18TIM_getTimerClkSrcP17TIM_HandleTypeDef+0xb8>
 80056b8:	4a24      	ldr	r2, [pc, #144]	; (800574c <_Z18TIM_getTimerClkSrcP17TIM_HandleTypeDef+0xe0>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d02c      	beq.n	8005718 <_Z18TIM_getTimerClkSrcP17TIM_HandleTypeDef+0xac>
 80056be:	4a23      	ldr	r2, [pc, #140]	; (800574c <_Z18TIM_getTimerClkSrcP17TIM_HandleTypeDef+0xe0>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d82f      	bhi.n	8005724 <_Z18TIM_getTimerClkSrcP17TIM_HandleTypeDef+0xb8>
 80056c4:	4a22      	ldr	r2, [pc, #136]	; (8005750 <_Z18TIM_getTimerClkSrcP17TIM_HandleTypeDef+0xe4>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d026      	beq.n	8005718 <_Z18TIM_getTimerClkSrcP17TIM_HandleTypeDef+0xac>
 80056ca:	4a21      	ldr	r2, [pc, #132]	; (8005750 <_Z18TIM_getTimerClkSrcP17TIM_HandleTypeDef+0xe4>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d829      	bhi.n	8005724 <_Z18TIM_getTimerClkSrcP17TIM_HandleTypeDef+0xb8>
 80056d0:	4a20      	ldr	r2, [pc, #128]	; (8005754 <_Z18TIM_getTimerClkSrcP17TIM_HandleTypeDef+0xe8>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d020      	beq.n	8005718 <_Z18TIM_getTimerClkSrcP17TIM_HandleTypeDef+0xac>
 80056d6:	4a1f      	ldr	r2, [pc, #124]	; (8005754 <_Z18TIM_getTimerClkSrcP17TIM_HandleTypeDef+0xe8>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d823      	bhi.n	8005724 <_Z18TIM_getTimerClkSrcP17TIM_HandleTypeDef+0xb8>
 80056dc:	4a1e      	ldr	r2, [pc, #120]	; (8005758 <_Z18TIM_getTimerClkSrcP17TIM_HandleTypeDef+0xec>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d01a      	beq.n	8005718 <_Z18TIM_getTimerClkSrcP17TIM_HandleTypeDef+0xac>
 80056e2:	4a1d      	ldr	r2, [pc, #116]	; (8005758 <_Z18TIM_getTimerClkSrcP17TIM_HandleTypeDef+0xec>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d81d      	bhi.n	8005724 <_Z18TIM_getTimerClkSrcP17TIM_HandleTypeDef+0xb8>
 80056e8:	4a1c      	ldr	r2, [pc, #112]	; (800575c <_Z18TIM_getTimerClkSrcP17TIM_HandleTypeDef+0xf0>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d014      	beq.n	8005718 <_Z18TIM_getTimerClkSrcP17TIM_HandleTypeDef+0xac>
 80056ee:	4a1b      	ldr	r2, [pc, #108]	; (800575c <_Z18TIM_getTimerClkSrcP17TIM_HandleTypeDef+0xf0>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d817      	bhi.n	8005724 <_Z18TIM_getTimerClkSrcP17TIM_HandleTypeDef+0xb8>
 80056f4:	4a1a      	ldr	r2, [pc, #104]	; (8005760 <_Z18TIM_getTimerClkSrcP17TIM_HandleTypeDef+0xf4>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d00e      	beq.n	8005718 <_Z18TIM_getTimerClkSrcP17TIM_HandleTypeDef+0xac>
 80056fa:	4a19      	ldr	r2, [pc, #100]	; (8005760 <_Z18TIM_getTimerClkSrcP17TIM_HandleTypeDef+0xf4>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d811      	bhi.n	8005724 <_Z18TIM_getTimerClkSrcP17TIM_HandleTypeDef+0xb8>
 8005700:	4a18      	ldr	r2, [pc, #96]	; (8005764 <_Z18TIM_getTimerClkSrcP17TIM_HandleTypeDef+0xf8>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d008      	beq.n	8005718 <_Z18TIM_getTimerClkSrcP17TIM_HandleTypeDef+0xac>
 8005706:	4a17      	ldr	r2, [pc, #92]	; (8005764 <_Z18TIM_getTimerClkSrcP17TIM_HandleTypeDef+0xf8>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d80b      	bhi.n	8005724 <_Z18TIM_getTimerClkSrcP17TIM_HandleTypeDef+0xb8>
 800570c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005710:	d002      	beq.n	8005718 <_Z18TIM_getTimerClkSrcP17TIM_HandleTypeDef+0xac>
 8005712:	4a15      	ldr	r2, [pc, #84]	; (8005768 <_Z18TIM_getTimerClkSrcP17TIM_HandleTypeDef+0xfc>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d105      	bne.n	8005724 <_Z18TIM_getTimerClkSrcP17TIM_HandleTypeDef+0xb8>
      case (uint32_t)TIM14_BASE:
#endif
#if defined(TIM18_BASE)
      case (uint32_t)TIM18_BASE:
#endif
        clkSrc = 1;
 8005718:	2301      	movs	r3, #1
 800571a:	73fb      	strb	r3, [r7, #15]
        break;
 800571c:	e007      	b.n	800572e <_Z18TIM_getTimerClkSrcP17TIM_HandleTypeDef+0xc2>
      case (uint32_t)TIM21_BASE:
#endif
#if defined(TIM22_BASE)
      case (uint32_t)TIM22_BASE:
#endif
        clkSrc = 2;
 800571e:	2302      	movs	r3, #2
 8005720:	73fb      	strb	r3, [r7, #15]
        break;
 8005722:	e004      	b.n	800572e <_Z18TIM_getTimerClkSrcP17TIM_HandleTypeDef+0xc2>
      default:
        Error_Handler();
 8005724:	215a      	movs	r1, #90	; 0x5a
 8005726:	4811      	ldr	r0, [pc, #68]	; (800576c <_Z18TIM_getTimerClkSrcP17TIM_HandleTypeDef+0x100>)
 8005728:	f7fe fc3c 	bl	8003fa4 <_Error_Handler>
        break;
 800572c:	bf00      	nop
    }
#endif
  return clkSrc;
 800572e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005730:	4618      	mov	r0, r3
 8005732:	3710      	adds	r7, #16
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	40014800 	.word	0x40014800
 800573c:	40014400 	.word	0x40014400
 8005740:	40014000 	.word	0x40014000
 8005744:	40010400 	.word	0x40010400
 8005748:	40010000 	.word	0x40010000
 800574c:	40002000 	.word	0x40002000
 8005750:	40001c00 	.word	0x40001c00
 8005754:	40001800 	.word	0x40001800
 8005758:	40001400 	.word	0x40001400
 800575c:	40001000 	.word	0x40001000
 8005760:	40000c00 	.word	0x40000c00
 8005764:	40000800 	.word	0x40000800
 8005768:	40000400 	.word	0x40000400
 800576c:	0800e3b8 	.word	0x0800e3b8

08005770 <_Z19TIM_getTimerClkFreqP17TIM_HandleTypeDef>:
  * @brief  This function return the timer clock frequency.
  * @param  None
  * @retval frequency in Hz
  */
uint32_t TIM_getTimerClkFreq(TIM_HandleTypeDef *_timer)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b08a      	sub	sp, #40	; 0x28
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
#if defined(STM32MP1xx)
  uint8_t timerClkSrc = getTimerClkSrc(_timerObj.handle.Instance);
  uint64_t clkSelection = timerClkSrc == 1 ? RCC_PERIPHCLK_TIMG1 : RCC_PERIPHCLK_TIMG2;
  return HAL_RCCEx_GetPeriphCLKFreq(clkSelection);
#else
  RCC_ClkInitTypeDef    clkconfig = {};
 8005778:	f107 030c 	add.w	r3, r7, #12
 800577c:	2200      	movs	r2, #0
 800577e:	601a      	str	r2, [r3, #0]
 8005780:	605a      	str	r2, [r3, #4]
 8005782:	609a      	str	r2, [r3, #8]
 8005784:	60da      	str	r2, [r3, #12]
 8005786:	611a      	str	r2, [r3, #16]
  uint32_t              pFLatency = 0U;
 8005788:	2300      	movs	r3, #0
 800578a:	60bb      	str	r3, [r7, #8]
  uint32_t              uwTimclock = 0U, uwAPBxPrescaler = 0U;
 800578c:	2300      	movs	r3, #0
 800578e:	627b      	str	r3, [r7, #36]	; 0x24
 8005790:	2300      	movs	r3, #0
 8005792:	623b      	str	r3, [r7, #32]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005794:	f107 0208 	add.w	r2, r7, #8
 8005798:	f107 030c 	add.w	r3, r7, #12
 800579c:	4611      	mov	r1, r2
 800579e:	4618      	mov	r0, r3
 80057a0:	f001 fe1a 	bl	80073d8 <HAL_RCC_GetClockConfig>
  switch (TIM_getTimerClkSrc(_timer)) {
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f7ff ff61 	bl	800566c <_Z18TIM_getTimerClkSrcP17TIM_HandleTypeDef>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d002      	beq.n	80057b6 <_Z19TIM_getTimerClkFreqP17TIM_HandleTypeDef+0x46>
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d006      	beq.n	80057c2 <_Z19TIM_getTimerClkFreqP17TIM_HandleTypeDef+0x52>
 80057b4:	e00b      	b.n	80057ce <_Z19TIM_getTimerClkFreqP17TIM_HandleTypeDef+0x5e>
    case 1:
      uwAPBxPrescaler = clkconfig.APB1CLKDivider;
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	623b      	str	r3, [r7, #32]
      uwTimclock = HAL_RCC_GetPCLK1Freq();
 80057ba:	f001 fde5 	bl	8007388 <HAL_RCC_GetPCLK1Freq>
 80057be:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80057c0:	e00a      	b.n	80057d8 <_Z19TIM_getTimerClkFreqP17TIM_HandleTypeDef+0x68>
#if !defined(STM32F0xx) && !defined(STM32G0xx)
    case 2:
      uwAPBxPrescaler = clkconfig.APB2CLKDivider;
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	623b      	str	r3, [r7, #32]
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80057c6:	f001 fdf3 	bl	80073b0 <HAL_RCC_GetPCLK2Freq>
 80057ca:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80057cc:	e004      	b.n	80057d8 <_Z19TIM_getTimerClkFreqP17TIM_HandleTypeDef+0x68>
#endif
    default:
    case 0: // Unknown timer clock source
      Error_Handler();
 80057ce:	2181      	movs	r1, #129	; 0x81
 80057d0:	4812      	ldr	r0, [pc, #72]	; (800581c <_Z19TIM_getTimerClkFreqP17TIM_HandleTypeDef+0xac>)
 80057d2:	f7fe fbe7 	bl	8003fa4 <_Error_Handler>
      break;
 80057d6:	bf00      	nop
        uwTimclock *= 4;
        break;
    } else
#endif
#endif
    switch (uwAPBxPrescaler) {
 80057d8:	6a3b      	ldr	r3, [r7, #32]
 80057da:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80057de:	d013      	beq.n	8005808 <_Z19TIM_getTimerClkFreqP17TIM_HandleTypeDef+0x98>
 80057e0:	6a3b      	ldr	r3, [r7, #32]
 80057e2:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80057e6:	d813      	bhi.n	8005810 <_Z19TIM_getTimerClkFreqP17TIM_HandleTypeDef+0xa0>
 80057e8:	6a3b      	ldr	r3, [r7, #32]
 80057ea:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80057ee:	d00b      	beq.n	8005808 <_Z19TIM_getTimerClkFreqP17TIM_HandleTypeDef+0x98>
 80057f0:	6a3b      	ldr	r3, [r7, #32]
 80057f2:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80057f6:	d80b      	bhi.n	8005810 <_Z19TIM_getTimerClkFreqP17TIM_HandleTypeDef+0xa0>
 80057f8:	6a3b      	ldr	r3, [r7, #32]
 80057fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057fe:	d003      	beq.n	8005808 <_Z19TIM_getTimerClkFreqP17TIM_HandleTypeDef+0x98>
 8005800:	6a3b      	ldr	r3, [r7, #32]
 8005802:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005806:	d103      	bne.n	8005810 <_Z19TIM_getTimerClkFreqP17TIM_HandleTypeDef+0xa0>
        break;
      case RCC_HCLK_DIV2:
      case RCC_HCLK_DIV4:
      case RCC_HCLK_DIV8:
      case RCC_HCLK_DIV16:
        uwTimclock *= 2;
 8005808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580a:	005b      	lsls	r3, r3, #1
 800580c:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800580e:	e000      	b.n	8005812 <_Z19TIM_getTimerClkFreqP17TIM_HandleTypeDef+0xa2>
        break;
 8005810:	bf00      	nop
    }
#endif /* STM32H7xx */
  return uwTimclock;
 8005812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
#endif /* STM32MP1xx */
}
 8005814:	4618      	mov	r0, r3
 8005816:	3728      	adds	r7, #40	; 0x28
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}
 800581c:	0800e3b8 	.word	0x0800e3b8

08005820 <_Z15TIM_setOverflowP17TIM_HandleTypeDefm13TimerFormat_t>:
  *           MICROSEC_FORMAT: overflow is the number of microsecondes for overflow
  *           HERTZ_FORMAT:    overflow is the frequency in hertz for overflow
  * @retval None
  */
void TIM_setOverflow(TIM_HandleTypeDef *_timer, uint32_t overflow, TimerFormat_t format)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b088      	sub	sp, #32
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	4613      	mov	r3, r2
 800582c:	71fb      	strb	r3, [r7, #7]
  uint32_t ARR_RegisterValue;
  uint32_t PeriodTicks;
  uint32_t Prescalerfactor;
  uint32_t period_cyc;
  // Remark: Hardware register correspond to period count-1. Example ARR register value 9 means period of 10 timer cycle
  switch (format) {
 800582e:	79fb      	ldrb	r3, [r7, #7]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d002      	beq.n	800583a <_Z15TIM_setOverflowP17TIM_HandleTypeDefm13TimerFormat_t+0x1a>
 8005834:	2b02      	cmp	r3, #2
 8005836:	d01b      	beq.n	8005870 <_Z15TIM_setOverflowP17TIM_HandleTypeDefm13TimerFormat_t+0x50>
 8005838:	e034      	b.n	80058a4 <_Z15TIM_setOverflowP17TIM_HandleTypeDefm13TimerFormat_t+0x84>
    case MICROSEC_FORMAT:
      period_cyc = overflow * (TIM_getTimerClkFreq(_timer) / 1000000);
 800583a:	68f8      	ldr	r0, [r7, #12]
 800583c:	f7ff ff98 	bl	8005770 <_Z19TIM_getTimerClkFreqP17TIM_HandleTypeDef>
 8005840:	4603      	mov	r3, r0
 8005842:	4a26      	ldr	r2, [pc, #152]	; (80058dc <_Z15TIM_setOverflowP17TIM_HandleTypeDefm13TimerFormat_t+0xbc>)
 8005844:	fba2 2303 	umull	r2, r3, r2, r3
 8005848:	0c9a      	lsrs	r2, r3, #18
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	fb02 f303 	mul.w	r3, r2, r3
 8005850:	617b      	str	r3, [r7, #20]
      Prescalerfactor = (period_cyc / 0x10000) + 1;
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	0c1b      	lsrs	r3, r3, #16
 8005856:	3301      	adds	r3, #1
 8005858:	613b      	str	r3, [r7, #16]
      _timer->Instance->PSC = Prescalerfactor - 1;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	693a      	ldr	r2, [r7, #16]
 8005860:	3a01      	subs	r2, #1
 8005862:	629a      	str	r2, [r3, #40]	; 0x28
      PeriodTicks = period_cyc / Prescalerfactor;
 8005864:	697a      	ldr	r2, [r7, #20]
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	fbb2 f3f3 	udiv	r3, r2, r3
 800586c:	61bb      	str	r3, [r7, #24]
      break;
 800586e:	e01c      	b.n	80058aa <_Z15TIM_setOverflowP17TIM_HandleTypeDefm13TimerFormat_t+0x8a>
    case HERTZ_FORMAT:
    	if(overflow == 0) return; // Prevent a crash because dividebyzero
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d02e      	beq.n	80058d4 <_Z15TIM_setOverflowP17TIM_HandleTypeDefm13TimerFormat_t+0xb4>
      period_cyc = TIM_getTimerClkFreq(_timer) / overflow;
 8005876:	68f8      	ldr	r0, [r7, #12]
 8005878:	f7ff ff7a 	bl	8005770 <_Z19TIM_getTimerClkFreqP17TIM_HandleTypeDef>
 800587c:	4602      	mov	r2, r0
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	fbb2 f3f3 	udiv	r3, r2, r3
 8005884:	617b      	str	r3, [r7, #20]
      Prescalerfactor = (period_cyc / 0x10000) + 1;
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	0c1b      	lsrs	r3, r3, #16
 800588a:	3301      	adds	r3, #1
 800588c:	613b      	str	r3, [r7, #16]
      _timer->Instance->PSC =Prescalerfactor - 1;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	693a      	ldr	r2, [r7, #16]
 8005894:	3a01      	subs	r2, #1
 8005896:	629a      	str	r2, [r3, #40]	; 0x28
      PeriodTicks = period_cyc / Prescalerfactor;
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a0:	61bb      	str	r3, [r7, #24]
      break;
 80058a2:	e002      	b.n	80058aa <_Z15TIM_setOverflowP17TIM_HandleTypeDefm13TimerFormat_t+0x8a>
    case TICK_FORMAT:
    default :
      PeriodTicks = overflow;
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	61bb      	str	r3, [r7, #24]
      break;
 80058a8:	bf00      	nop
  }

  if (PeriodTicks > 0) {
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d003      	beq.n	80058b8 <_Z15TIM_setOverflowP17TIM_HandleTypeDefm13TimerFormat_t+0x98>
    // The register specifies the maximum value, so the period is really one tick longer
    ARR_RegisterValue = PeriodTicks - 1;
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	3b01      	subs	r3, #1
 80058b4:	61fb      	str	r3, [r7, #28]
 80058b6:	e001      	b.n	80058bc <_Z15TIM_setOverflowP17TIM_HandleTypeDefm13TimerFormat_t+0x9c>
  } else {
    // But do not underflow in case a zero period was given somehow.
    ARR_RegisterValue = 0;
 80058b8:	2300      	movs	r3, #0
 80058ba:	61fb      	str	r3, [r7, #28]
  }
  __HAL_TIM_SET_AUTORELOAD(_timer, ARR_RegisterValue);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	69fa      	ldr	r2, [r7, #28]
 80058c2:	62da      	str	r2, [r3, #44]	; 0x2c
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	69fa      	ldr	r2, [r7, #28]
 80058c8:	60da      	str	r2, [r3, #12]
  HAL_TIM_GenerateEvent(_timer, TIM_EVENTSOURCE_UPDATE);
 80058ca:	2101      	movs	r1, #1
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f002 fd85 	bl	80083dc <HAL_TIM_GenerateEvent>
 80058d2:	e000      	b.n	80058d6 <_Z15TIM_setOverflowP17TIM_HandleTypeDefm13TimerFormat_t+0xb6>
    	if(overflow == 0) return; // Prevent a crash because dividebyzero
 80058d4:	bf00      	nop
}
 80058d6:	3720      	adds	r7, #32
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	431bde83 	.word	0x431bde83

080058e0 <_Z21TIM_setCaptureCompareP17TIM_HandleTypeDefmm20TimerCompareFormat_t>:
  *           MICROSEC_FORMAT: compare is the number of microsecondes
  *           HERTZ_FORMAT:    compare is the frequency in hertz
  * @retval None
  */
void TIM_setCaptureCompare(TIM_HandleTypeDef *_timer,uint32_t timChannel, uint32_t compare, TimerCompareFormat_t format)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b088      	sub	sp, #32
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
 80058ec:	70fb      	strb	r3, [r7, #3]
  uint32_t Prescalerfactor = _timer->Instance->PSC + 1;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f4:	3301      	adds	r3, #1
 80058f6:	61bb      	str	r3, [r7, #24]
  uint32_t CCR_RegisterValue;

  if (timChannel == -1) {
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058fe:	d104      	bne.n	800590a <_Z21TIM_setCaptureCompareP17TIM_HandleTypeDefmm20TimerCompareFormat_t+0x2a>
    Error_Handler();
 8005900:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8005904:	4838      	ldr	r0, [pc, #224]	; (80059e8 <_Z21TIM_setCaptureCompareP17TIM_HandleTypeDefmm20TimerCompareFormat_t+0x108>)
 8005906:	f7fe fb4d 	bl	8003fa4 <_Error_Handler>
  }

  switch (format) {
 800590a:	78fb      	ldrb	r3, [r7, #3]
 800590c:	2b83      	cmp	r3, #131	; 0x83
 800590e:	d028      	beq.n	8005962 <_Z21TIM_setCaptureCompareP17TIM_HandleTypeDefmm20TimerCompareFormat_t+0x82>
 8005910:	2b83      	cmp	r3, #131	; 0x83
 8005912:	dc45      	bgt.n	80059a0 <_Z21TIM_setCaptureCompareP17TIM_HandleTypeDefmm20TimerCompareFormat_t+0xc0>
 8005914:	2b82      	cmp	r3, #130	; 0x82
 8005916:	d018      	beq.n	800594a <_Z21TIM_setCaptureCompareP17TIM_HandleTypeDefmm20TimerCompareFormat_t+0x6a>
 8005918:	2b82      	cmp	r3, #130	; 0x82
 800591a:	dc41      	bgt.n	80059a0 <_Z21TIM_setCaptureCompareP17TIM_HandleTypeDefmm20TimerCompareFormat_t+0xc0>
 800591c:	2b10      	cmp	r3, #16
 800591e:	dc02      	bgt.n	8005926 <_Z21TIM_setCaptureCompareP17TIM_HandleTypeDefmm20TimerCompareFormat_t+0x46>
 8005920:	2b00      	cmp	r3, #0
 8005922:	dc2d      	bgt.n	8005980 <_Z21TIM_setCaptureCompareP17TIM_HandleTypeDefmm20TimerCompareFormat_t+0xa0>
 8005924:	e03c      	b.n	80059a0 <_Z21TIM_setCaptureCompareP17TIM_HandleTypeDefmm20TimerCompareFormat_t+0xc0>
 8005926:	2b81      	cmp	r3, #129	; 0x81
 8005928:	d13a      	bne.n	80059a0 <_Z21TIM_setCaptureCompareP17TIM_HandleTypeDefmm20TimerCompareFormat_t+0xc0>
    case MICROSEC_COMPARE_FORMAT:
      CCR_RegisterValue = ((compare * (TIM_getTimerClkFreq(_timer) / 1000000)) / Prescalerfactor);
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	f7ff ff20 	bl	8005770 <_Z19TIM_getTimerClkFreqP17TIM_HandleTypeDef>
 8005930:	4603      	mov	r3, r0
 8005932:	4a2e      	ldr	r2, [pc, #184]	; (80059ec <_Z21TIM_setCaptureCompareP17TIM_HandleTypeDefmm20TimerCompareFormat_t+0x10c>)
 8005934:	fba2 2303 	umull	r2, r3, r2, r3
 8005938:	0c9b      	lsrs	r3, r3, #18
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	fb03 f202 	mul.w	r2, r3, r2
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	fbb2 f3f3 	udiv	r3, r2, r3
 8005946:	61fb      	str	r3, [r7, #28]
      break;
 8005948:	e02d      	b.n	80059a6 <_Z21TIM_setCaptureCompareP17TIM_HandleTypeDefmm20TimerCompareFormat_t+0xc6>
    case HERTZ_COMPARE_FORMAT:
      CCR_RegisterValue = TIM_getTimerClkFreq(_timer) / (compare * Prescalerfactor);
 800594a:	68f8      	ldr	r0, [r7, #12]
 800594c:	f7ff ff10 	bl	8005770 <_Z19TIM_getTimerClkFreqP17TIM_HandleTypeDef>
 8005950:	4601      	mov	r1, r0
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	69ba      	ldr	r2, [r7, #24]
 8005956:	fb02 f303 	mul.w	r3, r2, r3
 800595a:	fbb1 f3f3 	udiv	r3, r1, r3
 800595e:	61fb      	str	r3, [r7, #28]
      break;
 8005960:	e021      	b.n	80059a6 <_Z21TIM_setCaptureCompareP17TIM_HandleTypeDefmm20TimerCompareFormat_t+0xc6>
    // As per Reference Manual PWM reach 100% with CCRx value strictly greater than ARR (So ARR+1 in our case)
    case PERCENT_COMPARE_FORMAT:{
    	uint32_t autoreload = __HAL_TIM_GET_AUTORELOAD(_timer) + 1;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005968:	3301      	adds	r3, #1
 800596a:	617b      	str	r3, [r7, #20]
      CCR_RegisterValue = (autoreload * compare) / 100;
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	fb02 f303 	mul.w	r3, r2, r3
 8005974:	4a1e      	ldr	r2, [pc, #120]	; (80059f0 <_Z21TIM_setCaptureCompareP17TIM_HandleTypeDefmm20TimerCompareFormat_t+0x110>)
 8005976:	fba2 2303 	umull	r2, r3, r2, r3
 800597a:	095b      	lsrs	r3, r3, #5
 800597c:	61fb      	str	r3, [r7, #28]
      break;
 800597e:	e012      	b.n	80059a6 <_Z21TIM_setCaptureCompareP17TIM_HandleTypeDefmm20TimerCompareFormat_t+0xc6>
    case RESOLUTION_12B_COMPARE_FORMAT:
    case RESOLUTION_13B_COMPARE_FORMAT:
    case RESOLUTION_14B_COMPARE_FORMAT:
    case RESOLUTION_15B_COMPARE_FORMAT:
    case RESOLUTION_16B_COMPARE_FORMAT:
      CCR_RegisterValue = ((__HAL_TIM_GET_AUTORELOAD(_timer) + 1) * compare) / ((1 << format) - 1) ;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005986:	3301      	adds	r3, #1
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	fb02 f303 	mul.w	r3, r2, r3
 800598e:	78fa      	ldrb	r2, [r7, #3]
 8005990:	2101      	movs	r1, #1
 8005992:	fa01 f202 	lsl.w	r2, r1, r2
 8005996:	3a01      	subs	r2, #1
 8005998:	fbb3 f3f2 	udiv	r3, r3, r2
 800599c:	61fb      	str	r3, [r7, #28]
      break;
 800599e:	e002      	b.n	80059a6 <_Z21TIM_setCaptureCompareP17TIM_HandleTypeDefmm20TimerCompareFormat_t+0xc6>
    case TICK_COMPARE_FORMAT:
    default :
      CCR_RegisterValue = compare;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	61fb      	str	r3, [r7, #28]
      break;
 80059a4:	bf00      	nop
  }

  __HAL_TIM_SET_COMPARE(_timer, timChannel, CCR_RegisterValue);
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d104      	bne.n	80059b6 <_Z21TIM_setCaptureCompareP17TIM_HandleTypeDefmm20TimerCompareFormat_t+0xd6>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	69fa      	ldr	r2, [r7, #28]
 80059b2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80059b4:	e013      	b.n	80059de <_Z21TIM_setCaptureCompareP17TIM_HandleTypeDefmm20TimerCompareFormat_t+0xfe>
  __HAL_TIM_SET_COMPARE(_timer, timChannel, CCR_RegisterValue);
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	2b04      	cmp	r3, #4
 80059ba:	d104      	bne.n	80059c6 <_Z21TIM_setCaptureCompareP17TIM_HandleTypeDefmm20TimerCompareFormat_t+0xe6>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	69fa      	ldr	r2, [r7, #28]
 80059c2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80059c4:	e00b      	b.n	80059de <_Z21TIM_setCaptureCompareP17TIM_HandleTypeDefmm20TimerCompareFormat_t+0xfe>
  __HAL_TIM_SET_COMPARE(_timer, timChannel, CCR_RegisterValue);
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	2b08      	cmp	r3, #8
 80059ca:	d104      	bne.n	80059d6 <_Z21TIM_setCaptureCompareP17TIM_HandleTypeDefmm20TimerCompareFormat_t+0xf6>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	69fa      	ldr	r2, [r7, #28]
 80059d2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80059d4:	e003      	b.n	80059de <_Z21TIM_setCaptureCompareP17TIM_HandleTypeDefmm20TimerCompareFormat_t+0xfe>
  __HAL_TIM_SET_COMPARE(_timer, timChannel, CCR_RegisterValue);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	69fa      	ldr	r2, [r7, #28]
 80059dc:	641a      	str	r2, [r3, #64]	; 0x40
}
 80059de:	bf00      	nop
 80059e0:	3720      	adds	r7, #32
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	0800e3b8 	.word	0x0800e3b8
 80059ec:	431bde83 	.word	0x431bde83
 80059f0:	51eb851f 	.word	0x51eb851f

080059f4 <_ZN3bfs6SbusTx5WriteEv>:
    prev_byte_ = cur_byte_;
  }
  return false;
}

void SbusTx::Write() {
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  /* Assemble packet */
  buf_[0] = HEADER_;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	220f      	movs	r2, #15
 8005a00:	711a      	strb	r2, [r3, #4]
  buf_[1] =   (uint8_t) ((ch_[0]   & 0x07FF));
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8005a08:	b2da      	uxtb	r2, r3
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	715a      	strb	r2, [r3, #5]
  buf_[2] =   (uint8_t) ((ch_[0]   & 0x07FF) >> 8  | (ch_[1]  & 0x07FF) << 3);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8005a14:	121b      	asrs	r3, r3, #8
 8005a16:	b21b      	sxth	r3, r3
 8005a18:	b25b      	sxtb	r3, r3
 8005a1a:	f003 0307 	and.w	r3, r3, #7
 8005a1e:	b25a      	sxtb	r2, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	00db      	lsls	r3, r3, #3
 8005a2a:	b25b      	sxtb	r3, r3
 8005a2c:	f023 0307 	bic.w	r3, r3, #7
 8005a30:	b25b      	sxtb	r3, r3
 8005a32:	4313      	orrs	r3, r2
 8005a34:	b25b      	sxtb	r3, r3
 8005a36:	b2da      	uxtb	r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	719a      	strb	r2, [r3, #6]
  buf_[3] =   (uint8_t) ((ch_[1]   & 0x07FF) >> 5  | (ch_[2]  & 0x07FF) << 6);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8005a42:	115b      	asrs	r3, r3, #5
 8005a44:	b21b      	sxth	r3, r3
 8005a46:	b25b      	sxtb	r3, r3
 8005a48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a4c:	b25a      	sxtb	r2, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	019b      	lsls	r3, r3, #6
 8005a58:	b25b      	sxtb	r3, r3
 8005a5a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005a5e:	b25b      	sxtb	r3, r3
 8005a60:	4313      	orrs	r3, r2
 8005a62:	b25b      	sxtb	r3, r3
 8005a64:	b2da      	uxtb	r2, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	71da      	strb	r2, [r3, #7]
  buf_[4] =   (uint8_t) ((ch_[2]   & 0x07FF) >> 2);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8005a70:	109b      	asrs	r3, r3, #2
 8005a72:	b21b      	sxth	r3, r3
 8005a74:	b2da      	uxtb	r2, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	721a      	strb	r2, [r3, #8]
  buf_[5] =   (uint8_t) ((ch_[2]   & 0x07FF) >> 10 | (ch_[3]  & 0x07FF) << 1);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8005a80:	129b      	asrs	r3, r3, #10
 8005a82:	b21b      	sxth	r3, r3
 8005a84:	b25b      	sxtb	r3, r3
 8005a86:	f003 0301 	and.w	r3, r3, #1
 8005a8a:	b25a      	sxtb	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	005b      	lsls	r3, r3, #1
 8005a96:	b25b      	sxtb	r3, r3
 8005a98:	f023 0301 	bic.w	r3, r3, #1
 8005a9c:	b25b      	sxtb	r3, r3
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	b25b      	sxtb	r3, r3
 8005aa2:	b2da      	uxtb	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	725a      	strb	r2, [r3, #9]
  buf_[6] =   (uint8_t) ((ch_[3]   & 0x07FF) >> 7  | (ch_[4]  & 0x07FF) << 4);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8005aae:	11db      	asrs	r3, r3, #7
 8005ab0:	b21b      	sxth	r3, r3
 8005ab2:	b25b      	sxtb	r3, r3
 8005ab4:	f003 030f 	and.w	r3, r3, #15
 8005ab8:	b25a      	sxtb	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	011b      	lsls	r3, r3, #4
 8005ac4:	b25b      	sxtb	r3, r3
 8005ac6:	f023 030f 	bic.w	r3, r3, #15
 8005aca:	b25b      	sxtb	r3, r3
 8005acc:	4313      	orrs	r3, r2
 8005ace:	b25b      	sxtb	r3, r3
 8005ad0:	b2da      	uxtb	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	729a      	strb	r2, [r3, #10]
  buf_[7] =   (uint8_t) ((ch_[4]   & 0x07FF) >> 4  | (ch_[5]  & 0x07FF) << 7);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8005adc:	111b      	asrs	r3, r3, #4
 8005ade:	b21b      	sxth	r3, r3
 8005ae0:	b25b      	sxtb	r3, r3
 8005ae2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ae6:	b25a      	sxtb	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	01db      	lsls	r3, r3, #7
 8005af2:	b25b      	sxtb	r3, r3
 8005af4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005af8:	b25b      	sxtb	r3, r3
 8005afa:	4313      	orrs	r3, r2
 8005afc:	b25b      	sxtb	r3, r3
 8005afe:	b2da      	uxtb	r2, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	72da      	strb	r2, [r3, #11]
  buf_[8] =   (uint8_t) ((ch_[5]   & 0x07FF) >> 1);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8005b0a:	105b      	asrs	r3, r3, #1
 8005b0c:	b21b      	sxth	r3, r3
 8005b0e:	b2da      	uxtb	r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	731a      	strb	r2, [r3, #12]
  buf_[9] =   (uint8_t) ((ch_[5]   & 0x07FF) >> 9  | (ch_[6]  & 0x07FF) << 2);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8005b1a:	125b      	asrs	r3, r3, #9
 8005b1c:	b21b      	sxth	r3, r3
 8005b1e:	b25b      	sxtb	r3, r3
 8005b20:	f003 0303 	and.w	r3, r3, #3
 8005b24:	b25a      	sxtb	r2, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	b25b      	sxtb	r3, r3
 8005b32:	f023 0303 	bic.w	r3, r3, #3
 8005b36:	b25b      	sxtb	r3, r3
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	b25b      	sxtb	r3, r3
 8005b3c:	b2da      	uxtb	r2, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	735a      	strb	r2, [r3, #13]
  buf_[10] =  (uint8_t) ((ch_[6]   & 0x07FF) >> 6  | (ch_[7]  & 0x07FF) << 5);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8005b48:	119b      	asrs	r3, r3, #6
 8005b4a:	b21b      	sxth	r3, r3
 8005b4c:	b25b      	sxtb	r3, r3
 8005b4e:	f003 031f 	and.w	r3, r3, #31
 8005b52:	b25a      	sxtb	r2, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	015b      	lsls	r3, r3, #5
 8005b5e:	b25b      	sxtb	r3, r3
 8005b60:	4313      	orrs	r3, r2
 8005b62:	b25b      	sxtb	r3, r3
 8005b64:	b2da      	uxtb	r2, r3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	739a      	strb	r2, [r3, #14]
  buf_[11] =  (uint8_t) ((ch_[7]   & 0x07FF) >> 3);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8005b70:	10db      	asrs	r3, r3, #3
 8005b72:	b21b      	sxth	r3, r3
 8005b74:	b2da      	uxtb	r2, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	73da      	strb	r2, [r3, #15]
  buf_[12] =  (uint8_t) ((ch_[8]   & 0x07FF));
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8005b80:	b2da      	uxtb	r2, r3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	741a      	strb	r2, [r3, #16]
  buf_[13] =  (uint8_t) ((ch_[8]   & 0x07FF) >> 8  | (ch_[9]  & 0x07FF) << 3);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8005b8c:	121b      	asrs	r3, r3, #8
 8005b8e:	b21b      	sxth	r3, r3
 8005b90:	b25b      	sxtb	r3, r3
 8005b92:	f003 0307 	and.w	r3, r3, #7
 8005b96:	b25a      	sxtb	r2, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	00db      	lsls	r3, r3, #3
 8005ba2:	b25b      	sxtb	r3, r3
 8005ba4:	f023 0307 	bic.w	r3, r3, #7
 8005ba8:	b25b      	sxtb	r3, r3
 8005baa:	4313      	orrs	r3, r2
 8005bac:	b25b      	sxtb	r3, r3
 8005bae:	b2da      	uxtb	r2, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	745a      	strb	r2, [r3, #17]
  buf_[14] =  (uint8_t) ((ch_[9]   & 0x07FF) >> 5  | (ch_[10] & 0x07FF) << 6);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005bba:	115b      	asrs	r3, r3, #5
 8005bbc:	b21b      	sxth	r3, r3
 8005bbe:	b25b      	sxtb	r3, r3
 8005bc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bc4:	b25a      	sxtb	r2, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	019b      	lsls	r3, r3, #6
 8005bd0:	b25b      	sxtb	r3, r3
 8005bd2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005bd6:	b25b      	sxtb	r3, r3
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	b25b      	sxtb	r3, r3
 8005bdc:	b2da      	uxtb	r2, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	749a      	strb	r2, [r3, #18]
  buf_[15] =  (uint8_t) ((ch_[10]  & 0x07FF) >> 2);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8005be8:	109b      	asrs	r3, r3, #2
 8005bea:	b21b      	sxth	r3, r3
 8005bec:	b2da      	uxtb	r2, r3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	74da      	strb	r2, [r3, #19]
  buf_[16] =  (uint8_t) ((ch_[10]  & 0x07FF) >> 10 | (ch_[11] & 0x07FF) << 1);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8005bf8:	129b      	asrs	r3, r3, #10
 8005bfa:	b21b      	sxth	r3, r3
 8005bfc:	b25b      	sxtb	r3, r3
 8005bfe:	f003 0301 	and.w	r3, r3, #1
 8005c02:	b25a      	sxtb	r2, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	005b      	lsls	r3, r3, #1
 8005c0e:	b25b      	sxtb	r3, r3
 8005c10:	f023 0301 	bic.w	r3, r3, #1
 8005c14:	b25b      	sxtb	r3, r3
 8005c16:	4313      	orrs	r3, r2
 8005c18:	b25b      	sxtb	r3, r3
 8005c1a:	b2da      	uxtb	r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	751a      	strb	r2, [r3, #20]
  buf_[17] =  (uint8_t) ((ch_[11]  & 0x07FF) >> 7  | (ch_[12] & 0x07FF) << 4);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8005c26:	11db      	asrs	r3, r3, #7
 8005c28:	b21b      	sxth	r3, r3
 8005c2a:	b25b      	sxtb	r3, r3
 8005c2c:	f003 030f 	and.w	r3, r3, #15
 8005c30:	b25a      	sxtb	r2, r3
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	011b      	lsls	r3, r3, #4
 8005c3c:	b25b      	sxtb	r3, r3
 8005c3e:	f023 030f 	bic.w	r3, r3, #15
 8005c42:	b25b      	sxtb	r3, r3
 8005c44:	4313      	orrs	r3, r2
 8005c46:	b25b      	sxtb	r3, r3
 8005c48:	b2da      	uxtb	r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	755a      	strb	r2, [r3, #21]
  buf_[18] =  (uint8_t) ((ch_[12]  & 0x07FF) >> 4  | (ch_[13] & 0x07FF) << 7);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8005c54:	111b      	asrs	r3, r3, #4
 8005c56:	b21b      	sxth	r3, r3
 8005c58:	b25b      	sxtb	r3, r3
 8005c5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c5e:	b25a      	sxtb	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	01db      	lsls	r3, r3, #7
 8005c6a:	b25b      	sxtb	r3, r3
 8005c6c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005c70:	b25b      	sxtb	r3, r3
 8005c72:	4313      	orrs	r3, r2
 8005c74:	b25b      	sxtb	r3, r3
 8005c76:	b2da      	uxtb	r2, r3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	759a      	strb	r2, [r3, #22]
  buf_[19] =  (uint8_t) ((ch_[13]  & 0x07FF) >> 1);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8005c82:	105b      	asrs	r3, r3, #1
 8005c84:	b21b      	sxth	r3, r3
 8005c86:	b2da      	uxtb	r2, r3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	75da      	strb	r2, [r3, #23]
  buf_[20] =  (uint8_t) ((ch_[13]  & 0x07FF) >> 9  | (ch_[14] & 0x07FF) << 2);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8005c92:	125b      	asrs	r3, r3, #9
 8005c94:	b21b      	sxth	r3, r3
 8005c96:	b25b      	sxtb	r3, r3
 8005c98:	f003 0303 	and.w	r3, r3, #3
 8005c9c:	b25a      	sxtb	r2, r3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	b25b      	sxtb	r3, r3
 8005caa:	f023 0303 	bic.w	r3, r3, #3
 8005cae:	b25b      	sxtb	r3, r3
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	b25b      	sxtb	r3, r3
 8005cb4:	b2da      	uxtb	r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	761a      	strb	r2, [r3, #24]
  buf_[21] =  (uint8_t) ((ch_[14]  & 0x07FF) >> 6  | (ch_[15] & 0x07FF) << 5);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8005cc0:	119b      	asrs	r3, r3, #6
 8005cc2:	b21b      	sxth	r3, r3
 8005cc4:	b25b      	sxtb	r3, r3
 8005cc6:	f003 031f 	and.w	r3, r3, #31
 8005cca:	b25a      	sxtb	r2, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	015b      	lsls	r3, r3, #5
 8005cd6:	b25b      	sxtb	r3, r3
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	b25b      	sxtb	r3, r3
 8005cdc:	b2da      	uxtb	r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	765a      	strb	r2, [r3, #25]
  buf_[22] =  (uint8_t) ((ch_[15]  & 0x07FF) >> 3);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8005ce8:	10db      	asrs	r3, r3, #3
 8005cea:	b21b      	sxth	r3, r3
 8005cec:	b2da      	uxtb	r2, r3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	769a      	strb	r2, [r3, #26]
  buf_[23] = 0x00 | (ch17_ * CH17_MASK_) | (ch18_ * CH18_MASK_) |
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005cf8:	b25a      	sxtb	r2, r3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d00:	005b      	lsls	r3, r3, #1
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	b25b      	sxtb	r3, r3
 8005d06:	4313      	orrs	r3, r2
 8005d08:	b25a      	sxtb	r2, r3
             (failsafe_ * FAILSAFE_MASK_) | (lost_frame_ * LOST_FRAME_MASK_);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
  buf_[23] = 0x00 | (ch17_ * CH17_MASK_) | (ch18_ * CH18_MASK_) |
 8005d10:	00db      	lsls	r3, r3, #3
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	b25b      	sxtb	r3, r3
 8005d16:	4313      	orrs	r3, r2
 8005d18:	b25a      	sxtb	r2, r3
             (failsafe_ * FAILSAFE_MASK_) | (lost_frame_ * LOST_FRAME_MASK_);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	b25b      	sxtb	r3, r3
 8005d26:	4313      	orrs	r3, r2
 8005d28:	b25b      	sxtb	r3, r3
 8005d2a:	b2da      	uxtb	r2, r3
  buf_[23] = 0x00 | (ch17_ * CH17_MASK_) | (ch18_ * CH18_MASK_) |
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	76da      	strb	r2, [r3, #27]
  buf_[24] = FOOTER_;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	771a      	strb	r2, [r3, #28]
  /* Send packet to servos */
  HAL_UART_Transmit_IT(uart_, buf_, sizeof(buf_));
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6818      	ldr	r0, [r3, #0]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	3304      	adds	r3, #4
 8005d3e:	2219      	movs	r2, #25
 8005d40:	4619      	mov	r1, r3
 8005d42:	f003 f8ed 	bl	8008f20 <HAL_UART_Transmit_IT>
}
 8005d46:	bf00      	nop
 8005d48:	3708      	adds	r7, #8
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
	...

08005d50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005d54:	4b0e      	ldr	r3, [pc, #56]	; (8005d90 <HAL_Init+0x40>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a0d      	ldr	r2, [pc, #52]	; (8005d90 <HAL_Init+0x40>)
 8005d5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005d60:	4b0b      	ldr	r3, [pc, #44]	; (8005d90 <HAL_Init+0x40>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a0a      	ldr	r2, [pc, #40]	; (8005d90 <HAL_Init+0x40>)
 8005d66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005d6c:	4b08      	ldr	r3, [pc, #32]	; (8005d90 <HAL_Init+0x40>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a07      	ldr	r2, [pc, #28]	; (8005d90 <HAL_Init+0x40>)
 8005d72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005d78:	2003      	movs	r0, #3
 8005d7a:	f000 f94f 	bl	800601c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005d7e:	200f      	movs	r0, #15
 8005d80:	f000 f808 	bl	8005d94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005d84:	f7fe fa48 	bl	8004218 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	40023c00 	.word	0x40023c00

08005d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005d9c:	4b12      	ldr	r3, [pc, #72]	; (8005de8 <HAL_InitTick+0x54>)
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	4b12      	ldr	r3, [pc, #72]	; (8005dec <HAL_InitTick+0x58>)
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	4619      	mov	r1, r3
 8005da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005daa:	fbb3 f3f1 	udiv	r3, r3, r1
 8005dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8005db2:	4618      	mov	r0, r3
 8005db4:	f000 f967 	bl	8006086 <HAL_SYSTICK_Config>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d001      	beq.n	8005dc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e00e      	b.n	8005de0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2b0f      	cmp	r3, #15
 8005dc6:	d80a      	bhi.n	8005dde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005dc8:	2200      	movs	r2, #0
 8005dca:	6879      	ldr	r1, [r7, #4]
 8005dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8005dd0:	f000 f92f 	bl	8006032 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005dd4:	4a06      	ldr	r2, [pc, #24]	; (8005df0 <HAL_InitTick+0x5c>)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	e000      	b.n	8005de0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3708      	adds	r7, #8
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	2000000c 	.word	0x2000000c
 8005dec:	20000014 	.word	0x20000014
 8005df0:	20000010 	.word	0x20000010

08005df4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005df4:	b480      	push	{r7}
 8005df6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005df8:	4b06      	ldr	r3, [pc, #24]	; (8005e14 <HAL_IncTick+0x20>)
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	4b06      	ldr	r3, [pc, #24]	; (8005e18 <HAL_IncTick+0x24>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4413      	add	r3, r2
 8005e04:	4a04      	ldr	r2, [pc, #16]	; (8005e18 <HAL_IncTick+0x24>)
 8005e06:	6013      	str	r3, [r2, #0]
}
 8005e08:	bf00      	nop
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop
 8005e14:	20000014 	.word	0x20000014
 8005e18:	20002694 	.word	0x20002694

08005e1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8005e20:	4b03      	ldr	r3, [pc, #12]	; (8005e30 <HAL_GetTick+0x14>)
 8005e22:	681b      	ldr	r3, [r3, #0]
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	20002694 	.word	0x20002694

08005e34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005e3c:	f7ff ffee 	bl	8005e1c <HAL_GetTick>
 8005e40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e4c:	d005      	beq.n	8005e5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005e4e:	4b0a      	ldr	r3, [pc, #40]	; (8005e78 <HAL_Delay+0x44>)
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	461a      	mov	r2, r3
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	4413      	add	r3, r2
 8005e58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005e5a:	bf00      	nop
 8005e5c:	f7ff ffde 	bl	8005e1c <HAL_GetTick>
 8005e60:	4602      	mov	r2, r0
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d8f7      	bhi.n	8005e5c <HAL_Delay+0x28>
  {
  }
}
 8005e6c:	bf00      	nop
 8005e6e:	bf00      	nop
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	20000014 	.word	0x20000014

08005e7c <__NVIC_SetPriorityGrouping>:
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b085      	sub	sp, #20
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f003 0307 	and.w	r3, r3, #7
 8005e8a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e8c:	4b0c      	ldr	r3, [pc, #48]	; (8005ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e92:	68ba      	ldr	r2, [r7, #8]
 8005e94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005e98:	4013      	ands	r3, r2
 8005e9a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005ea4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005eac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005eae:	4a04      	ldr	r2, [pc, #16]	; (8005ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	60d3      	str	r3, [r2, #12]
}
 8005eb4:	bf00      	nop
 8005eb6:	3714      	adds	r7, #20
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr
 8005ec0:	e000ed00 	.word	0xe000ed00

08005ec4 <__NVIC_GetPriorityGrouping>:
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ec8:	4b04      	ldr	r3, [pc, #16]	; (8005edc <__NVIC_GetPriorityGrouping+0x18>)
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	0a1b      	lsrs	r3, r3, #8
 8005ece:	f003 0307 	and.w	r3, r3, #7
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr
 8005edc:	e000ed00 	.word	0xe000ed00

08005ee0 <__NVIC_EnableIRQ>:
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	db0b      	blt.n	8005f0a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ef2:	79fb      	ldrb	r3, [r7, #7]
 8005ef4:	f003 021f 	and.w	r2, r3, #31
 8005ef8:	4907      	ldr	r1, [pc, #28]	; (8005f18 <__NVIC_EnableIRQ+0x38>)
 8005efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005efe:	095b      	lsrs	r3, r3, #5
 8005f00:	2001      	movs	r0, #1
 8005f02:	fa00 f202 	lsl.w	r2, r0, r2
 8005f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005f0a:	bf00      	nop
 8005f0c:	370c      	adds	r7, #12
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	e000e100 	.word	0xe000e100

08005f1c <__NVIC_SetPriority>:
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	4603      	mov	r3, r0
 8005f24:	6039      	str	r1, [r7, #0]
 8005f26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	db0a      	blt.n	8005f46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	b2da      	uxtb	r2, r3
 8005f34:	490c      	ldr	r1, [pc, #48]	; (8005f68 <__NVIC_SetPriority+0x4c>)
 8005f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f3a:	0112      	lsls	r2, r2, #4
 8005f3c:	b2d2      	uxtb	r2, r2
 8005f3e:	440b      	add	r3, r1
 8005f40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005f44:	e00a      	b.n	8005f5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	b2da      	uxtb	r2, r3
 8005f4a:	4908      	ldr	r1, [pc, #32]	; (8005f6c <__NVIC_SetPriority+0x50>)
 8005f4c:	79fb      	ldrb	r3, [r7, #7]
 8005f4e:	f003 030f 	and.w	r3, r3, #15
 8005f52:	3b04      	subs	r3, #4
 8005f54:	0112      	lsls	r2, r2, #4
 8005f56:	b2d2      	uxtb	r2, r2
 8005f58:	440b      	add	r3, r1
 8005f5a:	761a      	strb	r2, [r3, #24]
}
 8005f5c:	bf00      	nop
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr
 8005f68:	e000e100 	.word	0xe000e100
 8005f6c:	e000ed00 	.word	0xe000ed00

08005f70 <NVIC_EncodePriority>:
{
 8005f70:	b480      	push	{r7}
 8005f72:	b089      	sub	sp, #36	; 0x24
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f003 0307 	and.w	r3, r3, #7
 8005f82:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	f1c3 0307 	rsb	r3, r3, #7
 8005f8a:	2b04      	cmp	r3, #4
 8005f8c:	bf28      	it	cs
 8005f8e:	2304      	movcs	r3, #4
 8005f90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	3304      	adds	r3, #4
 8005f96:	2b06      	cmp	r3, #6
 8005f98:	d902      	bls.n	8005fa0 <NVIC_EncodePriority+0x30>
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	3b03      	subs	r3, #3
 8005f9e:	e000      	b.n	8005fa2 <NVIC_EncodePriority+0x32>
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	fa02 f303 	lsl.w	r3, r2, r3
 8005fae:	43da      	mvns	r2, r3
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	401a      	ands	r2, r3
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8005fc2:	43d9      	mvns	r1, r3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fc8:	4313      	orrs	r3, r2
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3724      	adds	r7, #36	; 0x24
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr
	...

08005fd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005fe8:	d301      	bcc.n	8005fee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005fea:	2301      	movs	r3, #1
 8005fec:	e00f      	b.n	800600e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005fee:	4a0a      	ldr	r2, [pc, #40]	; (8006018 <SysTick_Config+0x40>)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005ff6:	210f      	movs	r1, #15
 8005ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ffc:	f7ff ff8e 	bl	8005f1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006000:	4b05      	ldr	r3, [pc, #20]	; (8006018 <SysTick_Config+0x40>)
 8006002:	2200      	movs	r2, #0
 8006004:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006006:	4b04      	ldr	r3, [pc, #16]	; (8006018 <SysTick_Config+0x40>)
 8006008:	2207      	movs	r2, #7
 800600a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800600c:	2300      	movs	r3, #0
}
 800600e:	4618      	mov	r0, r3
 8006010:	3708      	adds	r7, #8
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
 8006016:	bf00      	nop
 8006018:	e000e010 	.word	0xe000e010

0800601c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f7ff ff29 	bl	8005e7c <__NVIC_SetPriorityGrouping>
}
 800602a:	bf00      	nop
 800602c:	3708      	adds	r7, #8
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006032:	b580      	push	{r7, lr}
 8006034:	b086      	sub	sp, #24
 8006036:	af00      	add	r7, sp, #0
 8006038:	4603      	mov	r3, r0
 800603a:	60b9      	str	r1, [r7, #8]
 800603c:	607a      	str	r2, [r7, #4]
 800603e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006040:	2300      	movs	r3, #0
 8006042:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006044:	f7ff ff3e 	bl	8005ec4 <__NVIC_GetPriorityGrouping>
 8006048:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	68b9      	ldr	r1, [r7, #8]
 800604e:	6978      	ldr	r0, [r7, #20]
 8006050:	f7ff ff8e 	bl	8005f70 <NVIC_EncodePriority>
 8006054:	4602      	mov	r2, r0
 8006056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800605a:	4611      	mov	r1, r2
 800605c:	4618      	mov	r0, r3
 800605e:	f7ff ff5d 	bl	8005f1c <__NVIC_SetPriority>
}
 8006062:	bf00      	nop
 8006064:	3718      	adds	r7, #24
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}

0800606a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800606a:	b580      	push	{r7, lr}
 800606c:	b082      	sub	sp, #8
 800606e:	af00      	add	r7, sp, #0
 8006070:	4603      	mov	r3, r0
 8006072:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006078:	4618      	mov	r0, r3
 800607a:	f7ff ff31 	bl	8005ee0 <__NVIC_EnableIRQ>
}
 800607e:	bf00      	nop
 8006080:	3708      	adds	r7, #8
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}

08006086 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006086:	b580      	push	{r7, lr}
 8006088:	b082      	sub	sp, #8
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f7ff ffa2 	bl	8005fd8 <SysTick_Config>
 8006094:	4603      	mov	r3, r0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3708      	adds	r7, #8
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800609e:	b580      	push	{r7, lr}
 80060a0:	b082      	sub	sp, #8
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d101      	bne.n	80060b0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	e00e      	b.n	80060ce <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	795b      	ldrb	r3, [r3, #5]
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d105      	bne.n	80060c6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f7fd fc81 	bl	80039c8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2201      	movs	r2, #1
 80060ca:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3708      	adds	r7, #8
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}

080060d6 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80060d6:	b480      	push	{r7}
 80060d8:	b087      	sub	sp, #28
 80060da:	af00      	add	r7, sp, #0
 80060dc:	60f8      	str	r0, [r7, #12]
 80060de:	60b9      	str	r1, [r7, #8]
 80060e0:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80060e2:	2300      	movs	r3, #0
 80060e4:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2202      	movs	r2, #2
 80060ea:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	689a      	ldr	r2, [r3, #8]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f042 0201 	orr.w	r2, r2, #1
 80060fa:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80060fc:	2300      	movs	r3, #0
 80060fe:	617b      	str	r3, [r7, #20]
 8006100:	e00a      	b.n	8006118 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	68ba      	ldr	r2, [r7, #8]
 8006108:	441a      	add	r2, r3
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	6812      	ldr	r2, [r2, #0]
 8006110:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	3301      	adds	r3, #1
 8006116:	617b      	str	r3, [r7, #20]
 8006118:	697a      	ldr	r2, [r7, #20]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	429a      	cmp	r2, r3
 800611e:	d3f0      	bcc.n	8006102 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2201      	movs	r2, #1
 800612c:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 800612e:	693b      	ldr	r3, [r7, #16]
}
 8006130:	4618      	mov	r0, r3
 8006132:	371c      	adds	r7, #28
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d101      	bne.n	800614e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e014      	b.n	8006178 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	791b      	ldrb	r3, [r3, #4]
 8006152:	b2db      	uxtb	r3, r3
 8006154:	2b00      	cmp	r3, #0
 8006156:	d105      	bne.n	8006164 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f7fd fc90 	bl	8003a84 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2202      	movs	r2, #2
 8006168:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006176:	2300      	movs	r3, #0
}
 8006178:	4618      	mov	r0, r3
 800617a:	3708      	adds	r7, #8
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006192:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006196:	d120      	bne.n	80061da <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800619e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061a6:	d118      	bne.n	80061da <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2204      	movs	r2, #4
 80061ac:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	f043 0201 	orr.w	r2, r3, #1
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80061c2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80061d2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 f82d 	bl	8006234 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061e8:	d120      	bne.n	800622c <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061f8:	d118      	bne.n	800622c <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2204      	movs	r2, #4
 80061fe:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	f043 0202 	orr.w	r2, r3, #2
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006214:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006224:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 f85d 	bl	80062e6 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 800622c:	bf00      	nop
 800622e:	3708      	adds	r7, #8
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800623c:	bf00      	nop
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8006248:	b480      	push	{r7}
 800624a:	b087      	sub	sp, #28
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	795b      	ldrb	r3, [r3, #5]
 8006258:	2b01      	cmp	r3, #1
 800625a:	d101      	bne.n	8006260 <HAL_DAC_ConfigChannel+0x18>
 800625c:	2302      	movs	r3, #2
 800625e:	e03c      	b.n	80062da <HAL_DAC_ConfigChannel+0x92>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2201      	movs	r2, #1
 8006264:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2202      	movs	r2, #2
 800626a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f003 0310 	and.w	r3, r3, #16
 800627a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800627e:	fa02 f303 	lsl.w	r3, r2, r3
 8006282:	43db      	mvns	r3, r3
 8006284:	697a      	ldr	r2, [r7, #20]
 8006286:	4013      	ands	r3, r2
 8006288:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	4313      	orrs	r3, r2
 8006294:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f003 0310 	and.w	r3, r3, #16
 800629c:	693a      	ldr	r2, [r7, #16]
 800629e:	fa02 f303 	lsl.w	r3, r2, r3
 80062a2:	697a      	ldr	r2, [r7, #20]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	697a      	ldr	r2, [r7, #20]
 80062ae:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	6819      	ldr	r1, [r3, #0]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f003 0310 	and.w	r3, r3, #16
 80062bc:	22c0      	movs	r2, #192	; 0xc0
 80062be:	fa02 f303 	lsl.w	r3, r2, r3
 80062c2:	43da      	mvns	r2, r3
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	400a      	ands	r2, r1
 80062ca:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2201      	movs	r2, #1
 80062d0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	371c      	adds	r7, #28
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr

080062e6 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80062e6:	b480      	push	{r7}
 80062e8:	b083      	sub	sp, #12
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80062ee:	bf00      	nop
 80062f0:	370c      	adds	r7, #12
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr

080062fa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80062fa:	b580      	push	{r7, lr}
 80062fc:	b084      	sub	sp, #16
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006306:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006308:	f7ff fd88 	bl	8005e1c <HAL_GetTick>
 800630c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006314:	b2db      	uxtb	r3, r3
 8006316:	2b02      	cmp	r3, #2
 8006318:	d008      	beq.n	800632c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2280      	movs	r2, #128	; 0x80
 800631e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e052      	b.n	80063d2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f022 0216 	bic.w	r2, r2, #22
 800633a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	695a      	ldr	r2, [r3, #20]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800634a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006350:	2b00      	cmp	r3, #0
 8006352:	d103      	bne.n	800635c <HAL_DMA_Abort+0x62>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006358:	2b00      	cmp	r3, #0
 800635a:	d007      	beq.n	800636c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f022 0208 	bic.w	r2, r2, #8
 800636a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f022 0201 	bic.w	r2, r2, #1
 800637a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800637c:	e013      	b.n	80063a6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800637e:	f7ff fd4d 	bl	8005e1c <HAL_GetTick>
 8006382:	4602      	mov	r2, r0
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	2b05      	cmp	r3, #5
 800638a:	d90c      	bls.n	80063a6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2220      	movs	r2, #32
 8006390:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2203      	movs	r2, #3
 8006396:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80063a2:	2303      	movs	r3, #3
 80063a4:	e015      	b.n	80063d2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 0301 	and.w	r3, r3, #1
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d1e4      	bne.n	800637e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063b8:	223f      	movs	r2, #63	; 0x3f
 80063ba:	409a      	lsls	r2, r3
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3710      	adds	r7, #16
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}

080063da <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80063da:	b480      	push	{r7}
 80063dc:	b083      	sub	sp, #12
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d004      	beq.n	80063f8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2280      	movs	r2, #128	; 0x80
 80063f2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e00c      	b.n	8006412 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2205      	movs	r2, #5
 80063fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f022 0201 	bic.w	r2, r2, #1
 800640e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	370c      	adds	r7, #12
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
	...

08006420 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006420:	b480      	push	{r7}
 8006422:	b089      	sub	sp, #36	; 0x24
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800642a:	2300      	movs	r3, #0
 800642c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800642e:	2300      	movs	r3, #0
 8006430:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006432:	2300      	movs	r3, #0
 8006434:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006436:	2300      	movs	r3, #0
 8006438:	61fb      	str	r3, [r7, #28]
 800643a:	e16b      	b.n	8006714 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800643c:	2201      	movs	r2, #1
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	fa02 f303 	lsl.w	r3, r2, r3
 8006444:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	697a      	ldr	r2, [r7, #20]
 800644c:	4013      	ands	r3, r2
 800644e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006450:	693a      	ldr	r2, [r7, #16]
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	429a      	cmp	r2, r3
 8006456:	f040 815a 	bne.w	800670e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	f003 0303 	and.w	r3, r3, #3
 8006462:	2b01      	cmp	r3, #1
 8006464:	d005      	beq.n	8006472 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800646e:	2b02      	cmp	r3, #2
 8006470:	d130      	bne.n	80064d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	005b      	lsls	r3, r3, #1
 800647c:	2203      	movs	r2, #3
 800647e:	fa02 f303 	lsl.w	r3, r2, r3
 8006482:	43db      	mvns	r3, r3
 8006484:	69ba      	ldr	r2, [r7, #24]
 8006486:	4013      	ands	r3, r2
 8006488:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	68da      	ldr	r2, [r3, #12]
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	005b      	lsls	r3, r3, #1
 8006492:	fa02 f303 	lsl.w	r3, r2, r3
 8006496:	69ba      	ldr	r2, [r7, #24]
 8006498:	4313      	orrs	r3, r2
 800649a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	69ba      	ldr	r2, [r7, #24]
 80064a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80064a8:	2201      	movs	r2, #1
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	fa02 f303 	lsl.w	r3, r2, r3
 80064b0:	43db      	mvns	r3, r3
 80064b2:	69ba      	ldr	r2, [r7, #24]
 80064b4:	4013      	ands	r3, r2
 80064b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	091b      	lsrs	r3, r3, #4
 80064be:	f003 0201 	and.w	r2, r3, #1
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	fa02 f303 	lsl.w	r3, r2, r3
 80064c8:	69ba      	ldr	r2, [r7, #24]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	69ba      	ldr	r2, [r7, #24]
 80064d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	f003 0303 	and.w	r3, r3, #3
 80064dc:	2b03      	cmp	r3, #3
 80064de:	d017      	beq.n	8006510 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	005b      	lsls	r3, r3, #1
 80064ea:	2203      	movs	r2, #3
 80064ec:	fa02 f303 	lsl.w	r3, r2, r3
 80064f0:	43db      	mvns	r3, r3
 80064f2:	69ba      	ldr	r2, [r7, #24]
 80064f4:	4013      	ands	r3, r2
 80064f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	689a      	ldr	r2, [r3, #8]
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	005b      	lsls	r3, r3, #1
 8006500:	fa02 f303 	lsl.w	r3, r2, r3
 8006504:	69ba      	ldr	r2, [r7, #24]
 8006506:	4313      	orrs	r3, r2
 8006508:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	69ba      	ldr	r2, [r7, #24]
 800650e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	f003 0303 	and.w	r3, r3, #3
 8006518:	2b02      	cmp	r3, #2
 800651a:	d123      	bne.n	8006564 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	08da      	lsrs	r2, r3, #3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	3208      	adds	r2, #8
 8006524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006528:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	f003 0307 	and.w	r3, r3, #7
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	220f      	movs	r2, #15
 8006534:	fa02 f303 	lsl.w	r3, r2, r3
 8006538:	43db      	mvns	r3, r3
 800653a:	69ba      	ldr	r2, [r7, #24]
 800653c:	4013      	ands	r3, r2
 800653e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	691a      	ldr	r2, [r3, #16]
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	f003 0307 	and.w	r3, r3, #7
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	fa02 f303 	lsl.w	r3, r2, r3
 8006550:	69ba      	ldr	r2, [r7, #24]
 8006552:	4313      	orrs	r3, r2
 8006554:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	08da      	lsrs	r2, r3, #3
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	3208      	adds	r2, #8
 800655e:	69b9      	ldr	r1, [r7, #24]
 8006560:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	005b      	lsls	r3, r3, #1
 800656e:	2203      	movs	r2, #3
 8006570:	fa02 f303 	lsl.w	r3, r2, r3
 8006574:	43db      	mvns	r3, r3
 8006576:	69ba      	ldr	r2, [r7, #24]
 8006578:	4013      	ands	r3, r2
 800657a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	f003 0203 	and.w	r2, r3, #3
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	005b      	lsls	r3, r3, #1
 8006588:	fa02 f303 	lsl.w	r3, r2, r3
 800658c:	69ba      	ldr	r2, [r7, #24]
 800658e:	4313      	orrs	r3, r2
 8006590:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	69ba      	ldr	r2, [r7, #24]
 8006596:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	f000 80b4 	beq.w	800670e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065a6:	2300      	movs	r3, #0
 80065a8:	60fb      	str	r3, [r7, #12]
 80065aa:	4b60      	ldr	r3, [pc, #384]	; (800672c <HAL_GPIO_Init+0x30c>)
 80065ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ae:	4a5f      	ldr	r2, [pc, #380]	; (800672c <HAL_GPIO_Init+0x30c>)
 80065b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80065b4:	6453      	str	r3, [r2, #68]	; 0x44
 80065b6:	4b5d      	ldr	r3, [pc, #372]	; (800672c <HAL_GPIO_Init+0x30c>)
 80065b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065be:	60fb      	str	r3, [r7, #12]
 80065c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80065c2:	4a5b      	ldr	r2, [pc, #364]	; (8006730 <HAL_GPIO_Init+0x310>)
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	089b      	lsrs	r3, r3, #2
 80065c8:	3302      	adds	r3, #2
 80065ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	f003 0303 	and.w	r3, r3, #3
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	220f      	movs	r2, #15
 80065da:	fa02 f303 	lsl.w	r3, r2, r3
 80065de:	43db      	mvns	r3, r3
 80065e0:	69ba      	ldr	r2, [r7, #24]
 80065e2:	4013      	ands	r3, r2
 80065e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a52      	ldr	r2, [pc, #328]	; (8006734 <HAL_GPIO_Init+0x314>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d02b      	beq.n	8006646 <HAL_GPIO_Init+0x226>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a51      	ldr	r2, [pc, #324]	; (8006738 <HAL_GPIO_Init+0x318>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d025      	beq.n	8006642 <HAL_GPIO_Init+0x222>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a50      	ldr	r2, [pc, #320]	; (800673c <HAL_GPIO_Init+0x31c>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d01f      	beq.n	800663e <HAL_GPIO_Init+0x21e>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a4f      	ldr	r2, [pc, #316]	; (8006740 <HAL_GPIO_Init+0x320>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d019      	beq.n	800663a <HAL_GPIO_Init+0x21a>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a4e      	ldr	r2, [pc, #312]	; (8006744 <HAL_GPIO_Init+0x324>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d013      	beq.n	8006636 <HAL_GPIO_Init+0x216>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a4d      	ldr	r2, [pc, #308]	; (8006748 <HAL_GPIO_Init+0x328>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d00d      	beq.n	8006632 <HAL_GPIO_Init+0x212>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a4c      	ldr	r2, [pc, #304]	; (800674c <HAL_GPIO_Init+0x32c>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d007      	beq.n	800662e <HAL_GPIO_Init+0x20e>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a4b      	ldr	r2, [pc, #300]	; (8006750 <HAL_GPIO_Init+0x330>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d101      	bne.n	800662a <HAL_GPIO_Init+0x20a>
 8006626:	2307      	movs	r3, #7
 8006628:	e00e      	b.n	8006648 <HAL_GPIO_Init+0x228>
 800662a:	2308      	movs	r3, #8
 800662c:	e00c      	b.n	8006648 <HAL_GPIO_Init+0x228>
 800662e:	2306      	movs	r3, #6
 8006630:	e00a      	b.n	8006648 <HAL_GPIO_Init+0x228>
 8006632:	2305      	movs	r3, #5
 8006634:	e008      	b.n	8006648 <HAL_GPIO_Init+0x228>
 8006636:	2304      	movs	r3, #4
 8006638:	e006      	b.n	8006648 <HAL_GPIO_Init+0x228>
 800663a:	2303      	movs	r3, #3
 800663c:	e004      	b.n	8006648 <HAL_GPIO_Init+0x228>
 800663e:	2302      	movs	r3, #2
 8006640:	e002      	b.n	8006648 <HAL_GPIO_Init+0x228>
 8006642:	2301      	movs	r3, #1
 8006644:	e000      	b.n	8006648 <HAL_GPIO_Init+0x228>
 8006646:	2300      	movs	r3, #0
 8006648:	69fa      	ldr	r2, [r7, #28]
 800664a:	f002 0203 	and.w	r2, r2, #3
 800664e:	0092      	lsls	r2, r2, #2
 8006650:	4093      	lsls	r3, r2
 8006652:	69ba      	ldr	r2, [r7, #24]
 8006654:	4313      	orrs	r3, r2
 8006656:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006658:	4935      	ldr	r1, [pc, #212]	; (8006730 <HAL_GPIO_Init+0x310>)
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	089b      	lsrs	r3, r3, #2
 800665e:	3302      	adds	r3, #2
 8006660:	69ba      	ldr	r2, [r7, #24]
 8006662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006666:	4b3b      	ldr	r3, [pc, #236]	; (8006754 <HAL_GPIO_Init+0x334>)
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	43db      	mvns	r3, r3
 8006670:	69ba      	ldr	r2, [r7, #24]
 8006672:	4013      	ands	r3, r2
 8006674:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800667e:	2b00      	cmp	r3, #0
 8006680:	d003      	beq.n	800668a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006682:	69ba      	ldr	r2, [r7, #24]
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	4313      	orrs	r3, r2
 8006688:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800668a:	4a32      	ldr	r2, [pc, #200]	; (8006754 <HAL_GPIO_Init+0x334>)
 800668c:	69bb      	ldr	r3, [r7, #24]
 800668e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006690:	4b30      	ldr	r3, [pc, #192]	; (8006754 <HAL_GPIO_Init+0x334>)
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	43db      	mvns	r3, r3
 800669a:	69ba      	ldr	r2, [r7, #24]
 800669c:	4013      	ands	r3, r2
 800669e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d003      	beq.n	80066b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80066ac:	69ba      	ldr	r2, [r7, #24]
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	4313      	orrs	r3, r2
 80066b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80066b4:	4a27      	ldr	r2, [pc, #156]	; (8006754 <HAL_GPIO_Init+0x334>)
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80066ba:	4b26      	ldr	r3, [pc, #152]	; (8006754 <HAL_GPIO_Init+0x334>)
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	43db      	mvns	r3, r3
 80066c4:	69ba      	ldr	r2, [r7, #24]
 80066c6:	4013      	ands	r3, r2
 80066c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d003      	beq.n	80066de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80066d6:	69ba      	ldr	r2, [r7, #24]
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	4313      	orrs	r3, r2
 80066dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80066de:	4a1d      	ldr	r2, [pc, #116]	; (8006754 <HAL_GPIO_Init+0x334>)
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80066e4:	4b1b      	ldr	r3, [pc, #108]	; (8006754 <HAL_GPIO_Init+0x334>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	43db      	mvns	r3, r3
 80066ee:	69ba      	ldr	r2, [r7, #24]
 80066f0:	4013      	ands	r3, r2
 80066f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d003      	beq.n	8006708 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006700:	69ba      	ldr	r2, [r7, #24]
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	4313      	orrs	r3, r2
 8006706:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006708:	4a12      	ldr	r2, [pc, #72]	; (8006754 <HAL_GPIO_Init+0x334>)
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	3301      	adds	r3, #1
 8006712:	61fb      	str	r3, [r7, #28]
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	2b0f      	cmp	r3, #15
 8006718:	f67f ae90 	bls.w	800643c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800671c:	bf00      	nop
 800671e:	bf00      	nop
 8006720:	3724      	adds	r7, #36	; 0x24
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr
 800672a:	bf00      	nop
 800672c:	40023800 	.word	0x40023800
 8006730:	40013800 	.word	0x40013800
 8006734:	40020000 	.word	0x40020000
 8006738:	40020400 	.word	0x40020400
 800673c:	40020800 	.word	0x40020800
 8006740:	40020c00 	.word	0x40020c00
 8006744:	40021000 	.word	0x40021000
 8006748:	40021400 	.word	0x40021400
 800674c:	40021800 	.word	0x40021800
 8006750:	40021c00 	.word	0x40021c00
 8006754:	40013c00 	.word	0x40013c00

08006758 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	460b      	mov	r3, r1
 8006762:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	691a      	ldr	r2, [r3, #16]
 8006768:	887b      	ldrh	r3, [r7, #2]
 800676a:	4013      	ands	r3, r2
 800676c:	2b00      	cmp	r3, #0
 800676e:	d002      	beq.n	8006776 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006770:	2301      	movs	r3, #1
 8006772:	73fb      	strb	r3, [r7, #15]
 8006774:	e001      	b.n	800677a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006776:	2300      	movs	r3, #0
 8006778:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800677a:	7bfb      	ldrb	r3, [r7, #15]
}
 800677c:	4618      	mov	r0, r3
 800677e:	3714      	adds	r7, #20
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	460b      	mov	r3, r1
 8006792:	807b      	strh	r3, [r7, #2]
 8006794:	4613      	mov	r3, r2
 8006796:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006798:	787b      	ldrb	r3, [r7, #1]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d003      	beq.n	80067a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800679e:	887a      	ldrh	r2, [r7, #2]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80067a4:	e003      	b.n	80067ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80067a6:	887b      	ldrh	r3, [r7, #2]
 80067a8:	041a      	lsls	r2, r3, #16
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	619a      	str	r2, [r3, #24]
}
 80067ae:	bf00      	nop
 80067b0:	370c      	adds	r7, #12
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr

080067ba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80067ba:	b480      	push	{r7}
 80067bc:	b085      	sub	sp, #20
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
 80067c2:	460b      	mov	r3, r1
 80067c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	695b      	ldr	r3, [r3, #20]
 80067ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80067cc:	887a      	ldrh	r2, [r7, #2]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	4013      	ands	r3, r2
 80067d2:	041a      	lsls	r2, r3, #16
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	43d9      	mvns	r1, r3
 80067d8:	887b      	ldrh	r3, [r7, #2]
 80067da:	400b      	ands	r3, r1
 80067dc:	431a      	orrs	r2, r3
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	619a      	str	r2, [r3, #24]
}
 80067e2:	bf00      	nop
 80067e4:	3714      	adds	r7, #20
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr
	...

080067f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	4603      	mov	r3, r0
 80067f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80067fa:	4b08      	ldr	r3, [pc, #32]	; (800681c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80067fc:	695a      	ldr	r2, [r3, #20]
 80067fe:	88fb      	ldrh	r3, [r7, #6]
 8006800:	4013      	ands	r3, r2
 8006802:	2b00      	cmp	r3, #0
 8006804:	d006      	beq.n	8006814 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006806:	4a05      	ldr	r2, [pc, #20]	; (800681c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006808:	88fb      	ldrh	r3, [r7, #6]
 800680a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800680c:	88fb      	ldrh	r3, [r7, #6]
 800680e:	4618      	mov	r0, r3
 8006810:	f7fb fff0 	bl	80027f4 <HAL_GPIO_EXTI_Callback>
  }
}
 8006814:	bf00      	nop
 8006816:	3708      	adds	r7, #8
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}
 800681c:	40013c00 	.word	0x40013c00

08006820 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d101      	bne.n	8006832 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	e12b      	b.n	8006a8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006838:	b2db      	uxtb	r3, r3
 800683a:	2b00      	cmp	r3, #0
 800683c:	d106      	bne.n	800684c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f7fd fa96 	bl	8003d78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2224      	movs	r2, #36	; 0x24
 8006850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f022 0201 	bic.w	r2, r2, #1
 8006862:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006872:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006882:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006884:	f000 fd80 	bl	8007388 <HAL_RCC_GetPCLK1Freq>
 8006888:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	4a81      	ldr	r2, [pc, #516]	; (8006a94 <HAL_I2C_Init+0x274>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d807      	bhi.n	80068a4 <HAL_I2C_Init+0x84>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	4a80      	ldr	r2, [pc, #512]	; (8006a98 <HAL_I2C_Init+0x278>)
 8006898:	4293      	cmp	r3, r2
 800689a:	bf94      	ite	ls
 800689c:	2301      	movls	r3, #1
 800689e:	2300      	movhi	r3, #0
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	e006      	b.n	80068b2 <HAL_I2C_Init+0x92>
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	4a7d      	ldr	r2, [pc, #500]	; (8006a9c <HAL_I2C_Init+0x27c>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	bf94      	ite	ls
 80068ac:	2301      	movls	r3, #1
 80068ae:	2300      	movhi	r3, #0
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d001      	beq.n	80068ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	e0e7      	b.n	8006a8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	4a78      	ldr	r2, [pc, #480]	; (8006aa0 <HAL_I2C_Init+0x280>)
 80068be:	fba2 2303 	umull	r2, r3, r2, r3
 80068c2:	0c9b      	lsrs	r3, r3, #18
 80068c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68ba      	ldr	r2, [r7, #8]
 80068d6:	430a      	orrs	r2, r1
 80068d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	6a1b      	ldr	r3, [r3, #32]
 80068e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	4a6a      	ldr	r2, [pc, #424]	; (8006a94 <HAL_I2C_Init+0x274>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d802      	bhi.n	80068f4 <HAL_I2C_Init+0xd4>
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	3301      	adds	r3, #1
 80068f2:	e009      	b.n	8006908 <HAL_I2C_Init+0xe8>
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80068fa:	fb02 f303 	mul.w	r3, r2, r3
 80068fe:	4a69      	ldr	r2, [pc, #420]	; (8006aa4 <HAL_I2C_Init+0x284>)
 8006900:	fba2 2303 	umull	r2, r3, r2, r3
 8006904:	099b      	lsrs	r3, r3, #6
 8006906:	3301      	adds	r3, #1
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	6812      	ldr	r2, [r2, #0]
 800690c:	430b      	orrs	r3, r1
 800690e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	69db      	ldr	r3, [r3, #28]
 8006916:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800691a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	495c      	ldr	r1, [pc, #368]	; (8006a94 <HAL_I2C_Init+0x274>)
 8006924:	428b      	cmp	r3, r1
 8006926:	d819      	bhi.n	800695c <HAL_I2C_Init+0x13c>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	1e59      	subs	r1, r3, #1
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	005b      	lsls	r3, r3, #1
 8006932:	fbb1 f3f3 	udiv	r3, r1, r3
 8006936:	1c59      	adds	r1, r3, #1
 8006938:	f640 73fc 	movw	r3, #4092	; 0xffc
 800693c:	400b      	ands	r3, r1
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00a      	beq.n	8006958 <HAL_I2C_Init+0x138>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	1e59      	subs	r1, r3, #1
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	005b      	lsls	r3, r3, #1
 800694c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006950:	3301      	adds	r3, #1
 8006952:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006956:	e051      	b.n	80069fc <HAL_I2C_Init+0x1dc>
 8006958:	2304      	movs	r3, #4
 800695a:	e04f      	b.n	80069fc <HAL_I2C_Init+0x1dc>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d111      	bne.n	8006988 <HAL_I2C_Init+0x168>
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	1e58      	subs	r0, r3, #1
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6859      	ldr	r1, [r3, #4]
 800696c:	460b      	mov	r3, r1
 800696e:	005b      	lsls	r3, r3, #1
 8006970:	440b      	add	r3, r1
 8006972:	fbb0 f3f3 	udiv	r3, r0, r3
 8006976:	3301      	adds	r3, #1
 8006978:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800697c:	2b00      	cmp	r3, #0
 800697e:	bf0c      	ite	eq
 8006980:	2301      	moveq	r3, #1
 8006982:	2300      	movne	r3, #0
 8006984:	b2db      	uxtb	r3, r3
 8006986:	e012      	b.n	80069ae <HAL_I2C_Init+0x18e>
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	1e58      	subs	r0, r3, #1
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6859      	ldr	r1, [r3, #4]
 8006990:	460b      	mov	r3, r1
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	440b      	add	r3, r1
 8006996:	0099      	lsls	r1, r3, #2
 8006998:	440b      	add	r3, r1
 800699a:	fbb0 f3f3 	udiv	r3, r0, r3
 800699e:	3301      	adds	r3, #1
 80069a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	bf0c      	ite	eq
 80069a8:	2301      	moveq	r3, #1
 80069aa:	2300      	movne	r3, #0
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d001      	beq.n	80069b6 <HAL_I2C_Init+0x196>
 80069b2:	2301      	movs	r3, #1
 80069b4:	e022      	b.n	80069fc <HAL_I2C_Init+0x1dc>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d10e      	bne.n	80069dc <HAL_I2C_Init+0x1bc>
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	1e58      	subs	r0, r3, #1
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6859      	ldr	r1, [r3, #4]
 80069c6:	460b      	mov	r3, r1
 80069c8:	005b      	lsls	r3, r3, #1
 80069ca:	440b      	add	r3, r1
 80069cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80069d0:	3301      	adds	r3, #1
 80069d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069da:	e00f      	b.n	80069fc <HAL_I2C_Init+0x1dc>
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	1e58      	subs	r0, r3, #1
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6859      	ldr	r1, [r3, #4]
 80069e4:	460b      	mov	r3, r1
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	440b      	add	r3, r1
 80069ea:	0099      	lsls	r1, r3, #2
 80069ec:	440b      	add	r3, r1
 80069ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80069f2:	3301      	adds	r3, #1
 80069f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80069fc:	6879      	ldr	r1, [r7, #4]
 80069fe:	6809      	ldr	r1, [r1, #0]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	69da      	ldr	r2, [r3, #28]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a1b      	ldr	r3, [r3, #32]
 8006a16:	431a      	orrs	r2, r3
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	430a      	orrs	r2, r1
 8006a1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006a2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	6911      	ldr	r1, [r2, #16]
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	68d2      	ldr	r2, [r2, #12]
 8006a36:	4311      	orrs	r1, r2
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	6812      	ldr	r2, [r2, #0]
 8006a3c:	430b      	orrs	r3, r1
 8006a3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	695a      	ldr	r2, [r3, #20]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	699b      	ldr	r3, [r3, #24]
 8006a52:	431a      	orrs	r2, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	430a      	orrs	r2, r1
 8006a5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f042 0201 	orr.w	r2, r2, #1
 8006a6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2220      	movs	r2, #32
 8006a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3710      	adds	r7, #16
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
 8006a92:	bf00      	nop
 8006a94:	000186a0 	.word	0x000186a0
 8006a98:	001e847f 	.word	0x001e847f
 8006a9c:	003d08ff 	.word	0x003d08ff
 8006aa0:	431bde83 	.word	0x431bde83
 8006aa4:	10624dd3 	.word	0x10624dd3

08006aa8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b086      	sub	sp, #24
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d101      	bne.n	8006aba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e267      	b.n	8006f8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f003 0301 	and.w	r3, r3, #1
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d075      	beq.n	8006bb2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006ac6:	4b88      	ldr	r3, [pc, #544]	; (8006ce8 <HAL_RCC_OscConfig+0x240>)
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	f003 030c 	and.w	r3, r3, #12
 8006ace:	2b04      	cmp	r3, #4
 8006ad0:	d00c      	beq.n	8006aec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ad2:	4b85      	ldr	r3, [pc, #532]	; (8006ce8 <HAL_RCC_OscConfig+0x240>)
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006ada:	2b08      	cmp	r3, #8
 8006adc:	d112      	bne.n	8006b04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ade:	4b82      	ldr	r3, [pc, #520]	; (8006ce8 <HAL_RCC_OscConfig+0x240>)
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ae6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006aea:	d10b      	bne.n	8006b04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006aec:	4b7e      	ldr	r3, [pc, #504]	; (8006ce8 <HAL_RCC_OscConfig+0x240>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d05b      	beq.n	8006bb0 <HAL_RCC_OscConfig+0x108>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d157      	bne.n	8006bb0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	e242      	b.n	8006f8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b0c:	d106      	bne.n	8006b1c <HAL_RCC_OscConfig+0x74>
 8006b0e:	4b76      	ldr	r3, [pc, #472]	; (8006ce8 <HAL_RCC_OscConfig+0x240>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a75      	ldr	r2, [pc, #468]	; (8006ce8 <HAL_RCC_OscConfig+0x240>)
 8006b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b18:	6013      	str	r3, [r2, #0]
 8006b1a:	e01d      	b.n	8006b58 <HAL_RCC_OscConfig+0xb0>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b24:	d10c      	bne.n	8006b40 <HAL_RCC_OscConfig+0x98>
 8006b26:	4b70      	ldr	r3, [pc, #448]	; (8006ce8 <HAL_RCC_OscConfig+0x240>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a6f      	ldr	r2, [pc, #444]	; (8006ce8 <HAL_RCC_OscConfig+0x240>)
 8006b2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b30:	6013      	str	r3, [r2, #0]
 8006b32:	4b6d      	ldr	r3, [pc, #436]	; (8006ce8 <HAL_RCC_OscConfig+0x240>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a6c      	ldr	r2, [pc, #432]	; (8006ce8 <HAL_RCC_OscConfig+0x240>)
 8006b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b3c:	6013      	str	r3, [r2, #0]
 8006b3e:	e00b      	b.n	8006b58 <HAL_RCC_OscConfig+0xb0>
 8006b40:	4b69      	ldr	r3, [pc, #420]	; (8006ce8 <HAL_RCC_OscConfig+0x240>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a68      	ldr	r2, [pc, #416]	; (8006ce8 <HAL_RCC_OscConfig+0x240>)
 8006b46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b4a:	6013      	str	r3, [r2, #0]
 8006b4c:	4b66      	ldr	r3, [pc, #408]	; (8006ce8 <HAL_RCC_OscConfig+0x240>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a65      	ldr	r2, [pc, #404]	; (8006ce8 <HAL_RCC_OscConfig+0x240>)
 8006b52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d013      	beq.n	8006b88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b60:	f7ff f95c 	bl	8005e1c <HAL_GetTick>
 8006b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b66:	e008      	b.n	8006b7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b68:	f7ff f958 	bl	8005e1c <HAL_GetTick>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	2b64      	cmp	r3, #100	; 0x64
 8006b74:	d901      	bls.n	8006b7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006b76:	2303      	movs	r3, #3
 8006b78:	e207      	b.n	8006f8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b7a:	4b5b      	ldr	r3, [pc, #364]	; (8006ce8 <HAL_RCC_OscConfig+0x240>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d0f0      	beq.n	8006b68 <HAL_RCC_OscConfig+0xc0>
 8006b86:	e014      	b.n	8006bb2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b88:	f7ff f948 	bl	8005e1c <HAL_GetTick>
 8006b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b8e:	e008      	b.n	8006ba2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b90:	f7ff f944 	bl	8005e1c <HAL_GetTick>
 8006b94:	4602      	mov	r2, r0
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	1ad3      	subs	r3, r2, r3
 8006b9a:	2b64      	cmp	r3, #100	; 0x64
 8006b9c:	d901      	bls.n	8006ba2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	e1f3      	b.n	8006f8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ba2:	4b51      	ldr	r3, [pc, #324]	; (8006ce8 <HAL_RCC_OscConfig+0x240>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d1f0      	bne.n	8006b90 <HAL_RCC_OscConfig+0xe8>
 8006bae:	e000      	b.n	8006bb2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 0302 	and.w	r3, r3, #2
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d063      	beq.n	8006c86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006bbe:	4b4a      	ldr	r3, [pc, #296]	; (8006ce8 <HAL_RCC_OscConfig+0x240>)
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	f003 030c 	and.w	r3, r3, #12
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d00b      	beq.n	8006be2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bca:	4b47      	ldr	r3, [pc, #284]	; (8006ce8 <HAL_RCC_OscConfig+0x240>)
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006bd2:	2b08      	cmp	r3, #8
 8006bd4:	d11c      	bne.n	8006c10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bd6:	4b44      	ldr	r3, [pc, #272]	; (8006ce8 <HAL_RCC_OscConfig+0x240>)
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d116      	bne.n	8006c10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006be2:	4b41      	ldr	r3, [pc, #260]	; (8006ce8 <HAL_RCC_OscConfig+0x240>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 0302 	and.w	r3, r3, #2
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d005      	beq.n	8006bfa <HAL_RCC_OscConfig+0x152>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d001      	beq.n	8006bfa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e1c7      	b.n	8006f8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bfa:	4b3b      	ldr	r3, [pc, #236]	; (8006ce8 <HAL_RCC_OscConfig+0x240>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	00db      	lsls	r3, r3, #3
 8006c08:	4937      	ldr	r1, [pc, #220]	; (8006ce8 <HAL_RCC_OscConfig+0x240>)
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c0e:	e03a      	b.n	8006c86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d020      	beq.n	8006c5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c18:	4b34      	ldr	r3, [pc, #208]	; (8006cec <HAL_RCC_OscConfig+0x244>)
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c1e:	f7ff f8fd 	bl	8005e1c <HAL_GetTick>
 8006c22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c24:	e008      	b.n	8006c38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c26:	f7ff f8f9 	bl	8005e1c <HAL_GetTick>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	1ad3      	subs	r3, r2, r3
 8006c30:	2b02      	cmp	r3, #2
 8006c32:	d901      	bls.n	8006c38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006c34:	2303      	movs	r3, #3
 8006c36:	e1a8      	b.n	8006f8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c38:	4b2b      	ldr	r3, [pc, #172]	; (8006ce8 <HAL_RCC_OscConfig+0x240>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 0302 	and.w	r3, r3, #2
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d0f0      	beq.n	8006c26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c44:	4b28      	ldr	r3, [pc, #160]	; (8006ce8 <HAL_RCC_OscConfig+0x240>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	691b      	ldr	r3, [r3, #16]
 8006c50:	00db      	lsls	r3, r3, #3
 8006c52:	4925      	ldr	r1, [pc, #148]	; (8006ce8 <HAL_RCC_OscConfig+0x240>)
 8006c54:	4313      	orrs	r3, r2
 8006c56:	600b      	str	r3, [r1, #0]
 8006c58:	e015      	b.n	8006c86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c5a:	4b24      	ldr	r3, [pc, #144]	; (8006cec <HAL_RCC_OscConfig+0x244>)
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c60:	f7ff f8dc 	bl	8005e1c <HAL_GetTick>
 8006c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c66:	e008      	b.n	8006c7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c68:	f7ff f8d8 	bl	8005e1c <HAL_GetTick>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	1ad3      	subs	r3, r2, r3
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d901      	bls.n	8006c7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006c76:	2303      	movs	r3, #3
 8006c78:	e187      	b.n	8006f8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c7a:	4b1b      	ldr	r3, [pc, #108]	; (8006ce8 <HAL_RCC_OscConfig+0x240>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 0302 	and.w	r3, r3, #2
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d1f0      	bne.n	8006c68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 0308 	and.w	r3, r3, #8
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d036      	beq.n	8006d00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	695b      	ldr	r3, [r3, #20]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d016      	beq.n	8006cc8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c9a:	4b15      	ldr	r3, [pc, #84]	; (8006cf0 <HAL_RCC_OscConfig+0x248>)
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ca0:	f7ff f8bc 	bl	8005e1c <HAL_GetTick>
 8006ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ca6:	e008      	b.n	8006cba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ca8:	f7ff f8b8 	bl	8005e1c <HAL_GetTick>
 8006cac:	4602      	mov	r2, r0
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	2b02      	cmp	r3, #2
 8006cb4:	d901      	bls.n	8006cba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	e167      	b.n	8006f8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cba:	4b0b      	ldr	r3, [pc, #44]	; (8006ce8 <HAL_RCC_OscConfig+0x240>)
 8006cbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cbe:	f003 0302 	and.w	r3, r3, #2
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d0f0      	beq.n	8006ca8 <HAL_RCC_OscConfig+0x200>
 8006cc6:	e01b      	b.n	8006d00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006cc8:	4b09      	ldr	r3, [pc, #36]	; (8006cf0 <HAL_RCC_OscConfig+0x248>)
 8006cca:	2200      	movs	r2, #0
 8006ccc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cce:	f7ff f8a5 	bl	8005e1c <HAL_GetTick>
 8006cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cd4:	e00e      	b.n	8006cf4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cd6:	f7ff f8a1 	bl	8005e1c <HAL_GetTick>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	1ad3      	subs	r3, r2, r3
 8006ce0:	2b02      	cmp	r3, #2
 8006ce2:	d907      	bls.n	8006cf4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006ce4:	2303      	movs	r3, #3
 8006ce6:	e150      	b.n	8006f8a <HAL_RCC_OscConfig+0x4e2>
 8006ce8:	40023800 	.word	0x40023800
 8006cec:	42470000 	.word	0x42470000
 8006cf0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cf4:	4b88      	ldr	r3, [pc, #544]	; (8006f18 <HAL_RCC_OscConfig+0x470>)
 8006cf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cf8:	f003 0302 	and.w	r3, r3, #2
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1ea      	bne.n	8006cd6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0304 	and.w	r3, r3, #4
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	f000 8097 	beq.w	8006e3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d12:	4b81      	ldr	r3, [pc, #516]	; (8006f18 <HAL_RCC_OscConfig+0x470>)
 8006d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d10f      	bne.n	8006d3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d1e:	2300      	movs	r3, #0
 8006d20:	60bb      	str	r3, [r7, #8]
 8006d22:	4b7d      	ldr	r3, [pc, #500]	; (8006f18 <HAL_RCC_OscConfig+0x470>)
 8006d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d26:	4a7c      	ldr	r2, [pc, #496]	; (8006f18 <HAL_RCC_OscConfig+0x470>)
 8006d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8006d2e:	4b7a      	ldr	r3, [pc, #488]	; (8006f18 <HAL_RCC_OscConfig+0x470>)
 8006d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d36:	60bb      	str	r3, [r7, #8]
 8006d38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d3e:	4b77      	ldr	r3, [pc, #476]	; (8006f1c <HAL_RCC_OscConfig+0x474>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d118      	bne.n	8006d7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d4a:	4b74      	ldr	r3, [pc, #464]	; (8006f1c <HAL_RCC_OscConfig+0x474>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a73      	ldr	r2, [pc, #460]	; (8006f1c <HAL_RCC_OscConfig+0x474>)
 8006d50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d56:	f7ff f861 	bl	8005e1c <HAL_GetTick>
 8006d5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d5c:	e008      	b.n	8006d70 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d5e:	f7ff f85d 	bl	8005e1c <HAL_GetTick>
 8006d62:	4602      	mov	r2, r0
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	1ad3      	subs	r3, r2, r3
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	d901      	bls.n	8006d70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006d6c:	2303      	movs	r3, #3
 8006d6e:	e10c      	b.n	8006f8a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d70:	4b6a      	ldr	r3, [pc, #424]	; (8006f1c <HAL_RCC_OscConfig+0x474>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d0f0      	beq.n	8006d5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d106      	bne.n	8006d92 <HAL_RCC_OscConfig+0x2ea>
 8006d84:	4b64      	ldr	r3, [pc, #400]	; (8006f18 <HAL_RCC_OscConfig+0x470>)
 8006d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d88:	4a63      	ldr	r2, [pc, #396]	; (8006f18 <HAL_RCC_OscConfig+0x470>)
 8006d8a:	f043 0301 	orr.w	r3, r3, #1
 8006d8e:	6713      	str	r3, [r2, #112]	; 0x70
 8006d90:	e01c      	b.n	8006dcc <HAL_RCC_OscConfig+0x324>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	2b05      	cmp	r3, #5
 8006d98:	d10c      	bne.n	8006db4 <HAL_RCC_OscConfig+0x30c>
 8006d9a:	4b5f      	ldr	r3, [pc, #380]	; (8006f18 <HAL_RCC_OscConfig+0x470>)
 8006d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d9e:	4a5e      	ldr	r2, [pc, #376]	; (8006f18 <HAL_RCC_OscConfig+0x470>)
 8006da0:	f043 0304 	orr.w	r3, r3, #4
 8006da4:	6713      	str	r3, [r2, #112]	; 0x70
 8006da6:	4b5c      	ldr	r3, [pc, #368]	; (8006f18 <HAL_RCC_OscConfig+0x470>)
 8006da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006daa:	4a5b      	ldr	r2, [pc, #364]	; (8006f18 <HAL_RCC_OscConfig+0x470>)
 8006dac:	f043 0301 	orr.w	r3, r3, #1
 8006db0:	6713      	str	r3, [r2, #112]	; 0x70
 8006db2:	e00b      	b.n	8006dcc <HAL_RCC_OscConfig+0x324>
 8006db4:	4b58      	ldr	r3, [pc, #352]	; (8006f18 <HAL_RCC_OscConfig+0x470>)
 8006db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006db8:	4a57      	ldr	r2, [pc, #348]	; (8006f18 <HAL_RCC_OscConfig+0x470>)
 8006dba:	f023 0301 	bic.w	r3, r3, #1
 8006dbe:	6713      	str	r3, [r2, #112]	; 0x70
 8006dc0:	4b55      	ldr	r3, [pc, #340]	; (8006f18 <HAL_RCC_OscConfig+0x470>)
 8006dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dc4:	4a54      	ldr	r2, [pc, #336]	; (8006f18 <HAL_RCC_OscConfig+0x470>)
 8006dc6:	f023 0304 	bic.w	r3, r3, #4
 8006dca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d015      	beq.n	8006e00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dd4:	f7ff f822 	bl	8005e1c <HAL_GetTick>
 8006dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dda:	e00a      	b.n	8006df2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ddc:	f7ff f81e 	bl	8005e1c <HAL_GetTick>
 8006de0:	4602      	mov	r2, r0
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	1ad3      	subs	r3, r2, r3
 8006de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d901      	bls.n	8006df2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006dee:	2303      	movs	r3, #3
 8006df0:	e0cb      	b.n	8006f8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006df2:	4b49      	ldr	r3, [pc, #292]	; (8006f18 <HAL_RCC_OscConfig+0x470>)
 8006df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006df6:	f003 0302 	and.w	r3, r3, #2
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d0ee      	beq.n	8006ddc <HAL_RCC_OscConfig+0x334>
 8006dfe:	e014      	b.n	8006e2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e00:	f7ff f80c 	bl	8005e1c <HAL_GetTick>
 8006e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e06:	e00a      	b.n	8006e1e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e08:	f7ff f808 	bl	8005e1c <HAL_GetTick>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	1ad3      	subs	r3, r2, r3
 8006e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d901      	bls.n	8006e1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006e1a:	2303      	movs	r3, #3
 8006e1c:	e0b5      	b.n	8006f8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e1e:	4b3e      	ldr	r3, [pc, #248]	; (8006f18 <HAL_RCC_OscConfig+0x470>)
 8006e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e22:	f003 0302 	and.w	r3, r3, #2
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d1ee      	bne.n	8006e08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e2a:	7dfb      	ldrb	r3, [r7, #23]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d105      	bne.n	8006e3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e30:	4b39      	ldr	r3, [pc, #228]	; (8006f18 <HAL_RCC_OscConfig+0x470>)
 8006e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e34:	4a38      	ldr	r2, [pc, #224]	; (8006f18 <HAL_RCC_OscConfig+0x470>)
 8006e36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e3a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	699b      	ldr	r3, [r3, #24]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	f000 80a1 	beq.w	8006f88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e46:	4b34      	ldr	r3, [pc, #208]	; (8006f18 <HAL_RCC_OscConfig+0x470>)
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	f003 030c 	and.w	r3, r3, #12
 8006e4e:	2b08      	cmp	r3, #8
 8006e50:	d05c      	beq.n	8006f0c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	699b      	ldr	r3, [r3, #24]
 8006e56:	2b02      	cmp	r3, #2
 8006e58:	d141      	bne.n	8006ede <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e5a:	4b31      	ldr	r3, [pc, #196]	; (8006f20 <HAL_RCC_OscConfig+0x478>)
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e60:	f7fe ffdc 	bl	8005e1c <HAL_GetTick>
 8006e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e66:	e008      	b.n	8006e7a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e68:	f7fe ffd8 	bl	8005e1c <HAL_GetTick>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	1ad3      	subs	r3, r2, r3
 8006e72:	2b02      	cmp	r3, #2
 8006e74:	d901      	bls.n	8006e7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006e76:	2303      	movs	r3, #3
 8006e78:	e087      	b.n	8006f8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e7a:	4b27      	ldr	r3, [pc, #156]	; (8006f18 <HAL_RCC_OscConfig+0x470>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d1f0      	bne.n	8006e68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	69da      	ldr	r2, [r3, #28]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a1b      	ldr	r3, [r3, #32]
 8006e8e:	431a      	orrs	r2, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e94:	019b      	lsls	r3, r3, #6
 8006e96:	431a      	orrs	r2, r3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e9c:	085b      	lsrs	r3, r3, #1
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	041b      	lsls	r3, r3, #16
 8006ea2:	431a      	orrs	r2, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea8:	061b      	lsls	r3, r3, #24
 8006eaa:	491b      	ldr	r1, [pc, #108]	; (8006f18 <HAL_RCC_OscConfig+0x470>)
 8006eac:	4313      	orrs	r3, r2
 8006eae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006eb0:	4b1b      	ldr	r3, [pc, #108]	; (8006f20 <HAL_RCC_OscConfig+0x478>)
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006eb6:	f7fe ffb1 	bl	8005e1c <HAL_GetTick>
 8006eba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ebc:	e008      	b.n	8006ed0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ebe:	f7fe ffad 	bl	8005e1c <HAL_GetTick>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	1ad3      	subs	r3, r2, r3
 8006ec8:	2b02      	cmp	r3, #2
 8006eca:	d901      	bls.n	8006ed0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006ecc:	2303      	movs	r3, #3
 8006ece:	e05c      	b.n	8006f8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ed0:	4b11      	ldr	r3, [pc, #68]	; (8006f18 <HAL_RCC_OscConfig+0x470>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d0f0      	beq.n	8006ebe <HAL_RCC_OscConfig+0x416>
 8006edc:	e054      	b.n	8006f88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ede:	4b10      	ldr	r3, [pc, #64]	; (8006f20 <HAL_RCC_OscConfig+0x478>)
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ee4:	f7fe ff9a 	bl	8005e1c <HAL_GetTick>
 8006ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006eea:	e008      	b.n	8006efe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006eec:	f7fe ff96 	bl	8005e1c <HAL_GetTick>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	1ad3      	subs	r3, r2, r3
 8006ef6:	2b02      	cmp	r3, #2
 8006ef8:	d901      	bls.n	8006efe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006efa:	2303      	movs	r3, #3
 8006efc:	e045      	b.n	8006f8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006efe:	4b06      	ldr	r3, [pc, #24]	; (8006f18 <HAL_RCC_OscConfig+0x470>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d1f0      	bne.n	8006eec <HAL_RCC_OscConfig+0x444>
 8006f0a:	e03d      	b.n	8006f88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	699b      	ldr	r3, [r3, #24]
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d107      	bne.n	8006f24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	e038      	b.n	8006f8a <HAL_RCC_OscConfig+0x4e2>
 8006f18:	40023800 	.word	0x40023800
 8006f1c:	40007000 	.word	0x40007000
 8006f20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006f24:	4b1b      	ldr	r3, [pc, #108]	; (8006f94 <HAL_RCC_OscConfig+0x4ec>)
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	699b      	ldr	r3, [r3, #24]
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d028      	beq.n	8006f84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d121      	bne.n	8006f84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d11a      	bne.n	8006f84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f4e:	68fa      	ldr	r2, [r7, #12]
 8006f50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006f54:	4013      	ands	r3, r2
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006f5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d111      	bne.n	8006f84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f6a:	085b      	lsrs	r3, r3, #1
 8006f6c:	3b01      	subs	r3, #1
 8006f6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d107      	bne.n	8006f84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d001      	beq.n	8006f88 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	e000      	b.n	8006f8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006f88:	2300      	movs	r3, #0
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3718      	adds	r7, #24
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop
 8006f94:	40023800 	.word	0x40023800

08006f98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d101      	bne.n	8006fac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e0cc      	b.n	8007146 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006fac:	4b68      	ldr	r3, [pc, #416]	; (8007150 <HAL_RCC_ClockConfig+0x1b8>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f003 0307 	and.w	r3, r3, #7
 8006fb4:	683a      	ldr	r2, [r7, #0]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d90c      	bls.n	8006fd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fba:	4b65      	ldr	r3, [pc, #404]	; (8007150 <HAL_RCC_ClockConfig+0x1b8>)
 8006fbc:	683a      	ldr	r2, [r7, #0]
 8006fbe:	b2d2      	uxtb	r2, r2
 8006fc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fc2:	4b63      	ldr	r3, [pc, #396]	; (8007150 <HAL_RCC_ClockConfig+0x1b8>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f003 0307 	and.w	r3, r3, #7
 8006fca:	683a      	ldr	r2, [r7, #0]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d001      	beq.n	8006fd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e0b8      	b.n	8007146 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f003 0302 	and.w	r3, r3, #2
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d020      	beq.n	8007022 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 0304 	and.w	r3, r3, #4
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d005      	beq.n	8006ff8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006fec:	4b59      	ldr	r3, [pc, #356]	; (8007154 <HAL_RCC_ClockConfig+0x1bc>)
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	4a58      	ldr	r2, [pc, #352]	; (8007154 <HAL_RCC_ClockConfig+0x1bc>)
 8006ff2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006ff6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f003 0308 	and.w	r3, r3, #8
 8007000:	2b00      	cmp	r3, #0
 8007002:	d005      	beq.n	8007010 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007004:	4b53      	ldr	r3, [pc, #332]	; (8007154 <HAL_RCC_ClockConfig+0x1bc>)
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	4a52      	ldr	r2, [pc, #328]	; (8007154 <HAL_RCC_ClockConfig+0x1bc>)
 800700a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800700e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007010:	4b50      	ldr	r3, [pc, #320]	; (8007154 <HAL_RCC_ClockConfig+0x1bc>)
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	494d      	ldr	r1, [pc, #308]	; (8007154 <HAL_RCC_ClockConfig+0x1bc>)
 800701e:	4313      	orrs	r3, r2
 8007020:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f003 0301 	and.w	r3, r3, #1
 800702a:	2b00      	cmp	r3, #0
 800702c:	d044      	beq.n	80070b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	2b01      	cmp	r3, #1
 8007034:	d107      	bne.n	8007046 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007036:	4b47      	ldr	r3, [pc, #284]	; (8007154 <HAL_RCC_ClockConfig+0x1bc>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800703e:	2b00      	cmp	r3, #0
 8007040:	d119      	bne.n	8007076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	e07f      	b.n	8007146 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	2b02      	cmp	r3, #2
 800704c:	d003      	beq.n	8007056 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007052:	2b03      	cmp	r3, #3
 8007054:	d107      	bne.n	8007066 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007056:	4b3f      	ldr	r3, [pc, #252]	; (8007154 <HAL_RCC_ClockConfig+0x1bc>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800705e:	2b00      	cmp	r3, #0
 8007060:	d109      	bne.n	8007076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	e06f      	b.n	8007146 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007066:	4b3b      	ldr	r3, [pc, #236]	; (8007154 <HAL_RCC_ClockConfig+0x1bc>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f003 0302 	and.w	r3, r3, #2
 800706e:	2b00      	cmp	r3, #0
 8007070:	d101      	bne.n	8007076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	e067      	b.n	8007146 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007076:	4b37      	ldr	r3, [pc, #220]	; (8007154 <HAL_RCC_ClockConfig+0x1bc>)
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	f023 0203 	bic.w	r2, r3, #3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	4934      	ldr	r1, [pc, #208]	; (8007154 <HAL_RCC_ClockConfig+0x1bc>)
 8007084:	4313      	orrs	r3, r2
 8007086:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007088:	f7fe fec8 	bl	8005e1c <HAL_GetTick>
 800708c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800708e:	e00a      	b.n	80070a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007090:	f7fe fec4 	bl	8005e1c <HAL_GetTick>
 8007094:	4602      	mov	r2, r0
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	1ad3      	subs	r3, r2, r3
 800709a:	f241 3288 	movw	r2, #5000	; 0x1388
 800709e:	4293      	cmp	r3, r2
 80070a0:	d901      	bls.n	80070a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80070a2:	2303      	movs	r3, #3
 80070a4:	e04f      	b.n	8007146 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070a6:	4b2b      	ldr	r3, [pc, #172]	; (8007154 <HAL_RCC_ClockConfig+0x1bc>)
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	f003 020c 	and.w	r2, r3, #12
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d1eb      	bne.n	8007090 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80070b8:	4b25      	ldr	r3, [pc, #148]	; (8007150 <HAL_RCC_ClockConfig+0x1b8>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 0307 	and.w	r3, r3, #7
 80070c0:	683a      	ldr	r2, [r7, #0]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d20c      	bcs.n	80070e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070c6:	4b22      	ldr	r3, [pc, #136]	; (8007150 <HAL_RCC_ClockConfig+0x1b8>)
 80070c8:	683a      	ldr	r2, [r7, #0]
 80070ca:	b2d2      	uxtb	r2, r2
 80070cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070ce:	4b20      	ldr	r3, [pc, #128]	; (8007150 <HAL_RCC_ClockConfig+0x1b8>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 0307 	and.w	r3, r3, #7
 80070d6:	683a      	ldr	r2, [r7, #0]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d001      	beq.n	80070e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	e032      	b.n	8007146 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 0304 	and.w	r3, r3, #4
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d008      	beq.n	80070fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070ec:	4b19      	ldr	r3, [pc, #100]	; (8007154 <HAL_RCC_ClockConfig+0x1bc>)
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	4916      	ldr	r1, [pc, #88]	; (8007154 <HAL_RCC_ClockConfig+0x1bc>)
 80070fa:	4313      	orrs	r3, r2
 80070fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f003 0308 	and.w	r3, r3, #8
 8007106:	2b00      	cmp	r3, #0
 8007108:	d009      	beq.n	800711e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800710a:	4b12      	ldr	r3, [pc, #72]	; (8007154 <HAL_RCC_ClockConfig+0x1bc>)
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	00db      	lsls	r3, r3, #3
 8007118:	490e      	ldr	r1, [pc, #56]	; (8007154 <HAL_RCC_ClockConfig+0x1bc>)
 800711a:	4313      	orrs	r3, r2
 800711c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800711e:	f000 f821 	bl	8007164 <HAL_RCC_GetSysClockFreq>
 8007122:	4602      	mov	r2, r0
 8007124:	4b0b      	ldr	r3, [pc, #44]	; (8007154 <HAL_RCC_ClockConfig+0x1bc>)
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	091b      	lsrs	r3, r3, #4
 800712a:	f003 030f 	and.w	r3, r3, #15
 800712e:	490a      	ldr	r1, [pc, #40]	; (8007158 <HAL_RCC_ClockConfig+0x1c0>)
 8007130:	5ccb      	ldrb	r3, [r1, r3]
 8007132:	fa22 f303 	lsr.w	r3, r2, r3
 8007136:	4a09      	ldr	r2, [pc, #36]	; (800715c <HAL_RCC_ClockConfig+0x1c4>)
 8007138:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800713a:	4b09      	ldr	r3, [pc, #36]	; (8007160 <HAL_RCC_ClockConfig+0x1c8>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4618      	mov	r0, r3
 8007140:	f7fe fe28 	bl	8005d94 <HAL_InitTick>

  return HAL_OK;
 8007144:	2300      	movs	r3, #0
}
 8007146:	4618      	mov	r0, r3
 8007148:	3710      	adds	r7, #16
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	40023c00 	.word	0x40023c00
 8007154:	40023800 	.word	0x40023800
 8007158:	0800e750 	.word	0x0800e750
 800715c:	2000000c 	.word	0x2000000c
 8007160:	20000010 	.word	0x20000010

08007164 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007164:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007168:	b094      	sub	sp, #80	; 0x50
 800716a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800716c:	2300      	movs	r3, #0
 800716e:	647b      	str	r3, [r7, #68]	; 0x44
 8007170:	2300      	movs	r3, #0
 8007172:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007174:	2300      	movs	r3, #0
 8007176:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007178:	2300      	movs	r3, #0
 800717a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800717c:	4b79      	ldr	r3, [pc, #484]	; (8007364 <HAL_RCC_GetSysClockFreq+0x200>)
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	f003 030c 	and.w	r3, r3, #12
 8007184:	2b08      	cmp	r3, #8
 8007186:	d00d      	beq.n	80071a4 <HAL_RCC_GetSysClockFreq+0x40>
 8007188:	2b08      	cmp	r3, #8
 800718a:	f200 80e1 	bhi.w	8007350 <HAL_RCC_GetSysClockFreq+0x1ec>
 800718e:	2b00      	cmp	r3, #0
 8007190:	d002      	beq.n	8007198 <HAL_RCC_GetSysClockFreq+0x34>
 8007192:	2b04      	cmp	r3, #4
 8007194:	d003      	beq.n	800719e <HAL_RCC_GetSysClockFreq+0x3a>
 8007196:	e0db      	b.n	8007350 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007198:	4b73      	ldr	r3, [pc, #460]	; (8007368 <HAL_RCC_GetSysClockFreq+0x204>)
 800719a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800719c:	e0db      	b.n	8007356 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800719e:	4b73      	ldr	r3, [pc, #460]	; (800736c <HAL_RCC_GetSysClockFreq+0x208>)
 80071a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80071a2:	e0d8      	b.n	8007356 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80071a4:	4b6f      	ldr	r3, [pc, #444]	; (8007364 <HAL_RCC_GetSysClockFreq+0x200>)
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071ac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80071ae:	4b6d      	ldr	r3, [pc, #436]	; (8007364 <HAL_RCC_GetSysClockFreq+0x200>)
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d063      	beq.n	8007282 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071ba:	4b6a      	ldr	r3, [pc, #424]	; (8007364 <HAL_RCC_GetSysClockFreq+0x200>)
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	099b      	lsrs	r3, r3, #6
 80071c0:	2200      	movs	r2, #0
 80071c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80071c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80071c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071cc:	633b      	str	r3, [r7, #48]	; 0x30
 80071ce:	2300      	movs	r3, #0
 80071d0:	637b      	str	r3, [r7, #52]	; 0x34
 80071d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80071d6:	4622      	mov	r2, r4
 80071d8:	462b      	mov	r3, r5
 80071da:	f04f 0000 	mov.w	r0, #0
 80071de:	f04f 0100 	mov.w	r1, #0
 80071e2:	0159      	lsls	r1, r3, #5
 80071e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80071e8:	0150      	lsls	r0, r2, #5
 80071ea:	4602      	mov	r2, r0
 80071ec:	460b      	mov	r3, r1
 80071ee:	4621      	mov	r1, r4
 80071f0:	1a51      	subs	r1, r2, r1
 80071f2:	6139      	str	r1, [r7, #16]
 80071f4:	4629      	mov	r1, r5
 80071f6:	eb63 0301 	sbc.w	r3, r3, r1
 80071fa:	617b      	str	r3, [r7, #20]
 80071fc:	f04f 0200 	mov.w	r2, #0
 8007200:	f04f 0300 	mov.w	r3, #0
 8007204:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007208:	4659      	mov	r1, fp
 800720a:	018b      	lsls	r3, r1, #6
 800720c:	4651      	mov	r1, sl
 800720e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007212:	4651      	mov	r1, sl
 8007214:	018a      	lsls	r2, r1, #6
 8007216:	4651      	mov	r1, sl
 8007218:	ebb2 0801 	subs.w	r8, r2, r1
 800721c:	4659      	mov	r1, fp
 800721e:	eb63 0901 	sbc.w	r9, r3, r1
 8007222:	f04f 0200 	mov.w	r2, #0
 8007226:	f04f 0300 	mov.w	r3, #0
 800722a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800722e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007232:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007236:	4690      	mov	r8, r2
 8007238:	4699      	mov	r9, r3
 800723a:	4623      	mov	r3, r4
 800723c:	eb18 0303 	adds.w	r3, r8, r3
 8007240:	60bb      	str	r3, [r7, #8]
 8007242:	462b      	mov	r3, r5
 8007244:	eb49 0303 	adc.w	r3, r9, r3
 8007248:	60fb      	str	r3, [r7, #12]
 800724a:	f04f 0200 	mov.w	r2, #0
 800724e:	f04f 0300 	mov.w	r3, #0
 8007252:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007256:	4629      	mov	r1, r5
 8007258:	024b      	lsls	r3, r1, #9
 800725a:	4621      	mov	r1, r4
 800725c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007260:	4621      	mov	r1, r4
 8007262:	024a      	lsls	r2, r1, #9
 8007264:	4610      	mov	r0, r2
 8007266:	4619      	mov	r1, r3
 8007268:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800726a:	2200      	movs	r2, #0
 800726c:	62bb      	str	r3, [r7, #40]	; 0x28
 800726e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007270:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007274:	f7f9 fc98 	bl	8000ba8 <__aeabi_uldivmod>
 8007278:	4602      	mov	r2, r0
 800727a:	460b      	mov	r3, r1
 800727c:	4613      	mov	r3, r2
 800727e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007280:	e058      	b.n	8007334 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007282:	4b38      	ldr	r3, [pc, #224]	; (8007364 <HAL_RCC_GetSysClockFreq+0x200>)
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	099b      	lsrs	r3, r3, #6
 8007288:	2200      	movs	r2, #0
 800728a:	4618      	mov	r0, r3
 800728c:	4611      	mov	r1, r2
 800728e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007292:	623b      	str	r3, [r7, #32]
 8007294:	2300      	movs	r3, #0
 8007296:	627b      	str	r3, [r7, #36]	; 0x24
 8007298:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800729c:	4642      	mov	r2, r8
 800729e:	464b      	mov	r3, r9
 80072a0:	f04f 0000 	mov.w	r0, #0
 80072a4:	f04f 0100 	mov.w	r1, #0
 80072a8:	0159      	lsls	r1, r3, #5
 80072aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80072ae:	0150      	lsls	r0, r2, #5
 80072b0:	4602      	mov	r2, r0
 80072b2:	460b      	mov	r3, r1
 80072b4:	4641      	mov	r1, r8
 80072b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80072ba:	4649      	mov	r1, r9
 80072bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80072c0:	f04f 0200 	mov.w	r2, #0
 80072c4:	f04f 0300 	mov.w	r3, #0
 80072c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80072cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80072d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80072d4:	ebb2 040a 	subs.w	r4, r2, sl
 80072d8:	eb63 050b 	sbc.w	r5, r3, fp
 80072dc:	f04f 0200 	mov.w	r2, #0
 80072e0:	f04f 0300 	mov.w	r3, #0
 80072e4:	00eb      	lsls	r3, r5, #3
 80072e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80072ea:	00e2      	lsls	r2, r4, #3
 80072ec:	4614      	mov	r4, r2
 80072ee:	461d      	mov	r5, r3
 80072f0:	4643      	mov	r3, r8
 80072f2:	18e3      	adds	r3, r4, r3
 80072f4:	603b      	str	r3, [r7, #0]
 80072f6:	464b      	mov	r3, r9
 80072f8:	eb45 0303 	adc.w	r3, r5, r3
 80072fc:	607b      	str	r3, [r7, #4]
 80072fe:	f04f 0200 	mov.w	r2, #0
 8007302:	f04f 0300 	mov.w	r3, #0
 8007306:	e9d7 4500 	ldrd	r4, r5, [r7]
 800730a:	4629      	mov	r1, r5
 800730c:	028b      	lsls	r3, r1, #10
 800730e:	4621      	mov	r1, r4
 8007310:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007314:	4621      	mov	r1, r4
 8007316:	028a      	lsls	r2, r1, #10
 8007318:	4610      	mov	r0, r2
 800731a:	4619      	mov	r1, r3
 800731c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800731e:	2200      	movs	r2, #0
 8007320:	61bb      	str	r3, [r7, #24]
 8007322:	61fa      	str	r2, [r7, #28]
 8007324:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007328:	f7f9 fc3e 	bl	8000ba8 <__aeabi_uldivmod>
 800732c:	4602      	mov	r2, r0
 800732e:	460b      	mov	r3, r1
 8007330:	4613      	mov	r3, r2
 8007332:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007334:	4b0b      	ldr	r3, [pc, #44]	; (8007364 <HAL_RCC_GetSysClockFreq+0x200>)
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	0c1b      	lsrs	r3, r3, #16
 800733a:	f003 0303 	and.w	r3, r3, #3
 800733e:	3301      	adds	r3, #1
 8007340:	005b      	lsls	r3, r3, #1
 8007342:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007344:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007348:	fbb2 f3f3 	udiv	r3, r2, r3
 800734c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800734e:	e002      	b.n	8007356 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007350:	4b05      	ldr	r3, [pc, #20]	; (8007368 <HAL_RCC_GetSysClockFreq+0x204>)
 8007352:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007354:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007356:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007358:	4618      	mov	r0, r3
 800735a:	3750      	adds	r7, #80	; 0x50
 800735c:	46bd      	mov	sp, r7
 800735e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007362:	bf00      	nop
 8007364:	40023800 	.word	0x40023800
 8007368:	00f42400 	.word	0x00f42400
 800736c:	007a1200 	.word	0x007a1200

08007370 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007370:	b480      	push	{r7}
 8007372:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007374:	4b03      	ldr	r3, [pc, #12]	; (8007384 <HAL_RCC_GetHCLKFreq+0x14>)
 8007376:	681b      	ldr	r3, [r3, #0]
}
 8007378:	4618      	mov	r0, r3
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr
 8007382:	bf00      	nop
 8007384:	2000000c 	.word	0x2000000c

08007388 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800738c:	f7ff fff0 	bl	8007370 <HAL_RCC_GetHCLKFreq>
 8007390:	4602      	mov	r2, r0
 8007392:	4b05      	ldr	r3, [pc, #20]	; (80073a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	0a9b      	lsrs	r3, r3, #10
 8007398:	f003 0307 	and.w	r3, r3, #7
 800739c:	4903      	ldr	r1, [pc, #12]	; (80073ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800739e:	5ccb      	ldrb	r3, [r1, r3]
 80073a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	bd80      	pop	{r7, pc}
 80073a8:	40023800 	.word	0x40023800
 80073ac:	0800e760 	.word	0x0800e760

080073b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80073b4:	f7ff ffdc 	bl	8007370 <HAL_RCC_GetHCLKFreq>
 80073b8:	4602      	mov	r2, r0
 80073ba:	4b05      	ldr	r3, [pc, #20]	; (80073d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	0b5b      	lsrs	r3, r3, #13
 80073c0:	f003 0307 	and.w	r3, r3, #7
 80073c4:	4903      	ldr	r1, [pc, #12]	; (80073d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80073c6:	5ccb      	ldrb	r3, [r1, r3]
 80073c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	40023800 	.word	0x40023800
 80073d4:	0800e760 	.word	0x0800e760

080073d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80073d8:	b480      	push	{r7}
 80073da:	b083      	sub	sp, #12
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	220f      	movs	r2, #15
 80073e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80073e8:	4b12      	ldr	r3, [pc, #72]	; (8007434 <HAL_RCC_GetClockConfig+0x5c>)
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	f003 0203 	and.w	r2, r3, #3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80073f4:	4b0f      	ldr	r3, [pc, #60]	; (8007434 <HAL_RCC_GetClockConfig+0x5c>)
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007400:	4b0c      	ldr	r3, [pc, #48]	; (8007434 <HAL_RCC_GetClockConfig+0x5c>)
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800740c:	4b09      	ldr	r3, [pc, #36]	; (8007434 <HAL_RCC_GetClockConfig+0x5c>)
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	08db      	lsrs	r3, r3, #3
 8007412:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800741a:	4b07      	ldr	r3, [pc, #28]	; (8007438 <HAL_RCC_GetClockConfig+0x60>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f003 0207 	and.w	r2, r3, #7
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	601a      	str	r2, [r3, #0]
}
 8007426:	bf00      	nop
 8007428:	370c      	adds	r7, #12
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr
 8007432:	bf00      	nop
 8007434:	40023800 	.word	0x40023800
 8007438:	40023c00 	.word	0x40023c00

0800743c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b082      	sub	sp, #8
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d101      	bne.n	800744e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800744a:	2301      	movs	r3, #1
 800744c:	e07b      	b.n	8007546 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007452:	2b00      	cmp	r3, #0
 8007454:	d108      	bne.n	8007468 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800745e:	d009      	beq.n	8007474 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	61da      	str	r2, [r3, #28]
 8007466:	e005      	b.n	8007474 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007480:	b2db      	uxtb	r3, r3
 8007482:	2b00      	cmp	r3, #0
 8007484:	d106      	bne.n	8007494 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f7fc fe26 	bl	80040e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2202      	movs	r2, #2
 8007498:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80074bc:	431a      	orrs	r2, r3
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074c6:	431a      	orrs	r2, r3
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	691b      	ldr	r3, [r3, #16]
 80074cc:	f003 0302 	and.w	r3, r3, #2
 80074d0:	431a      	orrs	r2, r3
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	695b      	ldr	r3, [r3, #20]
 80074d6:	f003 0301 	and.w	r3, r3, #1
 80074da:	431a      	orrs	r2, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	699b      	ldr	r3, [r3, #24]
 80074e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074e4:	431a      	orrs	r2, r3
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	69db      	ldr	r3, [r3, #28]
 80074ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074ee:	431a      	orrs	r2, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6a1b      	ldr	r3, [r3, #32]
 80074f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074f8:	ea42 0103 	orr.w	r1, r2, r3
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007500:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	430a      	orrs	r2, r1
 800750a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	699b      	ldr	r3, [r3, #24]
 8007510:	0c1b      	lsrs	r3, r3, #16
 8007512:	f003 0104 	and.w	r1, r3, #4
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751a:	f003 0210 	and.w	r2, r3, #16
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	430a      	orrs	r2, r1
 8007524:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	69da      	ldr	r2, [r3, #28]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007534:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007544:	2300      	movs	r3, #0
}
 8007546:	4618      	mov	r0, r3
 8007548:	3708      	adds	r7, #8
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}

0800754e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800754e:	b580      	push	{r7, lr}
 8007550:	b088      	sub	sp, #32
 8007552:	af00      	add	r7, sp, #0
 8007554:	60f8      	str	r0, [r7, #12]
 8007556:	60b9      	str	r1, [r7, #8]
 8007558:	603b      	str	r3, [r7, #0]
 800755a:	4613      	mov	r3, r2
 800755c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800755e:	2300      	movs	r3, #0
 8007560:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007568:	2b01      	cmp	r3, #1
 800756a:	d101      	bne.n	8007570 <HAL_SPI_Transmit+0x22>
 800756c:	2302      	movs	r3, #2
 800756e:	e126      	b.n	80077be <HAL_SPI_Transmit+0x270>
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2201      	movs	r2, #1
 8007574:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007578:	f7fe fc50 	bl	8005e1c <HAL_GetTick>
 800757c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800757e:	88fb      	ldrh	r3, [r7, #6]
 8007580:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007588:	b2db      	uxtb	r3, r3
 800758a:	2b01      	cmp	r3, #1
 800758c:	d002      	beq.n	8007594 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800758e:	2302      	movs	r3, #2
 8007590:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007592:	e10b      	b.n	80077ac <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d002      	beq.n	80075a0 <HAL_SPI_Transmit+0x52>
 800759a:	88fb      	ldrh	r3, [r7, #6]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d102      	bne.n	80075a6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80075a4:	e102      	b.n	80077ac <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2203      	movs	r2, #3
 80075aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2200      	movs	r2, #0
 80075b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	68ba      	ldr	r2, [r7, #8]
 80075b8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	88fa      	ldrh	r2, [r7, #6]
 80075be:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	88fa      	ldrh	r2, [r7, #6]
 80075c4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2200      	movs	r2, #0
 80075ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2200      	movs	r2, #0
 80075d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2200      	movs	r2, #0
 80075d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2200      	movs	r2, #0
 80075dc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2200      	movs	r2, #0
 80075e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075ec:	d10f      	bne.n	800760e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800760c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007618:	2b40      	cmp	r3, #64	; 0x40
 800761a:	d007      	beq.n	800762c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800762a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007634:	d14b      	bne.n	80076ce <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d002      	beq.n	8007644 <HAL_SPI_Transmit+0xf6>
 800763e:	8afb      	ldrh	r3, [r7, #22]
 8007640:	2b01      	cmp	r3, #1
 8007642:	d13e      	bne.n	80076c2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007648:	881a      	ldrh	r2, [r3, #0]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007654:	1c9a      	adds	r2, r3, #2
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800765e:	b29b      	uxth	r3, r3
 8007660:	3b01      	subs	r3, #1
 8007662:	b29a      	uxth	r2, r3
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007668:	e02b      	b.n	80076c2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	f003 0302 	and.w	r3, r3, #2
 8007674:	2b02      	cmp	r3, #2
 8007676:	d112      	bne.n	800769e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800767c:	881a      	ldrh	r2, [r3, #0]
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007688:	1c9a      	adds	r2, r3, #2
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007692:	b29b      	uxth	r3, r3
 8007694:	3b01      	subs	r3, #1
 8007696:	b29a      	uxth	r2, r3
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	86da      	strh	r2, [r3, #54]	; 0x36
 800769c:	e011      	b.n	80076c2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800769e:	f7fe fbbd 	bl	8005e1c <HAL_GetTick>
 80076a2:	4602      	mov	r2, r0
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	1ad3      	subs	r3, r2, r3
 80076a8:	683a      	ldr	r2, [r7, #0]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d803      	bhi.n	80076b6 <HAL_SPI_Transmit+0x168>
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076b4:	d102      	bne.n	80076bc <HAL_SPI_Transmit+0x16e>
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d102      	bne.n	80076c2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80076bc:	2303      	movs	r3, #3
 80076be:	77fb      	strb	r3, [r7, #31]
          goto error;
 80076c0:	e074      	b.n	80077ac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d1ce      	bne.n	800766a <HAL_SPI_Transmit+0x11c>
 80076cc:	e04c      	b.n	8007768 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d002      	beq.n	80076dc <HAL_SPI_Transmit+0x18e>
 80076d6:	8afb      	ldrh	r3, [r7, #22]
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d140      	bne.n	800775e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	330c      	adds	r3, #12
 80076e6:	7812      	ldrb	r2, [r2, #0]
 80076e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ee:	1c5a      	adds	r2, r3, #1
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	3b01      	subs	r3, #1
 80076fc:	b29a      	uxth	r2, r3
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007702:	e02c      	b.n	800775e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	f003 0302 	and.w	r3, r3, #2
 800770e:	2b02      	cmp	r3, #2
 8007710:	d113      	bne.n	800773a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	330c      	adds	r3, #12
 800771c:	7812      	ldrb	r2, [r2, #0]
 800771e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007724:	1c5a      	adds	r2, r3, #1
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800772e:	b29b      	uxth	r3, r3
 8007730:	3b01      	subs	r3, #1
 8007732:	b29a      	uxth	r2, r3
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	86da      	strh	r2, [r3, #54]	; 0x36
 8007738:	e011      	b.n	800775e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800773a:	f7fe fb6f 	bl	8005e1c <HAL_GetTick>
 800773e:	4602      	mov	r2, r0
 8007740:	69bb      	ldr	r3, [r7, #24]
 8007742:	1ad3      	subs	r3, r2, r3
 8007744:	683a      	ldr	r2, [r7, #0]
 8007746:	429a      	cmp	r2, r3
 8007748:	d803      	bhi.n	8007752 <HAL_SPI_Transmit+0x204>
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007750:	d102      	bne.n	8007758 <HAL_SPI_Transmit+0x20a>
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d102      	bne.n	800775e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007758:	2303      	movs	r3, #3
 800775a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800775c:	e026      	b.n	80077ac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007762:	b29b      	uxth	r3, r3
 8007764:	2b00      	cmp	r3, #0
 8007766:	d1cd      	bne.n	8007704 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007768:	69ba      	ldr	r2, [r7, #24]
 800776a:	6839      	ldr	r1, [r7, #0]
 800776c:	68f8      	ldr	r0, [r7, #12]
 800776e:	f000 fbcb 	bl	8007f08 <SPI_EndRxTxTransaction>
 8007772:	4603      	mov	r3, r0
 8007774:	2b00      	cmp	r3, #0
 8007776:	d002      	beq.n	800777e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2220      	movs	r2, #32
 800777c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d10a      	bne.n	800779c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007786:	2300      	movs	r3, #0
 8007788:	613b      	str	r3, [r7, #16]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	613b      	str	r3, [r7, #16]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	613b      	str	r3, [r7, #16]
 800779a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d002      	beq.n	80077aa <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
 80077a6:	77fb      	strb	r3, [r7, #31]
 80077a8:	e000      	b.n	80077ac <HAL_SPI_Transmit+0x25e>
  }

error:
 80077aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2201      	movs	r2, #1
 80077b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2200      	movs	r2, #0
 80077b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80077bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3720      	adds	r7, #32
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b088      	sub	sp, #32
 80077ca:	af02      	add	r7, sp, #8
 80077cc:	60f8      	str	r0, [r7, #12]
 80077ce:	60b9      	str	r1, [r7, #8]
 80077d0:	603b      	str	r3, [r7, #0]
 80077d2:	4613      	mov	r3, r2
 80077d4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80077d6:	2300      	movs	r3, #0
 80077d8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077e2:	d112      	bne.n	800780a <HAL_SPI_Receive+0x44>
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d10e      	bne.n	800780a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2204      	movs	r2, #4
 80077f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80077f4:	88fa      	ldrh	r2, [r7, #6]
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	9300      	str	r3, [sp, #0]
 80077fa:	4613      	mov	r3, r2
 80077fc:	68ba      	ldr	r2, [r7, #8]
 80077fe:	68b9      	ldr	r1, [r7, #8]
 8007800:	68f8      	ldr	r0, [r7, #12]
 8007802:	f000 f8f1 	bl	80079e8 <HAL_SPI_TransmitReceive>
 8007806:	4603      	mov	r3, r0
 8007808:	e0ea      	b.n	80079e0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007810:	2b01      	cmp	r3, #1
 8007812:	d101      	bne.n	8007818 <HAL_SPI_Receive+0x52>
 8007814:	2302      	movs	r3, #2
 8007816:	e0e3      	b.n	80079e0 <HAL_SPI_Receive+0x21a>
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2201      	movs	r2, #1
 800781c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007820:	f7fe fafc 	bl	8005e1c <HAL_GetTick>
 8007824:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800782c:	b2db      	uxtb	r3, r3
 800782e:	2b01      	cmp	r3, #1
 8007830:	d002      	beq.n	8007838 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007832:	2302      	movs	r3, #2
 8007834:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007836:	e0ca      	b.n	80079ce <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d002      	beq.n	8007844 <HAL_SPI_Receive+0x7e>
 800783e:	88fb      	ldrh	r3, [r7, #6]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d102      	bne.n	800784a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007848:	e0c1      	b.n	80079ce <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2204      	movs	r2, #4
 800784e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2200      	movs	r2, #0
 8007856:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	68ba      	ldr	r2, [r7, #8]
 800785c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	88fa      	ldrh	r2, [r7, #6]
 8007862:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	88fa      	ldrh	r2, [r7, #6]
 8007868:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2200      	movs	r2, #0
 800786e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2200      	movs	r2, #0
 8007874:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2200      	movs	r2, #0
 800787a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2200      	movs	r2, #0
 8007880:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2200      	movs	r2, #0
 8007886:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007890:	d10f      	bne.n	80078b2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80078b0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078bc:	2b40      	cmp	r3, #64	; 0x40
 80078be:	d007      	beq.n	80078d0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078ce:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d162      	bne.n	800799e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80078d8:	e02e      	b.n	8007938 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	f003 0301 	and.w	r3, r3, #1
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d115      	bne.n	8007914 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f103 020c 	add.w	r2, r3, #12
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f4:	7812      	ldrb	r2, [r2, #0]
 80078f6:	b2d2      	uxtb	r2, r2
 80078f8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078fe:	1c5a      	adds	r2, r3, #1
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007908:	b29b      	uxth	r3, r3
 800790a:	3b01      	subs	r3, #1
 800790c:	b29a      	uxth	r2, r3
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007912:	e011      	b.n	8007938 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007914:	f7fe fa82 	bl	8005e1c <HAL_GetTick>
 8007918:	4602      	mov	r2, r0
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	1ad3      	subs	r3, r2, r3
 800791e:	683a      	ldr	r2, [r7, #0]
 8007920:	429a      	cmp	r2, r3
 8007922:	d803      	bhi.n	800792c <HAL_SPI_Receive+0x166>
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800792a:	d102      	bne.n	8007932 <HAL_SPI_Receive+0x16c>
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d102      	bne.n	8007938 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007932:	2303      	movs	r3, #3
 8007934:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007936:	e04a      	b.n	80079ce <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800793c:	b29b      	uxth	r3, r3
 800793e:	2b00      	cmp	r3, #0
 8007940:	d1cb      	bne.n	80078da <HAL_SPI_Receive+0x114>
 8007942:	e031      	b.n	80079a8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	f003 0301 	and.w	r3, r3, #1
 800794e:	2b01      	cmp	r3, #1
 8007950:	d113      	bne.n	800797a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	68da      	ldr	r2, [r3, #12]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800795c:	b292      	uxth	r2, r2
 800795e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007964:	1c9a      	adds	r2, r3, #2
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800796e:	b29b      	uxth	r3, r3
 8007970:	3b01      	subs	r3, #1
 8007972:	b29a      	uxth	r2, r3
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007978:	e011      	b.n	800799e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800797a:	f7fe fa4f 	bl	8005e1c <HAL_GetTick>
 800797e:	4602      	mov	r2, r0
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	1ad3      	subs	r3, r2, r3
 8007984:	683a      	ldr	r2, [r7, #0]
 8007986:	429a      	cmp	r2, r3
 8007988:	d803      	bhi.n	8007992 <HAL_SPI_Receive+0x1cc>
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007990:	d102      	bne.n	8007998 <HAL_SPI_Receive+0x1d2>
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d102      	bne.n	800799e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007998:	2303      	movs	r3, #3
 800799a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800799c:	e017      	b.n	80079ce <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d1cd      	bne.n	8007944 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80079a8:	693a      	ldr	r2, [r7, #16]
 80079aa:	6839      	ldr	r1, [r7, #0]
 80079ac:	68f8      	ldr	r0, [r7, #12]
 80079ae:	f000 fa45 	bl	8007e3c <SPI_EndRxTransaction>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d002      	beq.n	80079be <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2220      	movs	r2, #32
 80079bc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d002      	beq.n	80079cc <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80079c6:	2301      	movs	r3, #1
 80079c8:	75fb      	strb	r3, [r7, #23]
 80079ca:	e000      	b.n	80079ce <HAL_SPI_Receive+0x208>
  }

error :
 80079cc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2201      	movs	r2, #1
 80079d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2200      	movs	r2, #0
 80079da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80079de:	7dfb      	ldrb	r3, [r7, #23]
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3718      	adds	r7, #24
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b08c      	sub	sp, #48	; 0x30
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	607a      	str	r2, [r7, #4]
 80079f4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80079f6:	2301      	movs	r3, #1
 80079f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80079fa:	2300      	movs	r3, #0
 80079fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d101      	bne.n	8007a0e <HAL_SPI_TransmitReceive+0x26>
 8007a0a:	2302      	movs	r3, #2
 8007a0c:	e18a      	b.n	8007d24 <HAL_SPI_TransmitReceive+0x33c>
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2201      	movs	r2, #1
 8007a12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a16:	f7fe fa01 	bl	8005e1c <HAL_GetTick>
 8007a1a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007a2c:	887b      	ldrh	r3, [r7, #2]
 8007a2e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007a30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d00f      	beq.n	8007a58 <HAL_SPI_TransmitReceive+0x70>
 8007a38:	69fb      	ldr	r3, [r7, #28]
 8007a3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a3e:	d107      	bne.n	8007a50 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d103      	bne.n	8007a50 <HAL_SPI_TransmitReceive+0x68>
 8007a48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a4c:	2b04      	cmp	r3, #4
 8007a4e:	d003      	beq.n	8007a58 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007a50:	2302      	movs	r3, #2
 8007a52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007a56:	e15b      	b.n	8007d10 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d005      	beq.n	8007a6a <HAL_SPI_TransmitReceive+0x82>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d002      	beq.n	8007a6a <HAL_SPI_TransmitReceive+0x82>
 8007a64:	887b      	ldrh	r3, [r7, #2]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d103      	bne.n	8007a72 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007a70:	e14e      	b.n	8007d10 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	2b04      	cmp	r3, #4
 8007a7c:	d003      	beq.n	8007a86 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2205      	movs	r2, #5
 8007a82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	887a      	ldrh	r2, [r7, #2]
 8007a96:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	887a      	ldrh	r2, [r7, #2]
 8007a9c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	68ba      	ldr	r2, [r7, #8]
 8007aa2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	887a      	ldrh	r2, [r7, #2]
 8007aa8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	887a      	ldrh	r2, [r7, #2]
 8007aae:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ac6:	2b40      	cmp	r3, #64	; 0x40
 8007ac8:	d007      	beq.n	8007ada <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ad8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	68db      	ldr	r3, [r3, #12]
 8007ade:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ae2:	d178      	bne.n	8007bd6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d002      	beq.n	8007af2 <HAL_SPI_TransmitReceive+0x10a>
 8007aec:	8b7b      	ldrh	r3, [r7, #26]
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d166      	bne.n	8007bc0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007af6:	881a      	ldrh	r2, [r3, #0]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b02:	1c9a      	adds	r2, r3, #2
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	b29a      	uxth	r2, r3
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b16:	e053      	b.n	8007bc0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	f003 0302 	and.w	r3, r3, #2
 8007b22:	2b02      	cmp	r3, #2
 8007b24:	d11b      	bne.n	8007b5e <HAL_SPI_TransmitReceive+0x176>
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d016      	beq.n	8007b5e <HAL_SPI_TransmitReceive+0x176>
 8007b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d113      	bne.n	8007b5e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b3a:	881a      	ldrh	r2, [r3, #0]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b46:	1c9a      	adds	r2, r3, #2
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	3b01      	subs	r3, #1
 8007b54:	b29a      	uxth	r2, r3
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	f003 0301 	and.w	r3, r3, #1
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d119      	bne.n	8007ba0 <HAL_SPI_TransmitReceive+0x1b8>
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d014      	beq.n	8007ba0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	68da      	ldr	r2, [r3, #12]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b80:	b292      	uxth	r2, r2
 8007b82:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b88:	1c9a      	adds	r2, r3, #2
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	3b01      	subs	r3, #1
 8007b96:	b29a      	uxth	r2, r3
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007ba0:	f7fe f93c 	bl	8005e1c <HAL_GetTick>
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba8:	1ad3      	subs	r3, r2, r3
 8007baa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d807      	bhi.n	8007bc0 <HAL_SPI_TransmitReceive+0x1d8>
 8007bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bb6:	d003      	beq.n	8007bc0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007bb8:	2303      	movs	r3, #3
 8007bba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007bbe:	e0a7      	b.n	8007d10 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d1a6      	bne.n	8007b18 <HAL_SPI_TransmitReceive+0x130>
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bce:	b29b      	uxth	r3, r3
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d1a1      	bne.n	8007b18 <HAL_SPI_TransmitReceive+0x130>
 8007bd4:	e07c      	b.n	8007cd0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d002      	beq.n	8007be4 <HAL_SPI_TransmitReceive+0x1fc>
 8007bde:	8b7b      	ldrh	r3, [r7, #26]
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d16b      	bne.n	8007cbc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	330c      	adds	r3, #12
 8007bee:	7812      	ldrb	r2, [r2, #0]
 8007bf0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bf6:	1c5a      	adds	r2, r3, #1
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	3b01      	subs	r3, #1
 8007c04:	b29a      	uxth	r2, r3
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c0a:	e057      	b.n	8007cbc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	f003 0302 	and.w	r3, r3, #2
 8007c16:	2b02      	cmp	r3, #2
 8007c18:	d11c      	bne.n	8007c54 <HAL_SPI_TransmitReceive+0x26c>
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d017      	beq.n	8007c54 <HAL_SPI_TransmitReceive+0x26c>
 8007c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	d114      	bne.n	8007c54 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	330c      	adds	r3, #12
 8007c34:	7812      	ldrb	r2, [r2, #0]
 8007c36:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c3c:	1c5a      	adds	r2, r3, #1
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	3b01      	subs	r3, #1
 8007c4a:	b29a      	uxth	r2, r3
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007c50:	2300      	movs	r3, #0
 8007c52:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	f003 0301 	and.w	r3, r3, #1
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d119      	bne.n	8007c96 <HAL_SPI_TransmitReceive+0x2ae>
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d014      	beq.n	8007c96 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	68da      	ldr	r2, [r3, #12]
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c76:	b2d2      	uxtb	r2, r2
 8007c78:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c7e:	1c5a      	adds	r2, r3, #1
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	3b01      	subs	r3, #1
 8007c8c:	b29a      	uxth	r2, r3
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007c92:	2301      	movs	r3, #1
 8007c94:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007c96:	f7fe f8c1 	bl	8005e1c <HAL_GetTick>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9e:	1ad3      	subs	r3, r2, r3
 8007ca0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d803      	bhi.n	8007cae <HAL_SPI_TransmitReceive+0x2c6>
 8007ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cac:	d102      	bne.n	8007cb4 <HAL_SPI_TransmitReceive+0x2cc>
 8007cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d103      	bne.n	8007cbc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007cb4:	2303      	movs	r3, #3
 8007cb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007cba:	e029      	b.n	8007d10 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d1a2      	bne.n	8007c0c <HAL_SPI_TransmitReceive+0x224>
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d19d      	bne.n	8007c0c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cd2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007cd4:	68f8      	ldr	r0, [r7, #12]
 8007cd6:	f000 f917 	bl	8007f08 <SPI_EndRxTxTransaction>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d006      	beq.n	8007cee <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2220      	movs	r2, #32
 8007cea:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007cec:	e010      	b.n	8007d10 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d10b      	bne.n	8007d0e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	617b      	str	r3, [r7, #20]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	617b      	str	r3, [r7, #20]
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	617b      	str	r3, [r7, #20]
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	e000      	b.n	8007d10 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007d0e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2201      	movs	r2, #1
 8007d14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007d20:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3730      	adds	r7, #48	; 0x30
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b088      	sub	sp, #32
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	603b      	str	r3, [r7, #0]
 8007d38:	4613      	mov	r3, r2
 8007d3a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007d3c:	f7fe f86e 	bl	8005e1c <HAL_GetTick>
 8007d40:	4602      	mov	r2, r0
 8007d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d44:	1a9b      	subs	r3, r3, r2
 8007d46:	683a      	ldr	r2, [r7, #0]
 8007d48:	4413      	add	r3, r2
 8007d4a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007d4c:	f7fe f866 	bl	8005e1c <HAL_GetTick>
 8007d50:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007d52:	4b39      	ldr	r3, [pc, #228]	; (8007e38 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	015b      	lsls	r3, r3, #5
 8007d58:	0d1b      	lsrs	r3, r3, #20
 8007d5a:	69fa      	ldr	r2, [r7, #28]
 8007d5c:	fb02 f303 	mul.w	r3, r2, r3
 8007d60:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d62:	e054      	b.n	8007e0e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d6a:	d050      	beq.n	8007e0e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007d6c:	f7fe f856 	bl	8005e1c <HAL_GetTick>
 8007d70:	4602      	mov	r2, r0
 8007d72:	69bb      	ldr	r3, [r7, #24]
 8007d74:	1ad3      	subs	r3, r2, r3
 8007d76:	69fa      	ldr	r2, [r7, #28]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d902      	bls.n	8007d82 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d13d      	bne.n	8007dfe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	685a      	ldr	r2, [r3, #4]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007d90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d9a:	d111      	bne.n	8007dc0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007da4:	d004      	beq.n	8007db0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dae:	d107      	bne.n	8007dc0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007dbe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dc8:	d10f      	bne.n	8007dea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007dd8:	601a      	str	r2, [r3, #0]
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007de8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2201      	movs	r2, #1
 8007dee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2200      	movs	r2, #0
 8007df6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007dfa:	2303      	movs	r3, #3
 8007dfc:	e017      	b.n	8007e2e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d101      	bne.n	8007e08 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007e04:	2300      	movs	r3, #0
 8007e06:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	3b01      	subs	r3, #1
 8007e0c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	689a      	ldr	r2, [r3, #8]
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	4013      	ands	r3, r2
 8007e18:	68ba      	ldr	r2, [r7, #8]
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	bf0c      	ite	eq
 8007e1e:	2301      	moveq	r3, #1
 8007e20:	2300      	movne	r3, #0
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	461a      	mov	r2, r3
 8007e26:	79fb      	ldrb	r3, [r7, #7]
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d19b      	bne.n	8007d64 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007e2c:	2300      	movs	r3, #0
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3720      	adds	r7, #32
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	2000000c 	.word	0x2000000c

08007e3c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b086      	sub	sp, #24
 8007e40:	af02      	add	r7, sp, #8
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	60b9      	str	r1, [r7, #8]
 8007e46:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e50:	d111      	bne.n	8007e76 <SPI_EndRxTransaction+0x3a>
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e5a:	d004      	beq.n	8007e66 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e64:	d107      	bne.n	8007e76 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e74:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e7e:	d12a      	bne.n	8007ed6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e88:	d012      	beq.n	8007eb0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	9300      	str	r3, [sp, #0]
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	2200      	movs	r2, #0
 8007e92:	2180      	movs	r1, #128	; 0x80
 8007e94:	68f8      	ldr	r0, [r7, #12]
 8007e96:	f7ff ff49 	bl	8007d2c <SPI_WaitFlagStateUntilTimeout>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d02d      	beq.n	8007efc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ea4:	f043 0220 	orr.w	r2, r3, #32
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007eac:	2303      	movs	r3, #3
 8007eae:	e026      	b.n	8007efe <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	9300      	str	r3, [sp, #0]
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	2101      	movs	r1, #1
 8007eba:	68f8      	ldr	r0, [r7, #12]
 8007ebc:	f7ff ff36 	bl	8007d2c <SPI_WaitFlagStateUntilTimeout>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d01a      	beq.n	8007efc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eca:	f043 0220 	orr.w	r2, r3, #32
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007ed2:	2303      	movs	r3, #3
 8007ed4:	e013      	b.n	8007efe <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	9300      	str	r3, [sp, #0]
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	2200      	movs	r2, #0
 8007ede:	2101      	movs	r1, #1
 8007ee0:	68f8      	ldr	r0, [r7, #12]
 8007ee2:	f7ff ff23 	bl	8007d2c <SPI_WaitFlagStateUntilTimeout>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d007      	beq.n	8007efc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ef0:	f043 0220 	orr.w	r2, r3, #32
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007ef8:	2303      	movs	r3, #3
 8007efa:	e000      	b.n	8007efe <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007efc:	2300      	movs	r3, #0
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3710      	adds	r7, #16
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
	...

08007f08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b088      	sub	sp, #32
 8007f0c:	af02      	add	r7, sp, #8
 8007f0e:	60f8      	str	r0, [r7, #12]
 8007f10:	60b9      	str	r1, [r7, #8]
 8007f12:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007f14:	4b1b      	ldr	r3, [pc, #108]	; (8007f84 <SPI_EndRxTxTransaction+0x7c>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a1b      	ldr	r2, [pc, #108]	; (8007f88 <SPI_EndRxTxTransaction+0x80>)
 8007f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f1e:	0d5b      	lsrs	r3, r3, #21
 8007f20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007f24:	fb02 f303 	mul.w	r3, r2, r3
 8007f28:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f32:	d112      	bne.n	8007f5a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	9300      	str	r3, [sp, #0]
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	2180      	movs	r1, #128	; 0x80
 8007f3e:	68f8      	ldr	r0, [r7, #12]
 8007f40:	f7ff fef4 	bl	8007d2c <SPI_WaitFlagStateUntilTimeout>
 8007f44:	4603      	mov	r3, r0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d016      	beq.n	8007f78 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f4e:	f043 0220 	orr.w	r2, r3, #32
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007f56:	2303      	movs	r3, #3
 8007f58:	e00f      	b.n	8007f7a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d00a      	beq.n	8007f76 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	3b01      	subs	r3, #1
 8007f64:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f70:	2b80      	cmp	r3, #128	; 0x80
 8007f72:	d0f2      	beq.n	8007f5a <SPI_EndRxTxTransaction+0x52>
 8007f74:	e000      	b.n	8007f78 <SPI_EndRxTxTransaction+0x70>
        break;
 8007f76:	bf00      	nop
  }

  return HAL_OK;
 8007f78:	2300      	movs	r3, #0
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3718      	adds	r7, #24
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	bf00      	nop
 8007f84:	2000000c 	.word	0x2000000c
 8007f88:	165e9f81 	.word	0x165e9f81

08007f8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b082      	sub	sp, #8
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d101      	bne.n	8007f9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	e041      	b.n	8008022 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d106      	bne.n	8007fb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2200      	movs	r2, #0
 8007fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f7fc ff6e 	bl	8004e94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2202      	movs	r2, #2
 8007fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	3304      	adds	r3, #4
 8007fc8:	4619      	mov	r1, r3
 8007fca:	4610      	mov	r0, r2
 8007fcc:	f000 fa2e 	bl	800842c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2201      	movs	r2, #1
 8007fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2201      	movs	r2, #1
 8008004:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2201      	movs	r2, #1
 800800c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2201      	movs	r2, #1
 8008014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2201      	movs	r2, #1
 800801c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008020:	2300      	movs	r3, #0
}
 8008022:	4618      	mov	r0, r3
 8008024:	3708      	adds	r7, #8
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}

0800802a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800802a:	b580      	push	{r7, lr}
 800802c:	b082      	sub	sp, #8
 800802e:	af00      	add	r7, sp, #0
 8008030:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d101      	bne.n	800803c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008038:	2301      	movs	r3, #1
 800803a:	e041      	b.n	80080c0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008042:	b2db      	uxtb	r3, r3
 8008044:	2b00      	cmp	r3, #0
 8008046:	d106      	bne.n	8008056 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2200      	movs	r2, #0
 800804c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f7fc fe7b 	bl	8004d4c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2202      	movs	r2, #2
 800805a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681a      	ldr	r2, [r3, #0]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	3304      	adds	r3, #4
 8008066:	4619      	mov	r1, r3
 8008068:	4610      	mov	r0, r2
 800806a:	f000 f9df 	bl	800842c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2201      	movs	r2, #1
 8008072:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2201      	movs	r2, #1
 800807a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2201      	movs	r2, #1
 8008082:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2201      	movs	r2, #1
 800808a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2201      	movs	r2, #1
 8008092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2201      	movs	r2, #1
 800809a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2201      	movs	r2, #1
 80080a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2201      	movs	r2, #1
 80080aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2201      	movs	r2, #1
 80080b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2201      	movs	r2, #1
 80080ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80080be:	2300      	movs	r3, #0
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3708      	adds	r7, #8
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d109      	bne.n	80080ec <HAL_TIM_PWM_Start+0x24>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	bf14      	ite	ne
 80080e4:	2301      	movne	r3, #1
 80080e6:	2300      	moveq	r3, #0
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	e022      	b.n	8008132 <HAL_TIM_PWM_Start+0x6a>
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	2b04      	cmp	r3, #4
 80080f0:	d109      	bne.n	8008106 <HAL_TIM_PWM_Start+0x3e>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	bf14      	ite	ne
 80080fe:	2301      	movne	r3, #1
 8008100:	2300      	moveq	r3, #0
 8008102:	b2db      	uxtb	r3, r3
 8008104:	e015      	b.n	8008132 <HAL_TIM_PWM_Start+0x6a>
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	2b08      	cmp	r3, #8
 800810a:	d109      	bne.n	8008120 <HAL_TIM_PWM_Start+0x58>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008112:	b2db      	uxtb	r3, r3
 8008114:	2b01      	cmp	r3, #1
 8008116:	bf14      	ite	ne
 8008118:	2301      	movne	r3, #1
 800811a:	2300      	moveq	r3, #0
 800811c:	b2db      	uxtb	r3, r3
 800811e:	e008      	b.n	8008132 <HAL_TIM_PWM_Start+0x6a>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008126:	b2db      	uxtb	r3, r3
 8008128:	2b01      	cmp	r3, #1
 800812a:	bf14      	ite	ne
 800812c:	2301      	movne	r3, #1
 800812e:	2300      	moveq	r3, #0
 8008130:	b2db      	uxtb	r3, r3
 8008132:	2b00      	cmp	r3, #0
 8008134:	d001      	beq.n	800813a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008136:	2301      	movs	r3, #1
 8008138:	e07c      	b.n	8008234 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d104      	bne.n	800814a <HAL_TIM_PWM_Start+0x82>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2202      	movs	r2, #2
 8008144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008148:	e013      	b.n	8008172 <HAL_TIM_PWM_Start+0xaa>
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	2b04      	cmp	r3, #4
 800814e:	d104      	bne.n	800815a <HAL_TIM_PWM_Start+0x92>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2202      	movs	r2, #2
 8008154:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008158:	e00b      	b.n	8008172 <HAL_TIM_PWM_Start+0xaa>
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	2b08      	cmp	r3, #8
 800815e:	d104      	bne.n	800816a <HAL_TIM_PWM_Start+0xa2>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2202      	movs	r2, #2
 8008164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008168:	e003      	b.n	8008172 <HAL_TIM_PWM_Start+0xaa>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2202      	movs	r2, #2
 800816e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	2201      	movs	r2, #1
 8008178:	6839      	ldr	r1, [r7, #0]
 800817a:	4618      	mov	r0, r3
 800817c:	f000 fba6 	bl	80088cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a2d      	ldr	r2, [pc, #180]	; (800823c <HAL_TIM_PWM_Start+0x174>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d004      	beq.n	8008194 <HAL_TIM_PWM_Start+0xcc>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a2c      	ldr	r2, [pc, #176]	; (8008240 <HAL_TIM_PWM_Start+0x178>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d101      	bne.n	8008198 <HAL_TIM_PWM_Start+0xd0>
 8008194:	2301      	movs	r3, #1
 8008196:	e000      	b.n	800819a <HAL_TIM_PWM_Start+0xd2>
 8008198:	2300      	movs	r3, #0
 800819a:	2b00      	cmp	r3, #0
 800819c:	d007      	beq.n	80081ae <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80081ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a22      	ldr	r2, [pc, #136]	; (800823c <HAL_TIM_PWM_Start+0x174>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d022      	beq.n	80081fe <HAL_TIM_PWM_Start+0x136>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081c0:	d01d      	beq.n	80081fe <HAL_TIM_PWM_Start+0x136>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a1f      	ldr	r2, [pc, #124]	; (8008244 <HAL_TIM_PWM_Start+0x17c>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d018      	beq.n	80081fe <HAL_TIM_PWM_Start+0x136>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a1d      	ldr	r2, [pc, #116]	; (8008248 <HAL_TIM_PWM_Start+0x180>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d013      	beq.n	80081fe <HAL_TIM_PWM_Start+0x136>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a1c      	ldr	r2, [pc, #112]	; (800824c <HAL_TIM_PWM_Start+0x184>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d00e      	beq.n	80081fe <HAL_TIM_PWM_Start+0x136>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a16      	ldr	r2, [pc, #88]	; (8008240 <HAL_TIM_PWM_Start+0x178>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d009      	beq.n	80081fe <HAL_TIM_PWM_Start+0x136>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a18      	ldr	r2, [pc, #96]	; (8008250 <HAL_TIM_PWM_Start+0x188>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d004      	beq.n	80081fe <HAL_TIM_PWM_Start+0x136>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a16      	ldr	r2, [pc, #88]	; (8008254 <HAL_TIM_PWM_Start+0x18c>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d111      	bne.n	8008222 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	f003 0307 	and.w	r3, r3, #7
 8008208:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2b06      	cmp	r3, #6
 800820e:	d010      	beq.n	8008232 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f042 0201 	orr.w	r2, r2, #1
 800821e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008220:	e007      	b.n	8008232 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f042 0201 	orr.w	r2, r2, #1
 8008230:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008232:	2300      	movs	r3, #0
}
 8008234:	4618      	mov	r0, r3
 8008236:	3710      	adds	r7, #16
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}
 800823c:	40010000 	.word	0x40010000
 8008240:	40010400 	.word	0x40010400
 8008244:	40000400 	.word	0x40000400
 8008248:	40000800 	.word	0x40000800
 800824c:	40000c00 	.word	0x40000c00
 8008250:	40014000 	.word	0x40014000
 8008254:	40001800 	.word	0x40001800

08008258 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b086      	sub	sp, #24
 800825c:	af00      	add	r7, sp, #0
 800825e:	60f8      	str	r0, [r7, #12]
 8008260:	60b9      	str	r1, [r7, #8]
 8008262:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008264:	2300      	movs	r3, #0
 8008266:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800826e:	2b01      	cmp	r3, #1
 8008270:	d101      	bne.n	8008276 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008272:	2302      	movs	r3, #2
 8008274:	e0ae      	b.n	80083d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2201      	movs	r2, #1
 800827a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2b0c      	cmp	r3, #12
 8008282:	f200 809f 	bhi.w	80083c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008286:	a201      	add	r2, pc, #4	; (adr r2, 800828c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800828c:	080082c1 	.word	0x080082c1
 8008290:	080083c5 	.word	0x080083c5
 8008294:	080083c5 	.word	0x080083c5
 8008298:	080083c5 	.word	0x080083c5
 800829c:	08008301 	.word	0x08008301
 80082a0:	080083c5 	.word	0x080083c5
 80082a4:	080083c5 	.word	0x080083c5
 80082a8:	080083c5 	.word	0x080083c5
 80082ac:	08008343 	.word	0x08008343
 80082b0:	080083c5 	.word	0x080083c5
 80082b4:	080083c5 	.word	0x080083c5
 80082b8:	080083c5 	.word	0x080083c5
 80082bc:	08008383 	.word	0x08008383
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	68b9      	ldr	r1, [r7, #8]
 80082c6:	4618      	mov	r0, r3
 80082c8:	f000 f950 	bl	800856c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	699a      	ldr	r2, [r3, #24]
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f042 0208 	orr.w	r2, r2, #8
 80082da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	699a      	ldr	r2, [r3, #24]
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f022 0204 	bic.w	r2, r2, #4
 80082ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	6999      	ldr	r1, [r3, #24]
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	691a      	ldr	r2, [r3, #16]
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	430a      	orrs	r2, r1
 80082fc:	619a      	str	r2, [r3, #24]
      break;
 80082fe:	e064      	b.n	80083ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	68b9      	ldr	r1, [r7, #8]
 8008306:	4618      	mov	r0, r3
 8008308:	f000 f9a0 	bl	800864c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	699a      	ldr	r2, [r3, #24]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800831a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	699a      	ldr	r2, [r3, #24]
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800832a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	6999      	ldr	r1, [r3, #24]
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	691b      	ldr	r3, [r3, #16]
 8008336:	021a      	lsls	r2, r3, #8
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	430a      	orrs	r2, r1
 800833e:	619a      	str	r2, [r3, #24]
      break;
 8008340:	e043      	b.n	80083ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	68b9      	ldr	r1, [r7, #8]
 8008348:	4618      	mov	r0, r3
 800834a:	f000 f9f5 	bl	8008738 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	69da      	ldr	r2, [r3, #28]
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f042 0208 	orr.w	r2, r2, #8
 800835c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	69da      	ldr	r2, [r3, #28]
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f022 0204 	bic.w	r2, r2, #4
 800836c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	69d9      	ldr	r1, [r3, #28]
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	691a      	ldr	r2, [r3, #16]
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	430a      	orrs	r2, r1
 800837e:	61da      	str	r2, [r3, #28]
      break;
 8008380:	e023      	b.n	80083ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	68b9      	ldr	r1, [r7, #8]
 8008388:	4618      	mov	r0, r3
 800838a:	f000 fa49 	bl	8008820 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	69da      	ldr	r2, [r3, #28]
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800839c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	69da      	ldr	r2, [r3, #28]
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	69d9      	ldr	r1, [r3, #28]
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	691b      	ldr	r3, [r3, #16]
 80083b8:	021a      	lsls	r2, r3, #8
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	430a      	orrs	r2, r1
 80083c0:	61da      	str	r2, [r3, #28]
      break;
 80083c2:	e002      	b.n	80083ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80083c4:	2301      	movs	r3, #1
 80083c6:	75fb      	strb	r3, [r7, #23]
      break;
 80083c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2200      	movs	r2, #0
 80083ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80083d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3718      	adds	r7, #24
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <HAL_TIM_GenerateEvent>:
  *         supporting a break input.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 80083dc:	b480      	push	{r7}
 80083de:	b083      	sub	sp, #12
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d101      	bne.n	80083f4 <HAL_TIM_GenerateEvent+0x18>
 80083f0:	2302      	movs	r3, #2
 80083f2:	e014      	b.n	800841e <HAL_TIM_GenerateEvent+0x42>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2201      	movs	r2, #1
 80083f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2202      	movs	r2, #2
 8008400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	683a      	ldr	r2, [r7, #0]
 800840a:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2201      	movs	r2, #1
 8008410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2200      	movs	r2, #0
 8008418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800841c:	2300      	movs	r3, #0
}
 800841e:	4618      	mov	r0, r3
 8008420:	370c      	adds	r7, #12
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr
	...

0800842c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800842c:	b480      	push	{r7}
 800842e:	b085      	sub	sp, #20
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	4a40      	ldr	r2, [pc, #256]	; (8008540 <TIM_Base_SetConfig+0x114>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d013      	beq.n	800846c <TIM_Base_SetConfig+0x40>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800844a:	d00f      	beq.n	800846c <TIM_Base_SetConfig+0x40>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	4a3d      	ldr	r2, [pc, #244]	; (8008544 <TIM_Base_SetConfig+0x118>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d00b      	beq.n	800846c <TIM_Base_SetConfig+0x40>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	4a3c      	ldr	r2, [pc, #240]	; (8008548 <TIM_Base_SetConfig+0x11c>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d007      	beq.n	800846c <TIM_Base_SetConfig+0x40>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	4a3b      	ldr	r2, [pc, #236]	; (800854c <TIM_Base_SetConfig+0x120>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d003      	beq.n	800846c <TIM_Base_SetConfig+0x40>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	4a3a      	ldr	r2, [pc, #232]	; (8008550 <TIM_Base_SetConfig+0x124>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d108      	bne.n	800847e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008472:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	68fa      	ldr	r2, [r7, #12]
 800847a:	4313      	orrs	r3, r2
 800847c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	4a2f      	ldr	r2, [pc, #188]	; (8008540 <TIM_Base_SetConfig+0x114>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d02b      	beq.n	80084de <TIM_Base_SetConfig+0xb2>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800848c:	d027      	beq.n	80084de <TIM_Base_SetConfig+0xb2>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	4a2c      	ldr	r2, [pc, #176]	; (8008544 <TIM_Base_SetConfig+0x118>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d023      	beq.n	80084de <TIM_Base_SetConfig+0xb2>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	4a2b      	ldr	r2, [pc, #172]	; (8008548 <TIM_Base_SetConfig+0x11c>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d01f      	beq.n	80084de <TIM_Base_SetConfig+0xb2>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	4a2a      	ldr	r2, [pc, #168]	; (800854c <TIM_Base_SetConfig+0x120>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d01b      	beq.n	80084de <TIM_Base_SetConfig+0xb2>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	4a29      	ldr	r2, [pc, #164]	; (8008550 <TIM_Base_SetConfig+0x124>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d017      	beq.n	80084de <TIM_Base_SetConfig+0xb2>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	4a28      	ldr	r2, [pc, #160]	; (8008554 <TIM_Base_SetConfig+0x128>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d013      	beq.n	80084de <TIM_Base_SetConfig+0xb2>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	4a27      	ldr	r2, [pc, #156]	; (8008558 <TIM_Base_SetConfig+0x12c>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d00f      	beq.n	80084de <TIM_Base_SetConfig+0xb2>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	4a26      	ldr	r2, [pc, #152]	; (800855c <TIM_Base_SetConfig+0x130>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d00b      	beq.n	80084de <TIM_Base_SetConfig+0xb2>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	4a25      	ldr	r2, [pc, #148]	; (8008560 <TIM_Base_SetConfig+0x134>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d007      	beq.n	80084de <TIM_Base_SetConfig+0xb2>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	4a24      	ldr	r2, [pc, #144]	; (8008564 <TIM_Base_SetConfig+0x138>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d003      	beq.n	80084de <TIM_Base_SetConfig+0xb2>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	4a23      	ldr	r2, [pc, #140]	; (8008568 <TIM_Base_SetConfig+0x13c>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d108      	bne.n	80084f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	68db      	ldr	r3, [r3, #12]
 80084ea:	68fa      	ldr	r2, [r7, #12]
 80084ec:	4313      	orrs	r3, r2
 80084ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	695b      	ldr	r3, [r3, #20]
 80084fa:	4313      	orrs	r3, r2
 80084fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	68fa      	ldr	r2, [r7, #12]
 8008502:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	689a      	ldr	r2, [r3, #8]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	4a0a      	ldr	r2, [pc, #40]	; (8008540 <TIM_Base_SetConfig+0x114>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d003      	beq.n	8008524 <TIM_Base_SetConfig+0xf8>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	4a0c      	ldr	r2, [pc, #48]	; (8008550 <TIM_Base_SetConfig+0x124>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d103      	bne.n	800852c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	691a      	ldr	r2, [r3, #16]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2201      	movs	r2, #1
 8008530:	615a      	str	r2, [r3, #20]
}
 8008532:	bf00      	nop
 8008534:	3714      	adds	r7, #20
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr
 800853e:	bf00      	nop
 8008540:	40010000 	.word	0x40010000
 8008544:	40000400 	.word	0x40000400
 8008548:	40000800 	.word	0x40000800
 800854c:	40000c00 	.word	0x40000c00
 8008550:	40010400 	.word	0x40010400
 8008554:	40014000 	.word	0x40014000
 8008558:	40014400 	.word	0x40014400
 800855c:	40014800 	.word	0x40014800
 8008560:	40001800 	.word	0x40001800
 8008564:	40001c00 	.word	0x40001c00
 8008568:	40002000 	.word	0x40002000

0800856c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800856c:	b480      	push	{r7}
 800856e:	b087      	sub	sp, #28
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6a1b      	ldr	r3, [r3, #32]
 800857a:	f023 0201 	bic.w	r2, r3, #1
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6a1b      	ldr	r3, [r3, #32]
 8008586:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	699b      	ldr	r3, [r3, #24]
 8008592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800859a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f023 0303 	bic.w	r3, r3, #3
 80085a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	68fa      	ldr	r2, [r7, #12]
 80085aa:	4313      	orrs	r3, r2
 80085ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	f023 0302 	bic.w	r3, r3, #2
 80085b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	697a      	ldr	r2, [r7, #20]
 80085bc:	4313      	orrs	r3, r2
 80085be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	4a20      	ldr	r2, [pc, #128]	; (8008644 <TIM_OC1_SetConfig+0xd8>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d003      	beq.n	80085d0 <TIM_OC1_SetConfig+0x64>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	4a1f      	ldr	r2, [pc, #124]	; (8008648 <TIM_OC1_SetConfig+0xdc>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d10c      	bne.n	80085ea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	f023 0308 	bic.w	r3, r3, #8
 80085d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	68db      	ldr	r3, [r3, #12]
 80085dc:	697a      	ldr	r2, [r7, #20]
 80085de:	4313      	orrs	r3, r2
 80085e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	f023 0304 	bic.w	r3, r3, #4
 80085e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	4a15      	ldr	r2, [pc, #84]	; (8008644 <TIM_OC1_SetConfig+0xd8>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d003      	beq.n	80085fa <TIM_OC1_SetConfig+0x8e>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	4a14      	ldr	r2, [pc, #80]	; (8008648 <TIM_OC1_SetConfig+0xdc>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d111      	bne.n	800861e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008600:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008608:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	695b      	ldr	r3, [r3, #20]
 800860e:	693a      	ldr	r2, [r7, #16]
 8008610:	4313      	orrs	r3, r2
 8008612:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	699b      	ldr	r3, [r3, #24]
 8008618:	693a      	ldr	r2, [r7, #16]
 800861a:	4313      	orrs	r3, r2
 800861c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	693a      	ldr	r2, [r7, #16]
 8008622:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	68fa      	ldr	r2, [r7, #12]
 8008628:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	685a      	ldr	r2, [r3, #4]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	697a      	ldr	r2, [r7, #20]
 8008636:	621a      	str	r2, [r3, #32]
}
 8008638:	bf00      	nop
 800863a:	371c      	adds	r7, #28
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr
 8008644:	40010000 	.word	0x40010000
 8008648:	40010400 	.word	0x40010400

0800864c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800864c:	b480      	push	{r7}
 800864e:	b087      	sub	sp, #28
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6a1b      	ldr	r3, [r3, #32]
 800865a:	f023 0210 	bic.w	r2, r3, #16
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6a1b      	ldr	r3, [r3, #32]
 8008666:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	699b      	ldr	r3, [r3, #24]
 8008672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800867a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008682:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	021b      	lsls	r3, r3, #8
 800868a:	68fa      	ldr	r2, [r7, #12]
 800868c:	4313      	orrs	r3, r2
 800868e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	f023 0320 	bic.w	r3, r3, #32
 8008696:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	011b      	lsls	r3, r3, #4
 800869e:	697a      	ldr	r2, [r7, #20]
 80086a0:	4313      	orrs	r3, r2
 80086a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	4a22      	ldr	r2, [pc, #136]	; (8008730 <TIM_OC2_SetConfig+0xe4>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d003      	beq.n	80086b4 <TIM_OC2_SetConfig+0x68>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	4a21      	ldr	r2, [pc, #132]	; (8008734 <TIM_OC2_SetConfig+0xe8>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d10d      	bne.n	80086d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	68db      	ldr	r3, [r3, #12]
 80086c0:	011b      	lsls	r3, r3, #4
 80086c2:	697a      	ldr	r2, [r7, #20]
 80086c4:	4313      	orrs	r3, r2
 80086c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	4a17      	ldr	r2, [pc, #92]	; (8008730 <TIM_OC2_SetConfig+0xe4>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d003      	beq.n	80086e0 <TIM_OC2_SetConfig+0x94>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	4a16      	ldr	r2, [pc, #88]	; (8008734 <TIM_OC2_SetConfig+0xe8>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d113      	bne.n	8008708 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80086e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80086ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	695b      	ldr	r3, [r3, #20]
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	693a      	ldr	r2, [r7, #16]
 80086f8:	4313      	orrs	r3, r2
 80086fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	699b      	ldr	r3, [r3, #24]
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	693a      	ldr	r2, [r7, #16]
 8008704:	4313      	orrs	r3, r2
 8008706:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	693a      	ldr	r2, [r7, #16]
 800870c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	68fa      	ldr	r2, [r7, #12]
 8008712:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	685a      	ldr	r2, [r3, #4]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	697a      	ldr	r2, [r7, #20]
 8008720:	621a      	str	r2, [r3, #32]
}
 8008722:	bf00      	nop
 8008724:	371c      	adds	r7, #28
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr
 800872e:	bf00      	nop
 8008730:	40010000 	.word	0x40010000
 8008734:	40010400 	.word	0x40010400

08008738 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008738:	b480      	push	{r7}
 800873a:	b087      	sub	sp, #28
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6a1b      	ldr	r3, [r3, #32]
 8008746:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6a1b      	ldr	r3, [r3, #32]
 8008752:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	69db      	ldr	r3, [r3, #28]
 800875e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f023 0303 	bic.w	r3, r3, #3
 800876e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	68fa      	ldr	r2, [r7, #12]
 8008776:	4313      	orrs	r3, r2
 8008778:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008780:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	689b      	ldr	r3, [r3, #8]
 8008786:	021b      	lsls	r3, r3, #8
 8008788:	697a      	ldr	r2, [r7, #20]
 800878a:	4313      	orrs	r3, r2
 800878c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	4a21      	ldr	r2, [pc, #132]	; (8008818 <TIM_OC3_SetConfig+0xe0>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d003      	beq.n	800879e <TIM_OC3_SetConfig+0x66>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	4a20      	ldr	r2, [pc, #128]	; (800881c <TIM_OC3_SetConfig+0xe4>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d10d      	bne.n	80087ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80087a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	68db      	ldr	r3, [r3, #12]
 80087aa:	021b      	lsls	r3, r3, #8
 80087ac:	697a      	ldr	r2, [r7, #20]
 80087ae:	4313      	orrs	r3, r2
 80087b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80087b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	4a16      	ldr	r2, [pc, #88]	; (8008818 <TIM_OC3_SetConfig+0xe0>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d003      	beq.n	80087ca <TIM_OC3_SetConfig+0x92>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	4a15      	ldr	r2, [pc, #84]	; (800881c <TIM_OC3_SetConfig+0xe4>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d113      	bne.n	80087f2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80087d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	695b      	ldr	r3, [r3, #20]
 80087de:	011b      	lsls	r3, r3, #4
 80087e0:	693a      	ldr	r2, [r7, #16]
 80087e2:	4313      	orrs	r3, r2
 80087e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	699b      	ldr	r3, [r3, #24]
 80087ea:	011b      	lsls	r3, r3, #4
 80087ec:	693a      	ldr	r2, [r7, #16]
 80087ee:	4313      	orrs	r3, r2
 80087f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	693a      	ldr	r2, [r7, #16]
 80087f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	68fa      	ldr	r2, [r7, #12]
 80087fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	685a      	ldr	r2, [r3, #4]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	697a      	ldr	r2, [r7, #20]
 800880a:	621a      	str	r2, [r3, #32]
}
 800880c:	bf00      	nop
 800880e:	371c      	adds	r7, #28
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr
 8008818:	40010000 	.word	0x40010000
 800881c:	40010400 	.word	0x40010400

08008820 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008820:	b480      	push	{r7}
 8008822:	b087      	sub	sp, #28
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6a1b      	ldr	r3, [r3, #32]
 800882e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6a1b      	ldr	r3, [r3, #32]
 800883a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	69db      	ldr	r3, [r3, #28]
 8008846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800884e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008856:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	021b      	lsls	r3, r3, #8
 800885e:	68fa      	ldr	r2, [r7, #12]
 8008860:	4313      	orrs	r3, r2
 8008862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800886a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	689b      	ldr	r3, [r3, #8]
 8008870:	031b      	lsls	r3, r3, #12
 8008872:	693a      	ldr	r2, [r7, #16]
 8008874:	4313      	orrs	r3, r2
 8008876:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	4a12      	ldr	r2, [pc, #72]	; (80088c4 <TIM_OC4_SetConfig+0xa4>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d003      	beq.n	8008888 <TIM_OC4_SetConfig+0x68>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	4a11      	ldr	r2, [pc, #68]	; (80088c8 <TIM_OC4_SetConfig+0xa8>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d109      	bne.n	800889c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800888e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	695b      	ldr	r3, [r3, #20]
 8008894:	019b      	lsls	r3, r3, #6
 8008896:	697a      	ldr	r2, [r7, #20]
 8008898:	4313      	orrs	r3, r2
 800889a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	697a      	ldr	r2, [r7, #20]
 80088a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	68fa      	ldr	r2, [r7, #12]
 80088a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	685a      	ldr	r2, [r3, #4]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	693a      	ldr	r2, [r7, #16]
 80088b4:	621a      	str	r2, [r3, #32]
}
 80088b6:	bf00      	nop
 80088b8:	371c      	adds	r7, #28
 80088ba:	46bd      	mov	sp, r7
 80088bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c0:	4770      	bx	lr
 80088c2:	bf00      	nop
 80088c4:	40010000 	.word	0x40010000
 80088c8:	40010400 	.word	0x40010400

080088cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b087      	sub	sp, #28
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	60f8      	str	r0, [r7, #12]
 80088d4:	60b9      	str	r1, [r7, #8]
 80088d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	f003 031f 	and.w	r3, r3, #31
 80088de:	2201      	movs	r2, #1
 80088e0:	fa02 f303 	lsl.w	r3, r2, r3
 80088e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	6a1a      	ldr	r2, [r3, #32]
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	43db      	mvns	r3, r3
 80088ee:	401a      	ands	r2, r3
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	6a1a      	ldr	r2, [r3, #32]
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	f003 031f 	and.w	r3, r3, #31
 80088fe:	6879      	ldr	r1, [r7, #4]
 8008900:	fa01 f303 	lsl.w	r3, r1, r3
 8008904:	431a      	orrs	r2, r3
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	621a      	str	r2, [r3, #32]
}
 800890a:	bf00      	nop
 800890c:	371c      	adds	r7, #28
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr
	...

08008918 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008918:	b480      	push	{r7}
 800891a:	b085      	sub	sp, #20
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008928:	2b01      	cmp	r3, #1
 800892a:	d101      	bne.n	8008930 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800892c:	2302      	movs	r3, #2
 800892e:	e05a      	b.n	80089e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2201      	movs	r2, #1
 8008934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2202      	movs	r2, #2
 800893c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	689b      	ldr	r3, [r3, #8]
 800894e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008956:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	68fa      	ldr	r2, [r7, #12]
 800895e:	4313      	orrs	r3, r2
 8008960:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	68fa      	ldr	r2, [r7, #12]
 8008968:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a21      	ldr	r2, [pc, #132]	; (80089f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d022      	beq.n	80089ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800897c:	d01d      	beq.n	80089ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4a1d      	ldr	r2, [pc, #116]	; (80089f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d018      	beq.n	80089ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4a1b      	ldr	r2, [pc, #108]	; (80089fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d013      	beq.n	80089ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4a1a      	ldr	r2, [pc, #104]	; (8008a00 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d00e      	beq.n	80089ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a18      	ldr	r2, [pc, #96]	; (8008a04 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d009      	beq.n	80089ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4a17      	ldr	r2, [pc, #92]	; (8008a08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d004      	beq.n	80089ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4a15      	ldr	r2, [pc, #84]	; (8008a0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d10c      	bne.n	80089d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	68ba      	ldr	r2, [r7, #8]
 80089c8:	4313      	orrs	r3, r2
 80089ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	68ba      	ldr	r2, [r7, #8]
 80089d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2201      	movs	r2, #1
 80089d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2200      	movs	r2, #0
 80089e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80089e4:	2300      	movs	r3, #0
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3714      	adds	r7, #20
 80089ea:	46bd      	mov	sp, r7
 80089ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f0:	4770      	bx	lr
 80089f2:	bf00      	nop
 80089f4:	40010000 	.word	0x40010000
 80089f8:	40000400 	.word	0x40000400
 80089fc:	40000800 	.word	0x40000800
 8008a00:	40000c00 	.word	0x40000c00
 8008a04:	40010400 	.word	0x40010400
 8008a08:	40014000 	.word	0x40014000
 8008a0c:	40001800 	.word	0x40001800

08008a10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b085      	sub	sp, #20
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d101      	bne.n	8008a2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008a28:	2302      	movs	r3, #2
 8008a2a:	e03d      	b.n	8008aa8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	68db      	ldr	r3, [r3, #12]
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	689b      	ldr	r3, [r3, #8]
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	691b      	ldr	r3, [r3, #16]
 8008a76:	4313      	orrs	r3, r2
 8008a78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	695b      	ldr	r3, [r3, #20]
 8008a84:	4313      	orrs	r3, r2
 8008a86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	69db      	ldr	r3, [r3, #28]
 8008a92:	4313      	orrs	r3, r2
 8008a94:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	68fa      	ldr	r2, [r7, #12]
 8008a9c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008aa6:	2300      	movs	r3, #0
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3714      	adds	r7, #20
 8008aac:	46bd      	mov	sp, r7
 8008aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab2:	4770      	bx	lr

08008ab4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b082      	sub	sp, #8
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d101      	bne.n	8008ac6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	e04a      	b.n	8008b5c <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008acc:	b2db      	uxtb	r3, r3
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d111      	bne.n	8008af6 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 fd84 	bl	80095e8 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d102      	bne.n	8008aee <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	4a1e      	ldr	r2, [pc, #120]	; (8008b64 <HAL_UART_Init+0xb0>)
 8008aec:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2224      	movs	r2, #36	; 0x24
 8008afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	68da      	ldr	r2, [r3, #12]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008b0c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 ffec 	bl	8009aec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	691a      	ldr	r2, [r3, #16]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008b22:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	695a      	ldr	r2, [r3, #20]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008b32:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	68da      	ldr	r2, [r3, #12]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008b42:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2200      	movs	r2, #0
 8008b48:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2220      	movs	r2, #32
 8008b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2220      	movs	r2, #32
 8008b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008b5a:	2300      	movs	r3, #0
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3708      	adds	r7, #8
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}
 8008b64:	08005441 	.word	0x08005441

08008b68 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b087      	sub	sp, #28
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	60f8      	str	r0, [r7, #12]
 8008b70:	460b      	mov	r3, r1
 8008b72:	607a      	str	r2, [r7, #4]
 8008b74:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008b76:	2300      	movs	r3, #0
 8008b78:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d107      	bne.n	8008b90 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b84:	f043 0220 	orr.w	r2, r3, #32
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	e08c      	b.n	8008caa <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	d101      	bne.n	8008b9e <HAL_UART_RegisterCallback+0x36>
 8008b9a:	2302      	movs	r3, #2
 8008b9c:	e085      	b.n	8008caa <HAL_UART_RegisterCallback+0x142>
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bac:	b2db      	uxtb	r3, r3
 8008bae:	2b20      	cmp	r3, #32
 8008bb0:	d151      	bne.n	8008c56 <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 8008bb2:	7afb      	ldrb	r3, [r7, #11]
 8008bb4:	2b0c      	cmp	r3, #12
 8008bb6:	d845      	bhi.n	8008c44 <HAL_UART_RegisterCallback+0xdc>
 8008bb8:	a201      	add	r2, pc, #4	; (adr r2, 8008bc0 <HAL_UART_RegisterCallback+0x58>)
 8008bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bbe:	bf00      	nop
 8008bc0:	08008bf5 	.word	0x08008bf5
 8008bc4:	08008bfd 	.word	0x08008bfd
 8008bc8:	08008c05 	.word	0x08008c05
 8008bcc:	08008c0d 	.word	0x08008c0d
 8008bd0:	08008c15 	.word	0x08008c15
 8008bd4:	08008c1d 	.word	0x08008c1d
 8008bd8:	08008c25 	.word	0x08008c25
 8008bdc:	08008c2d 	.word	0x08008c2d
 8008be0:	08008c45 	.word	0x08008c45
 8008be4:	08008c45 	.word	0x08008c45
 8008be8:	08008c45 	.word	0x08008c45
 8008bec:	08008c35 	.word	0x08008c35
 8008bf0:	08008c3d 	.word	0x08008c3d
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	687a      	ldr	r2, [r7, #4]
 8008bf8:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 8008bfa:	e051      	b.n	8008ca0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8008c02:	e04d      	b.n	8008ca0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	687a      	ldr	r2, [r7, #4]
 8008c08:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8008c0a:	e049      	b.n	8008ca0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8008c12:	e045      	b.n	8008ca0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	687a      	ldr	r2, [r7, #4]
 8008c18:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8008c1a:	e041      	b.n	8008ca0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8008c22:	e03d      	b.n	8008ca0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	687a      	ldr	r2, [r7, #4]
 8008c28:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8008c2a:	e039      	b.n	8008ca0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	687a      	ldr	r2, [r7, #4]
 8008c30:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8008c32:	e035      	b.n	8008ca0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8008c3a:	e031      	b.n	8008ca0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	687a      	ldr	r2, [r7, #4]
 8008c40:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8008c42:	e02d      	b.n	8008ca0 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c48:	f043 0220 	orr.w	r2, r3, #32
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8008c50:	2301      	movs	r3, #1
 8008c52:	75fb      	strb	r3, [r7, #23]
        break;
 8008c54:	e024      	b.n	8008ca0 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d116      	bne.n	8008c90 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 8008c62:	7afb      	ldrb	r3, [r7, #11]
 8008c64:	2b0b      	cmp	r3, #11
 8008c66:	d002      	beq.n	8008c6e <HAL_UART_RegisterCallback+0x106>
 8008c68:	2b0c      	cmp	r3, #12
 8008c6a:	d004      	beq.n	8008c76 <HAL_UART_RegisterCallback+0x10e>
 8008c6c:	e007      	b.n	8008c7e <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8008c74:	e014      	b.n	8008ca0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8008c7c:	e010      	b.n	8008ca0 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c82:	f043 0220 	orr.w	r2, r3, #32
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	75fb      	strb	r3, [r7, #23]
        break;
 8008c8e:	e007      	b.n	8008ca0 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c94:	f043 0220 	orr.w	r2, r3, #32
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008ca8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	371c      	adds	r7, #28
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr
 8008cb6:	bf00      	nop

08008cb8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b08a      	sub	sp, #40	; 0x28
 8008cbc:	af02      	add	r7, sp, #8
 8008cbe:	60f8      	str	r0, [r7, #12]
 8008cc0:	60b9      	str	r1, [r7, #8]
 8008cc2:	603b      	str	r3, [r7, #0]
 8008cc4:	4613      	mov	r3, r2
 8008cc6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cd2:	b2db      	uxtb	r3, r3
 8008cd4:	2b20      	cmp	r3, #32
 8008cd6:	d17c      	bne.n	8008dd2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d002      	beq.n	8008ce4 <HAL_UART_Transmit+0x2c>
 8008cde:	88fb      	ldrh	r3, [r7, #6]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d101      	bne.n	8008ce8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	e075      	b.n	8008dd4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cee:	2b01      	cmp	r3, #1
 8008cf0:	d101      	bne.n	8008cf6 <HAL_UART_Transmit+0x3e>
 8008cf2:	2302      	movs	r3, #2
 8008cf4:	e06e      	b.n	8008dd4 <HAL_UART_Transmit+0x11c>
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2200      	movs	r2, #0
 8008d02:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2221      	movs	r2, #33	; 0x21
 8008d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008d0c:	f7fd f886 	bl	8005e1c <HAL_GetTick>
 8008d10:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	88fa      	ldrh	r2, [r7, #6]
 8008d16:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	88fa      	ldrh	r2, [r7, #6]
 8008d1c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	689b      	ldr	r3, [r3, #8]
 8008d22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d26:	d108      	bne.n	8008d3a <HAL_UART_Transmit+0x82>
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	691b      	ldr	r3, [r3, #16]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d104      	bne.n	8008d3a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008d30:	2300      	movs	r3, #0
 8008d32:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	61bb      	str	r3, [r7, #24]
 8008d38:	e003      	b.n	8008d42 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	2200      	movs	r2, #0
 8008d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008d4a:	e02a      	b.n	8008da2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	9300      	str	r3, [sp, #0]
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	2200      	movs	r2, #0
 8008d54:	2180      	movs	r1, #128	; 0x80
 8008d56:	68f8      	ldr	r0, [r7, #12]
 8008d58:	f000 fc7e 	bl	8009658 <UART_WaitOnFlagUntilTimeout>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d001      	beq.n	8008d66 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008d62:	2303      	movs	r3, #3
 8008d64:	e036      	b.n	8008dd4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008d66:	69fb      	ldr	r3, [r7, #28]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d10b      	bne.n	8008d84 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008d6c:	69bb      	ldr	r3, [r7, #24]
 8008d6e:	881b      	ldrh	r3, [r3, #0]
 8008d70:	461a      	mov	r2, r3
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d7a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008d7c:	69bb      	ldr	r3, [r7, #24]
 8008d7e:	3302      	adds	r3, #2
 8008d80:	61bb      	str	r3, [r7, #24]
 8008d82:	e007      	b.n	8008d94 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008d84:	69fb      	ldr	r3, [r7, #28]
 8008d86:	781a      	ldrb	r2, [r3, #0]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008d8e:	69fb      	ldr	r3, [r7, #28]
 8008d90:	3301      	adds	r3, #1
 8008d92:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	3b01      	subs	r3, #1
 8008d9c:	b29a      	uxth	r2, r3
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008da6:	b29b      	uxth	r3, r3
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d1cf      	bne.n	8008d4c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	9300      	str	r3, [sp, #0]
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	2200      	movs	r2, #0
 8008db4:	2140      	movs	r1, #64	; 0x40
 8008db6:	68f8      	ldr	r0, [r7, #12]
 8008db8:	f000 fc4e 	bl	8009658 <UART_WaitOnFlagUntilTimeout>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d001      	beq.n	8008dc6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008dc2:	2303      	movs	r3, #3
 8008dc4:	e006      	b.n	8008dd4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2220      	movs	r2, #32
 8008dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	e000      	b.n	8008dd4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008dd2:	2302      	movs	r3, #2
  }
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3720      	adds	r7, #32
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b08a      	sub	sp, #40	; 0x28
 8008de0:	af02      	add	r7, sp, #8
 8008de2:	60f8      	str	r0, [r7, #12]
 8008de4:	60b9      	str	r1, [r7, #8]
 8008de6:	603b      	str	r3, [r7, #0]
 8008de8:	4613      	mov	r3, r2
 8008dea:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008dec:	2300      	movs	r3, #0
 8008dee:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008df6:	b2db      	uxtb	r3, r3
 8008df8:	2b20      	cmp	r3, #32
 8008dfa:	f040 808c 	bne.w	8008f16 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d002      	beq.n	8008e0a <HAL_UART_Receive+0x2e>
 8008e04:	88fb      	ldrh	r3, [r7, #6]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d101      	bne.n	8008e0e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	e084      	b.n	8008f18 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d101      	bne.n	8008e1c <HAL_UART_Receive+0x40>
 8008e18:	2302      	movs	r3, #2
 8008e1a:	e07d      	b.n	8008f18 <HAL_UART_Receive+0x13c>
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2200      	movs	r2, #0
 8008e28:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2222      	movs	r2, #34	; 0x22
 8008e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2200      	movs	r2, #0
 8008e36:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008e38:	f7fc fff0 	bl	8005e1c <HAL_GetTick>
 8008e3c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	88fa      	ldrh	r2, [r7, #6]
 8008e42:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	88fa      	ldrh	r2, [r7, #6]
 8008e48:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	689b      	ldr	r3, [r3, #8]
 8008e4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e52:	d108      	bne.n	8008e66 <HAL_UART_Receive+0x8a>
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	691b      	ldr	r3, [r3, #16]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d104      	bne.n	8008e66 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	61bb      	str	r3, [r7, #24]
 8008e64:	e003      	b.n	8008e6e <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2200      	movs	r2, #0
 8008e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008e76:	e043      	b.n	8008f00 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	9300      	str	r3, [sp, #0]
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	2120      	movs	r1, #32
 8008e82:	68f8      	ldr	r0, [r7, #12]
 8008e84:	f000 fbe8 	bl	8009658 <UART_WaitOnFlagUntilTimeout>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d001      	beq.n	8008e92 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8008e8e:	2303      	movs	r3, #3
 8008e90:	e042      	b.n	8008f18 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8008e92:	69fb      	ldr	r3, [r7, #28]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d10c      	bne.n	8008eb2 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ea4:	b29a      	uxth	r2, r3
 8008ea6:	69bb      	ldr	r3, [r7, #24]
 8008ea8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008eaa:	69bb      	ldr	r3, [r7, #24]
 8008eac:	3302      	adds	r3, #2
 8008eae:	61bb      	str	r3, [r7, #24]
 8008eb0:	e01f      	b.n	8008ef2 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	689b      	ldr	r3, [r3, #8]
 8008eb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008eba:	d007      	beq.n	8008ecc <HAL_UART_Receive+0xf0>
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	689b      	ldr	r3, [r3, #8]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d10a      	bne.n	8008eda <HAL_UART_Receive+0xfe>
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	691b      	ldr	r3, [r3, #16]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d106      	bne.n	8008eda <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	b2da      	uxtb	r2, r3
 8008ed4:	69fb      	ldr	r3, [r7, #28]
 8008ed6:	701a      	strb	r2, [r3, #0]
 8008ed8:	e008      	b.n	8008eec <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ee6:	b2da      	uxtb	r2, r3
 8008ee8:	69fb      	ldr	r3, [r7, #28]
 8008eea:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8008eec:	69fb      	ldr	r3, [r7, #28]
 8008eee:	3301      	adds	r3, #1
 8008ef0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	3b01      	subs	r3, #1
 8008efa:	b29a      	uxth	r2, r3
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d1b6      	bne.n	8008e78 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2220      	movs	r2, #32
 8008f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8008f12:	2300      	movs	r3, #0
 8008f14:	e000      	b.n	8008f18 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8008f16:	2302      	movs	r3, #2
  }
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3720      	adds	r7, #32
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b085      	sub	sp, #20
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	60b9      	str	r1, [r7, #8]
 8008f2a:	4613      	mov	r3, r2
 8008f2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f34:	b2db      	uxtb	r3, r3
 8008f36:	2b20      	cmp	r3, #32
 8008f38:	d130      	bne.n	8008f9c <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d002      	beq.n	8008f46 <HAL_UART_Transmit_IT+0x26>
 8008f40:	88fb      	ldrh	r3, [r7, #6]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d101      	bne.n	8008f4a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8008f46:	2301      	movs	r3, #1
 8008f48:	e029      	b.n	8008f9e <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d101      	bne.n	8008f58 <HAL_UART_Transmit_IT+0x38>
 8008f54:	2302      	movs	r3, #2
 8008f56:	e022      	b.n	8008f9e <HAL_UART_Transmit_IT+0x7e>
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	68ba      	ldr	r2, [r7, #8]
 8008f64:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	88fa      	ldrh	r2, [r7, #6]
 8008f6a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	88fa      	ldrh	r2, [r7, #6]
 8008f70:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2200      	movs	r2, #0
 8008f76:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2221      	movs	r2, #33	; 0x21
 8008f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	2200      	movs	r2, #0
 8008f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	68da      	ldr	r2, [r3, #12]
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008f96:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	e000      	b.n	8008f9e <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8008f9c:	2302      	movs	r3, #2
  }
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3714      	adds	r7, #20
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa8:	4770      	bx	lr

08008faa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008faa:	b580      	push	{r7, lr}
 8008fac:	b084      	sub	sp, #16
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	60f8      	str	r0, [r7, #12]
 8008fb2:	60b9      	str	r1, [r7, #8]
 8008fb4:	4613      	mov	r3, r2
 8008fb6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008fbe:	b2db      	uxtb	r3, r3
 8008fc0:	2b20      	cmp	r3, #32
 8008fc2:	d11d      	bne.n	8009000 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d002      	beq.n	8008fd0 <HAL_UART_Receive_IT+0x26>
 8008fca:	88fb      	ldrh	r3, [r7, #6]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d101      	bne.n	8008fd4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	e016      	b.n	8009002 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	d101      	bne.n	8008fe2 <HAL_UART_Receive_IT+0x38>
 8008fde:	2302      	movs	r3, #2
 8008fe0:	e00f      	b.n	8009002 <HAL_UART_Receive_IT+0x58>
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2201      	movs	r2, #1
 8008fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2200      	movs	r2, #0
 8008fee:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008ff0:	88fb      	ldrh	r3, [r7, #6]
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	68b9      	ldr	r1, [r7, #8]
 8008ff6:	68f8      	ldr	r0, [r7, #12]
 8008ff8:	f000 fb9c 	bl	8009734 <UART_Start_Receive_IT>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	e000      	b.n	8009002 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009000:	2302      	movs	r3, #2
  }
}
 8009002:	4618      	mov	r0, r3
 8009004:	3710      	adds	r7, #16
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}
	...

0800900c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b0ba      	sub	sp, #232	; 0xe8
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	68db      	ldr	r3, [r3, #12]
 8009024:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	695b      	ldr	r3, [r3, #20]
 800902e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009032:	2300      	movs	r3, #0
 8009034:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009038:	2300      	movs	r3, #0
 800903a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800903e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009042:	f003 030f 	and.w	r3, r3, #15
 8009046:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800904a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800904e:	2b00      	cmp	r3, #0
 8009050:	d10f      	bne.n	8009072 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009056:	f003 0320 	and.w	r3, r3, #32
 800905a:	2b00      	cmp	r3, #0
 800905c:	d009      	beq.n	8009072 <HAL_UART_IRQHandler+0x66>
 800905e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009062:	f003 0320 	and.w	r3, r3, #32
 8009066:	2b00      	cmp	r3, #0
 8009068:	d003      	beq.n	8009072 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 fc81 	bl	8009972 <UART_Receive_IT>
      return;
 8009070:	e25b      	b.n	800952a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009072:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009076:	2b00      	cmp	r3, #0
 8009078:	f000 80e1 	beq.w	800923e <HAL_UART_IRQHandler+0x232>
 800907c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009080:	f003 0301 	and.w	r3, r3, #1
 8009084:	2b00      	cmp	r3, #0
 8009086:	d106      	bne.n	8009096 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800908c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009090:	2b00      	cmp	r3, #0
 8009092:	f000 80d4 	beq.w	800923e <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800909a:	f003 0301 	and.w	r3, r3, #1
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d00b      	beq.n	80090ba <HAL_UART_IRQHandler+0xae>
 80090a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d005      	beq.n	80090ba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090b2:	f043 0201 	orr.w	r2, r3, #1
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80090ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090be:	f003 0304 	and.w	r3, r3, #4
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d00b      	beq.n	80090de <HAL_UART_IRQHandler+0xd2>
 80090c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80090ca:	f003 0301 	and.w	r3, r3, #1
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d005      	beq.n	80090de <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090d6:	f043 0202 	orr.w	r2, r3, #2
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80090de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090e2:	f003 0302 	and.w	r3, r3, #2
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d00b      	beq.n	8009102 <HAL_UART_IRQHandler+0xf6>
 80090ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80090ee:	f003 0301 	and.w	r3, r3, #1
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d005      	beq.n	8009102 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090fa:	f043 0204 	orr.w	r2, r3, #4
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009106:	f003 0308 	and.w	r3, r3, #8
 800910a:	2b00      	cmp	r3, #0
 800910c:	d011      	beq.n	8009132 <HAL_UART_IRQHandler+0x126>
 800910e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009112:	f003 0320 	and.w	r3, r3, #32
 8009116:	2b00      	cmp	r3, #0
 8009118:	d105      	bne.n	8009126 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800911a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800911e:	f003 0301 	and.w	r3, r3, #1
 8009122:	2b00      	cmp	r3, #0
 8009124:	d005      	beq.n	8009132 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800912a:	f043 0208 	orr.w	r2, r3, #8
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009136:	2b00      	cmp	r3, #0
 8009138:	f000 81f2 	beq.w	8009520 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800913c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009140:	f003 0320 	and.w	r3, r3, #32
 8009144:	2b00      	cmp	r3, #0
 8009146:	d008      	beq.n	800915a <HAL_UART_IRQHandler+0x14e>
 8009148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800914c:	f003 0320 	and.w	r3, r3, #32
 8009150:	2b00      	cmp	r3, #0
 8009152:	d002      	beq.n	800915a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f000 fc0c 	bl	8009972 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	695b      	ldr	r3, [r3, #20]
 8009160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009164:	2b40      	cmp	r3, #64	; 0x40
 8009166:	bf0c      	ite	eq
 8009168:	2301      	moveq	r3, #1
 800916a:	2300      	movne	r3, #0
 800916c:	b2db      	uxtb	r3, r3
 800916e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009176:	f003 0308 	and.w	r3, r3, #8
 800917a:	2b00      	cmp	r3, #0
 800917c:	d103      	bne.n	8009186 <HAL_UART_IRQHandler+0x17a>
 800917e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009182:	2b00      	cmp	r3, #0
 8009184:	d051      	beq.n	800922a <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 fb12 	bl	80097b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	695b      	ldr	r3, [r3, #20]
 8009192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009196:	2b40      	cmp	r3, #64	; 0x40
 8009198:	d142      	bne.n	8009220 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	3314      	adds	r3, #20
 80091a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80091a8:	e853 3f00 	ldrex	r3, [r3]
 80091ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80091b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80091b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	3314      	adds	r3, #20
 80091c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80091c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80091ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80091d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80091d6:	e841 2300 	strex	r3, r2, [r1]
 80091da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80091de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d1d9      	bne.n	800919a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d013      	beq.n	8009216 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f2:	4a7f      	ldr	r2, [pc, #508]	; (80093f0 <HAL_UART_IRQHandler+0x3e4>)
 80091f4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091fa:	4618      	mov	r0, r3
 80091fc:	f7fd f8ed 	bl	80063da <HAL_DMA_Abort_IT>
 8009200:	4603      	mov	r3, r0
 8009202:	2b00      	cmp	r3, #0
 8009204:	d019      	beq.n	800923a <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800920a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800920c:	687a      	ldr	r2, [r7, #4]
 800920e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009210:	4610      	mov	r0, r2
 8009212:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009214:	e011      	b.n	800923a <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800921e:	e00c      	b.n	800923a <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009228:	e007      	b.n	800923a <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2200      	movs	r2, #0
 8009236:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009238:	e172      	b.n	8009520 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800923a:	bf00      	nop
    return;
 800923c:	e170      	b.n	8009520 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009242:	2b01      	cmp	r3, #1
 8009244:	f040 814c 	bne.w	80094e0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800924c:	f003 0310 	and.w	r3, r3, #16
 8009250:	2b00      	cmp	r3, #0
 8009252:	f000 8145 	beq.w	80094e0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009256:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800925a:	f003 0310 	and.w	r3, r3, #16
 800925e:	2b00      	cmp	r3, #0
 8009260:	f000 813e 	beq.w	80094e0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009264:	2300      	movs	r3, #0
 8009266:	60bb      	str	r3, [r7, #8]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	60bb      	str	r3, [r7, #8]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	60bb      	str	r3, [r7, #8]
 8009278:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	695b      	ldr	r3, [r3, #20]
 8009280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009284:	2b40      	cmp	r3, #64	; 0x40
 8009286:	f040 80b5 	bne.w	80093f4 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009296:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800929a:	2b00      	cmp	r3, #0
 800929c:	f000 8142 	beq.w	8009524 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80092a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80092a8:	429a      	cmp	r2, r3
 80092aa:	f080 813b 	bcs.w	8009524 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80092b4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ba:	69db      	ldr	r3, [r3, #28]
 80092bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092c0:	f000 8088 	beq.w	80093d4 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	330c      	adds	r3, #12
 80092ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80092d2:	e853 3f00 	ldrex	r3, [r3]
 80092d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80092da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80092de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	330c      	adds	r3, #12
 80092ec:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80092f0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80092f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80092fc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009300:	e841 2300 	strex	r3, r2, [r1]
 8009304:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009308:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800930c:	2b00      	cmp	r3, #0
 800930e:	d1d9      	bne.n	80092c4 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	3314      	adds	r3, #20
 8009316:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009318:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800931a:	e853 3f00 	ldrex	r3, [r3]
 800931e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009320:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009322:	f023 0301 	bic.w	r3, r3, #1
 8009326:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	3314      	adds	r3, #20
 8009330:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009334:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009338:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800933a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800933c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009340:	e841 2300 	strex	r3, r2, [r1]
 8009344:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009346:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009348:	2b00      	cmp	r3, #0
 800934a:	d1e1      	bne.n	8009310 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	3314      	adds	r3, #20
 8009352:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009354:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009356:	e853 3f00 	ldrex	r3, [r3]
 800935a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800935c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800935e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009362:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	3314      	adds	r3, #20
 800936c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009370:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009372:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009374:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009376:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009378:	e841 2300 	strex	r3, r2, [r1]
 800937c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800937e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009380:	2b00      	cmp	r3, #0
 8009382:	d1e3      	bne.n	800934c <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2220      	movs	r2, #32
 8009388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2200      	movs	r2, #0
 8009390:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	330c      	adds	r3, #12
 8009398:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800939a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800939c:	e853 3f00 	ldrex	r3, [r3]
 80093a0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80093a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093a4:	f023 0310 	bic.w	r3, r3, #16
 80093a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	330c      	adds	r3, #12
 80093b2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80093b6:	65ba      	str	r2, [r7, #88]	; 0x58
 80093b8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80093bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80093be:	e841 2300 	strex	r3, r2, [r1]
 80093c2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80093c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d1e3      	bne.n	8009392 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7fc ff93 	bl	80062fa <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093d8:	687a      	ldr	r2, [r7, #4]
 80093da:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 80093dc:	687a      	ldr	r2, [r7, #4]
 80093de:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 80093e0:	b292      	uxth	r2, r2
 80093e2:	1a8a      	subs	r2, r1, r2
 80093e4:	b292      	uxth	r2, r2
 80093e6:	4611      	mov	r1, r2
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80093ec:	e09a      	b.n	8009524 <HAL_UART_IRQHandler+0x518>
 80093ee:	bf00      	nop
 80093f0:	08009877 	.word	0x08009877
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80093fc:	b29b      	uxth	r3, r3
 80093fe:	1ad3      	subs	r3, r2, r3
 8009400:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009408:	b29b      	uxth	r3, r3
 800940a:	2b00      	cmp	r3, #0
 800940c:	f000 808c 	beq.w	8009528 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009410:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009414:	2b00      	cmp	r3, #0
 8009416:	f000 8087 	beq.w	8009528 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	330c      	adds	r3, #12
 8009420:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009424:	e853 3f00 	ldrex	r3, [r3]
 8009428:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800942a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800942c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009430:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	330c      	adds	r3, #12
 800943a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800943e:	647a      	str	r2, [r7, #68]	; 0x44
 8009440:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009442:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009444:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009446:	e841 2300 	strex	r3, r2, [r1]
 800944a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800944c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800944e:	2b00      	cmp	r3, #0
 8009450:	d1e3      	bne.n	800941a <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	3314      	adds	r3, #20
 8009458:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800945a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800945c:	e853 3f00 	ldrex	r3, [r3]
 8009460:	623b      	str	r3, [r7, #32]
   return(result);
 8009462:	6a3b      	ldr	r3, [r7, #32]
 8009464:	f023 0301 	bic.w	r3, r3, #1
 8009468:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	3314      	adds	r3, #20
 8009472:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009476:	633a      	str	r2, [r7, #48]	; 0x30
 8009478:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800947a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800947c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800947e:	e841 2300 	strex	r3, r2, [r1]
 8009482:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009486:	2b00      	cmp	r3, #0
 8009488:	d1e3      	bne.n	8009452 <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2220      	movs	r2, #32
 800948e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2200      	movs	r2, #0
 8009496:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	330c      	adds	r3, #12
 800949e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	e853 3f00 	ldrex	r3, [r3]
 80094a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f023 0310 	bic.w	r3, r3, #16
 80094ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	330c      	adds	r3, #12
 80094b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80094bc:	61fa      	str	r2, [r7, #28]
 80094be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c0:	69b9      	ldr	r1, [r7, #24]
 80094c2:	69fa      	ldr	r2, [r7, #28]
 80094c4:	e841 2300 	strex	r3, r2, [r1]
 80094c8:	617b      	str	r3, [r7, #20]
   return(result);
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d1e3      	bne.n	8009498 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094d4:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 80094d8:	4611      	mov	r1, r2
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80094de:	e023      	b.n	8009528 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80094e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d009      	beq.n	8009500 <HAL_UART_IRQHandler+0x4f4>
 80094ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d003      	beq.n	8009500 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 f9d1 	bl	80098a0 <UART_Transmit_IT>
    return;
 80094fe:	e014      	b.n	800952a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009508:	2b00      	cmp	r3, #0
 800950a:	d00e      	beq.n	800952a <HAL_UART_IRQHandler+0x51e>
 800950c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009514:	2b00      	cmp	r3, #0
 8009516:	d008      	beq.n	800952a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 fa11 	bl	8009940 <UART_EndTransmit_IT>
    return;
 800951e:	e004      	b.n	800952a <HAL_UART_IRQHandler+0x51e>
    return;
 8009520:	bf00      	nop
 8009522:	e002      	b.n	800952a <HAL_UART_IRQHandler+0x51e>
      return;
 8009524:	bf00      	nop
 8009526:	e000      	b.n	800952a <HAL_UART_IRQHandler+0x51e>
      return;
 8009528:	bf00      	nop
  }
}
 800952a:	37e8      	adds	r7, #232	; 0xe8
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}

08009530 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009538:	bf00      	nop
 800953a:	370c      	adds	r7, #12
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr

08009544 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800954c:	bf00      	nop
 800954e:	370c      	adds	r7, #12
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr

08009558 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009558:	b480      	push	{r7}
 800955a:	b083      	sub	sp, #12
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009560:	bf00      	nop
 8009562:	370c      	adds	r7, #12
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr

0800956c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800956c:	b480      	push	{r7}
 800956e:	b083      	sub	sp, #12
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009574:	bf00      	nop
 8009576:	370c      	adds	r7, #12
 8009578:	46bd      	mov	sp, r7
 800957a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957e:	4770      	bx	lr

08009580 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009580:	b480      	push	{r7}
 8009582:	b083      	sub	sp, #12
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009588:	bf00      	nop
 800958a:	370c      	adds	r7, #12
 800958c:	46bd      	mov	sp, r7
 800958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009592:	4770      	bx	lr

08009594 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8009594:	b480      	push	{r7}
 8009596:	b083      	sub	sp, #12
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800959c:	bf00      	nop
 800959e:	370c      	adds	r7, #12
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr

080095a8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b083      	sub	sp, #12
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80095b0:	bf00      	nop
 80095b2:	370c      	adds	r7, #12
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr

080095bc <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80095bc:	b480      	push	{r7}
 80095be:	b083      	sub	sp, #12
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80095c4:	bf00      	nop
 80095c6:	370c      	adds	r7, #12
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr

080095d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b083      	sub	sp, #12
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	460b      	mov	r3, r1
 80095da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80095dc:	bf00      	nop
 80095de:	370c      	adds	r7, #12
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr

080095e8 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b083      	sub	sp, #12
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	4a10      	ldr	r2, [pc, #64]	; (8009634 <UART_InitCallbacksToDefault+0x4c>)
 80095f4:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	4a0f      	ldr	r2, [pc, #60]	; (8009638 <UART_InitCallbacksToDefault+0x50>)
 80095fa:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	4a0f      	ldr	r2, [pc, #60]	; (800963c <UART_InitCallbacksToDefault+0x54>)
 8009600:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	4a0e      	ldr	r2, [pc, #56]	; (8009640 <UART_InitCallbacksToDefault+0x58>)
 8009606:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	4a0e      	ldr	r2, [pc, #56]	; (8009644 <UART_InitCallbacksToDefault+0x5c>)
 800960c:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	4a0d      	ldr	r2, [pc, #52]	; (8009648 <UART_InitCallbacksToDefault+0x60>)
 8009612:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	4a0d      	ldr	r2, [pc, #52]	; (800964c <UART_InitCallbacksToDefault+0x64>)
 8009618:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	4a0c      	ldr	r2, [pc, #48]	; (8009650 <UART_InitCallbacksToDefault+0x68>)
 800961e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	4a0c      	ldr	r2, [pc, #48]	; (8009654 <UART_InitCallbacksToDefault+0x6c>)
 8009624:	669a      	str	r2, [r3, #104]	; 0x68

}
 8009626:	bf00      	nop
 8009628:	370c      	adds	r7, #12
 800962a:	46bd      	mov	sp, r7
 800962c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009630:	4770      	bx	lr
 8009632:	bf00      	nop
 8009634:	08009545 	.word	0x08009545
 8009638:	08009531 	.word	0x08009531
 800963c:	0800956d 	.word	0x0800956d
 8009640:	08009559 	.word	0x08009559
 8009644:	08009581 	.word	0x08009581
 8009648:	08009595 	.word	0x08009595
 800964c:	080095a9 	.word	0x080095a9
 8009650:	080095bd 	.word	0x080095bd
 8009654:	080095d1 	.word	0x080095d1

08009658 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b090      	sub	sp, #64	; 0x40
 800965c:	af00      	add	r7, sp, #0
 800965e:	60f8      	str	r0, [r7, #12]
 8009660:	60b9      	str	r1, [r7, #8]
 8009662:	603b      	str	r3, [r7, #0]
 8009664:	4613      	mov	r3, r2
 8009666:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009668:	e050      	b.n	800970c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800966a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800966c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009670:	d04c      	beq.n	800970c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009672:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009674:	2b00      	cmp	r3, #0
 8009676:	d007      	beq.n	8009688 <UART_WaitOnFlagUntilTimeout+0x30>
 8009678:	f7fc fbd0 	bl	8005e1c <HAL_GetTick>
 800967c:	4602      	mov	r2, r0
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	1ad3      	subs	r3, r2, r3
 8009682:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009684:	429a      	cmp	r2, r3
 8009686:	d241      	bcs.n	800970c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	330c      	adds	r3, #12
 800968e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009692:	e853 3f00 	ldrex	r3, [r3]
 8009696:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800969a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800969e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	330c      	adds	r3, #12
 80096a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80096a8:	637a      	str	r2, [r7, #52]	; 0x34
 80096aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80096ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80096b0:	e841 2300 	strex	r3, r2, [r1]
 80096b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80096b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d1e5      	bne.n	8009688 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	3314      	adds	r3, #20
 80096c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	e853 3f00 	ldrex	r3, [r3]
 80096ca:	613b      	str	r3, [r7, #16]
   return(result);
 80096cc:	693b      	ldr	r3, [r7, #16]
 80096ce:	f023 0301 	bic.w	r3, r3, #1
 80096d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	3314      	adds	r3, #20
 80096da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80096dc:	623a      	str	r2, [r7, #32]
 80096de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096e0:	69f9      	ldr	r1, [r7, #28]
 80096e2:	6a3a      	ldr	r2, [r7, #32]
 80096e4:	e841 2300 	strex	r3, r2, [r1]
 80096e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80096ea:	69bb      	ldr	r3, [r7, #24]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d1e5      	bne.n	80096bc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	2220      	movs	r2, #32
 80096f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2220      	movs	r2, #32
 80096fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	2200      	movs	r2, #0
 8009704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009708:	2303      	movs	r3, #3
 800970a:	e00f      	b.n	800972c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	681a      	ldr	r2, [r3, #0]
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	4013      	ands	r3, r2
 8009716:	68ba      	ldr	r2, [r7, #8]
 8009718:	429a      	cmp	r2, r3
 800971a:	bf0c      	ite	eq
 800971c:	2301      	moveq	r3, #1
 800971e:	2300      	movne	r3, #0
 8009720:	b2db      	uxtb	r3, r3
 8009722:	461a      	mov	r2, r3
 8009724:	79fb      	ldrb	r3, [r7, #7]
 8009726:	429a      	cmp	r2, r3
 8009728:	d09f      	beq.n	800966a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800972a:	2300      	movs	r3, #0
}
 800972c:	4618      	mov	r0, r3
 800972e:	3740      	adds	r7, #64	; 0x40
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009734:	b480      	push	{r7}
 8009736:	b085      	sub	sp, #20
 8009738:	af00      	add	r7, sp, #0
 800973a:	60f8      	str	r0, [r7, #12]
 800973c:	60b9      	str	r1, [r7, #8]
 800973e:	4613      	mov	r3, r2
 8009740:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	68ba      	ldr	r2, [r7, #8]
 8009746:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	88fa      	ldrh	r2, [r7, #6]
 800974c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	88fa      	ldrh	r2, [r7, #6]
 8009752:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2200      	movs	r2, #0
 8009758:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2222      	movs	r2, #34	; 0x22
 800975e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	2200      	movs	r2, #0
 8009766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	691b      	ldr	r3, [r3, #16]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d007      	beq.n	8009782 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	68da      	ldr	r2, [r3, #12]
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009780:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	695a      	ldr	r2, [r3, #20]
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f042 0201 	orr.w	r2, r2, #1
 8009790:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	68da      	ldr	r2, [r3, #12]
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f042 0220 	orr.w	r2, r2, #32
 80097a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80097a2:	2300      	movs	r3, #0
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3714      	adds	r7, #20
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr

080097b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b095      	sub	sp, #84	; 0x54
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	330c      	adds	r3, #12
 80097be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097c2:	e853 3f00 	ldrex	r3, [r3]
 80097c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80097c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80097ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	330c      	adds	r3, #12
 80097d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80097d8:	643a      	str	r2, [r7, #64]	; 0x40
 80097da:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80097de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80097e0:	e841 2300 	strex	r3, r2, [r1]
 80097e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80097e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d1e5      	bne.n	80097b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	3314      	adds	r3, #20
 80097f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f4:	6a3b      	ldr	r3, [r7, #32]
 80097f6:	e853 3f00 	ldrex	r3, [r3]
 80097fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80097fc:	69fb      	ldr	r3, [r7, #28]
 80097fe:	f023 0301 	bic.w	r3, r3, #1
 8009802:	64bb      	str	r3, [r7, #72]	; 0x48
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	3314      	adds	r3, #20
 800980a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800980c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800980e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009810:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009812:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009814:	e841 2300 	strex	r3, r2, [r1]
 8009818:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800981a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800981c:	2b00      	cmp	r3, #0
 800981e:	d1e5      	bne.n	80097ec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009824:	2b01      	cmp	r3, #1
 8009826:	d119      	bne.n	800985c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	330c      	adds	r3, #12
 800982e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	e853 3f00 	ldrex	r3, [r3]
 8009836:	60bb      	str	r3, [r7, #8]
   return(result);
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	f023 0310 	bic.w	r3, r3, #16
 800983e:	647b      	str	r3, [r7, #68]	; 0x44
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	330c      	adds	r3, #12
 8009846:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009848:	61ba      	str	r2, [r7, #24]
 800984a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800984c:	6979      	ldr	r1, [r7, #20]
 800984e:	69ba      	ldr	r2, [r7, #24]
 8009850:	e841 2300 	strex	r3, r2, [r1]
 8009854:	613b      	str	r3, [r7, #16]
   return(result);
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d1e5      	bne.n	8009828 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2220      	movs	r2, #32
 8009860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2200      	movs	r2, #0
 8009868:	631a      	str	r2, [r3, #48]	; 0x30
}
 800986a:	bf00      	nop
 800986c:	3754      	adds	r7, #84	; 0x54
 800986e:	46bd      	mov	sp, r7
 8009870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009874:	4770      	bx	lr

08009876 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009876:	b580      	push	{r7, lr}
 8009878:	b084      	sub	sp, #16
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009882:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	2200      	movs	r2, #0
 8009888:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	2200      	movs	r2, #0
 800988e:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009894:	68f8      	ldr	r0, [r7, #12]
 8009896:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009898:	bf00      	nop
 800989a:	3710      	adds	r7, #16
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}

080098a0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80098a0:	b480      	push	{r7}
 80098a2:	b085      	sub	sp, #20
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098ae:	b2db      	uxtb	r3, r3
 80098b0:	2b21      	cmp	r3, #33	; 0x21
 80098b2:	d13e      	bne.n	8009932 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	689b      	ldr	r3, [r3, #8]
 80098b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098bc:	d114      	bne.n	80098e8 <UART_Transmit_IT+0x48>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	691b      	ldr	r3, [r3, #16]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d110      	bne.n	80098e8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6a1b      	ldr	r3, [r3, #32]
 80098ca:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	881b      	ldrh	r3, [r3, #0]
 80098d0:	461a      	mov	r2, r3
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80098da:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6a1b      	ldr	r3, [r3, #32]
 80098e0:	1c9a      	adds	r2, r3, #2
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	621a      	str	r2, [r3, #32]
 80098e6:	e008      	b.n	80098fa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6a1b      	ldr	r3, [r3, #32]
 80098ec:	1c59      	adds	r1, r3, #1
 80098ee:	687a      	ldr	r2, [r7, #4]
 80098f0:	6211      	str	r1, [r2, #32]
 80098f2:	781a      	ldrb	r2, [r3, #0]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80098fe:	b29b      	uxth	r3, r3
 8009900:	3b01      	subs	r3, #1
 8009902:	b29b      	uxth	r3, r3
 8009904:	687a      	ldr	r2, [r7, #4]
 8009906:	4619      	mov	r1, r3
 8009908:	84d1      	strh	r1, [r2, #38]	; 0x26
 800990a:	2b00      	cmp	r3, #0
 800990c:	d10f      	bne.n	800992e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	68da      	ldr	r2, [r3, #12]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800991c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	68da      	ldr	r2, [r3, #12]
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800992c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800992e:	2300      	movs	r3, #0
 8009930:	e000      	b.n	8009934 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009932:	2302      	movs	r3, #2
  }
}
 8009934:	4618      	mov	r0, r3
 8009936:	3714      	adds	r7, #20
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr

08009940 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b082      	sub	sp, #8
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	68da      	ldr	r2, [r3, #12]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009956:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2220      	movs	r2, #32
 800995c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009968:	2300      	movs	r3, #0
}
 800996a:	4618      	mov	r0, r3
 800996c:	3708      	adds	r7, #8
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}

08009972 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009972:	b580      	push	{r7, lr}
 8009974:	b08c      	sub	sp, #48	; 0x30
 8009976:	af00      	add	r7, sp, #0
 8009978:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009980:	b2db      	uxtb	r3, r3
 8009982:	2b22      	cmp	r3, #34	; 0x22
 8009984:	f040 80ad 	bne.w	8009ae2 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	689b      	ldr	r3, [r3, #8]
 800998c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009990:	d117      	bne.n	80099c2 <UART_Receive_IT+0x50>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	691b      	ldr	r3, [r3, #16]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d113      	bne.n	80099c2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800999a:	2300      	movs	r3, #0
 800999c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099a2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	b29b      	uxth	r3, r3
 80099ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099b0:	b29a      	uxth	r2, r3
 80099b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ba:	1c9a      	adds	r2, r3, #2
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	629a      	str	r2, [r3, #40]	; 0x28
 80099c0:	e026      	b.n	8009a10 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80099c8:	2300      	movs	r3, #0
 80099ca:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	689b      	ldr	r3, [r3, #8]
 80099d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099d4:	d007      	beq.n	80099e6 <UART_Receive_IT+0x74>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	689b      	ldr	r3, [r3, #8]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d10a      	bne.n	80099f4 <UART_Receive_IT+0x82>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	691b      	ldr	r3, [r3, #16]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d106      	bne.n	80099f4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	685b      	ldr	r3, [r3, #4]
 80099ec:	b2da      	uxtb	r2, r3
 80099ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099f0:	701a      	strb	r2, [r3, #0]
 80099f2:	e008      	b.n	8009a06 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	b2db      	uxtb	r3, r3
 80099fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a00:	b2da      	uxtb	r2, r3
 8009a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a04:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a0a:	1c5a      	adds	r2, r3, #1
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009a14:	b29b      	uxth	r3, r3
 8009a16:	3b01      	subs	r3, #1
 8009a18:	b29b      	uxth	r3, r3
 8009a1a:	687a      	ldr	r2, [r7, #4]
 8009a1c:	4619      	mov	r1, r3
 8009a1e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d15c      	bne.n	8009ade <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	68da      	ldr	r2, [r3, #12]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f022 0220 	bic.w	r2, r2, #32
 8009a32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	68da      	ldr	r2, [r3, #12]
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009a42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	695a      	ldr	r2, [r3, #20]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f022 0201 	bic.w	r2, r2, #1
 8009a52:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2220      	movs	r2, #32
 8009a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d136      	bne.n	8009ad2 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2200      	movs	r2, #0
 8009a68:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	330c      	adds	r3, #12
 8009a70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	e853 3f00 	ldrex	r3, [r3]
 8009a78:	613b      	str	r3, [r7, #16]
   return(result);
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	f023 0310 	bic.w	r3, r3, #16
 8009a80:	627b      	str	r3, [r7, #36]	; 0x24
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	330c      	adds	r3, #12
 8009a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a8a:	623a      	str	r2, [r7, #32]
 8009a8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a8e:	69f9      	ldr	r1, [r7, #28]
 8009a90:	6a3a      	ldr	r2, [r7, #32]
 8009a92:	e841 2300 	strex	r3, r2, [r1]
 8009a96:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a98:	69bb      	ldr	r3, [r7, #24]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d1e5      	bne.n	8009a6a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f003 0310 	and.w	r3, r3, #16
 8009aa8:	2b10      	cmp	r3, #16
 8009aaa:	d10a      	bne.n	8009ac2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009aac:	2300      	movs	r3, #0
 8009aae:	60fb      	str	r3, [r7, #12]
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	60fb      	str	r3, [r7, #12]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	685b      	ldr	r3, [r3, #4]
 8009abe:	60fb      	str	r3, [r7, #12]
 8009ac0:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ac6:	687a      	ldr	r2, [r7, #4]
 8009ac8:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8009aca:	4611      	mov	r1, r2
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	4798      	blx	r3
 8009ad0:	e003      	b.n	8009ada <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009ada:	2300      	movs	r3, #0
 8009adc:	e002      	b.n	8009ae4 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	e000      	b.n	8009ae4 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 8009ae2:	2302      	movs	r3, #2
  }
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3730      	adds	r7, #48	; 0x30
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009aec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009af0:	b0c0      	sub	sp, #256	; 0x100
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	691b      	ldr	r3, [r3, #16]
 8009b00:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b08:	68d9      	ldr	r1, [r3, #12]
 8009b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b0e:	681a      	ldr	r2, [r3, #0]
 8009b10:	ea40 0301 	orr.w	r3, r0, r1
 8009b14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b1a:	689a      	ldr	r2, [r3, #8]
 8009b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b20:	691b      	ldr	r3, [r3, #16]
 8009b22:	431a      	orrs	r2, r3
 8009b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b28:	695b      	ldr	r3, [r3, #20]
 8009b2a:	431a      	orrs	r2, r3
 8009b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b30:	69db      	ldr	r3, [r3, #28]
 8009b32:	4313      	orrs	r3, r2
 8009b34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	68db      	ldr	r3, [r3, #12]
 8009b40:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009b44:	f021 010c 	bic.w	r1, r1, #12
 8009b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b4c:	681a      	ldr	r2, [r3, #0]
 8009b4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009b52:	430b      	orrs	r3, r1
 8009b54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	695b      	ldr	r3, [r3, #20]
 8009b5e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b66:	6999      	ldr	r1, [r3, #24]
 8009b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b6c:	681a      	ldr	r2, [r3, #0]
 8009b6e:	ea40 0301 	orr.w	r3, r0, r1
 8009b72:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b78:	681a      	ldr	r2, [r3, #0]
 8009b7a:	4b8f      	ldr	r3, [pc, #572]	; (8009db8 <UART_SetConfig+0x2cc>)
 8009b7c:	429a      	cmp	r2, r3
 8009b7e:	d005      	beq.n	8009b8c <UART_SetConfig+0xa0>
 8009b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b84:	681a      	ldr	r2, [r3, #0]
 8009b86:	4b8d      	ldr	r3, [pc, #564]	; (8009dbc <UART_SetConfig+0x2d0>)
 8009b88:	429a      	cmp	r2, r3
 8009b8a:	d104      	bne.n	8009b96 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009b8c:	f7fd fc10 	bl	80073b0 <HAL_RCC_GetPCLK2Freq>
 8009b90:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009b94:	e003      	b.n	8009b9e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009b96:	f7fd fbf7 	bl	8007388 <HAL_RCC_GetPCLK1Freq>
 8009b9a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ba2:	69db      	ldr	r3, [r3, #28]
 8009ba4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ba8:	f040 810c 	bne.w	8009dc4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009bac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009bb6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009bba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009bbe:	4622      	mov	r2, r4
 8009bc0:	462b      	mov	r3, r5
 8009bc2:	1891      	adds	r1, r2, r2
 8009bc4:	65b9      	str	r1, [r7, #88]	; 0x58
 8009bc6:	415b      	adcs	r3, r3
 8009bc8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009bca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009bce:	4621      	mov	r1, r4
 8009bd0:	eb12 0801 	adds.w	r8, r2, r1
 8009bd4:	4629      	mov	r1, r5
 8009bd6:	eb43 0901 	adc.w	r9, r3, r1
 8009bda:	f04f 0200 	mov.w	r2, #0
 8009bde:	f04f 0300 	mov.w	r3, #0
 8009be2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009be6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009bea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009bee:	4690      	mov	r8, r2
 8009bf0:	4699      	mov	r9, r3
 8009bf2:	4623      	mov	r3, r4
 8009bf4:	eb18 0303 	adds.w	r3, r8, r3
 8009bf8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009bfc:	462b      	mov	r3, r5
 8009bfe:	eb49 0303 	adc.w	r3, r9, r3
 8009c02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c0a:	685b      	ldr	r3, [r3, #4]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009c12:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009c16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009c1a:	460b      	mov	r3, r1
 8009c1c:	18db      	adds	r3, r3, r3
 8009c1e:	653b      	str	r3, [r7, #80]	; 0x50
 8009c20:	4613      	mov	r3, r2
 8009c22:	eb42 0303 	adc.w	r3, r2, r3
 8009c26:	657b      	str	r3, [r7, #84]	; 0x54
 8009c28:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009c2c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009c30:	f7f6 ffba 	bl	8000ba8 <__aeabi_uldivmod>
 8009c34:	4602      	mov	r2, r0
 8009c36:	460b      	mov	r3, r1
 8009c38:	4b61      	ldr	r3, [pc, #388]	; (8009dc0 <UART_SetConfig+0x2d4>)
 8009c3a:	fba3 2302 	umull	r2, r3, r3, r2
 8009c3e:	095b      	lsrs	r3, r3, #5
 8009c40:	011c      	lsls	r4, r3, #4
 8009c42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009c46:	2200      	movs	r2, #0
 8009c48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009c4c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009c50:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009c54:	4642      	mov	r2, r8
 8009c56:	464b      	mov	r3, r9
 8009c58:	1891      	adds	r1, r2, r2
 8009c5a:	64b9      	str	r1, [r7, #72]	; 0x48
 8009c5c:	415b      	adcs	r3, r3
 8009c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009c60:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009c64:	4641      	mov	r1, r8
 8009c66:	eb12 0a01 	adds.w	sl, r2, r1
 8009c6a:	4649      	mov	r1, r9
 8009c6c:	eb43 0b01 	adc.w	fp, r3, r1
 8009c70:	f04f 0200 	mov.w	r2, #0
 8009c74:	f04f 0300 	mov.w	r3, #0
 8009c78:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009c7c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009c80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009c84:	4692      	mov	sl, r2
 8009c86:	469b      	mov	fp, r3
 8009c88:	4643      	mov	r3, r8
 8009c8a:	eb1a 0303 	adds.w	r3, sl, r3
 8009c8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009c92:	464b      	mov	r3, r9
 8009c94:	eb4b 0303 	adc.w	r3, fp, r3
 8009c98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009ca8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009cac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009cb0:	460b      	mov	r3, r1
 8009cb2:	18db      	adds	r3, r3, r3
 8009cb4:	643b      	str	r3, [r7, #64]	; 0x40
 8009cb6:	4613      	mov	r3, r2
 8009cb8:	eb42 0303 	adc.w	r3, r2, r3
 8009cbc:	647b      	str	r3, [r7, #68]	; 0x44
 8009cbe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009cc2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009cc6:	f7f6 ff6f 	bl	8000ba8 <__aeabi_uldivmod>
 8009cca:	4602      	mov	r2, r0
 8009ccc:	460b      	mov	r3, r1
 8009cce:	4611      	mov	r1, r2
 8009cd0:	4b3b      	ldr	r3, [pc, #236]	; (8009dc0 <UART_SetConfig+0x2d4>)
 8009cd2:	fba3 2301 	umull	r2, r3, r3, r1
 8009cd6:	095b      	lsrs	r3, r3, #5
 8009cd8:	2264      	movs	r2, #100	; 0x64
 8009cda:	fb02 f303 	mul.w	r3, r2, r3
 8009cde:	1acb      	subs	r3, r1, r3
 8009ce0:	00db      	lsls	r3, r3, #3
 8009ce2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009ce6:	4b36      	ldr	r3, [pc, #216]	; (8009dc0 <UART_SetConfig+0x2d4>)
 8009ce8:	fba3 2302 	umull	r2, r3, r3, r2
 8009cec:	095b      	lsrs	r3, r3, #5
 8009cee:	005b      	lsls	r3, r3, #1
 8009cf0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009cf4:	441c      	add	r4, r3
 8009cf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009d00:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009d04:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009d08:	4642      	mov	r2, r8
 8009d0a:	464b      	mov	r3, r9
 8009d0c:	1891      	adds	r1, r2, r2
 8009d0e:	63b9      	str	r1, [r7, #56]	; 0x38
 8009d10:	415b      	adcs	r3, r3
 8009d12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009d18:	4641      	mov	r1, r8
 8009d1a:	1851      	adds	r1, r2, r1
 8009d1c:	6339      	str	r1, [r7, #48]	; 0x30
 8009d1e:	4649      	mov	r1, r9
 8009d20:	414b      	adcs	r3, r1
 8009d22:	637b      	str	r3, [r7, #52]	; 0x34
 8009d24:	f04f 0200 	mov.w	r2, #0
 8009d28:	f04f 0300 	mov.w	r3, #0
 8009d2c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009d30:	4659      	mov	r1, fp
 8009d32:	00cb      	lsls	r3, r1, #3
 8009d34:	4651      	mov	r1, sl
 8009d36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009d3a:	4651      	mov	r1, sl
 8009d3c:	00ca      	lsls	r2, r1, #3
 8009d3e:	4610      	mov	r0, r2
 8009d40:	4619      	mov	r1, r3
 8009d42:	4603      	mov	r3, r0
 8009d44:	4642      	mov	r2, r8
 8009d46:	189b      	adds	r3, r3, r2
 8009d48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009d4c:	464b      	mov	r3, r9
 8009d4e:	460a      	mov	r2, r1
 8009d50:	eb42 0303 	adc.w	r3, r2, r3
 8009d54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009d64:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009d68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009d6c:	460b      	mov	r3, r1
 8009d6e:	18db      	adds	r3, r3, r3
 8009d70:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d72:	4613      	mov	r3, r2
 8009d74:	eb42 0303 	adc.w	r3, r2, r3
 8009d78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009d7e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009d82:	f7f6 ff11 	bl	8000ba8 <__aeabi_uldivmod>
 8009d86:	4602      	mov	r2, r0
 8009d88:	460b      	mov	r3, r1
 8009d8a:	4b0d      	ldr	r3, [pc, #52]	; (8009dc0 <UART_SetConfig+0x2d4>)
 8009d8c:	fba3 1302 	umull	r1, r3, r3, r2
 8009d90:	095b      	lsrs	r3, r3, #5
 8009d92:	2164      	movs	r1, #100	; 0x64
 8009d94:	fb01 f303 	mul.w	r3, r1, r3
 8009d98:	1ad3      	subs	r3, r2, r3
 8009d9a:	00db      	lsls	r3, r3, #3
 8009d9c:	3332      	adds	r3, #50	; 0x32
 8009d9e:	4a08      	ldr	r2, [pc, #32]	; (8009dc0 <UART_SetConfig+0x2d4>)
 8009da0:	fba2 2303 	umull	r2, r3, r2, r3
 8009da4:	095b      	lsrs	r3, r3, #5
 8009da6:	f003 0207 	and.w	r2, r3, #7
 8009daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4422      	add	r2, r4
 8009db2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009db4:	e106      	b.n	8009fc4 <UART_SetConfig+0x4d8>
 8009db6:	bf00      	nop
 8009db8:	40011000 	.word	0x40011000
 8009dbc:	40011400 	.word	0x40011400
 8009dc0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009dc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009dc8:	2200      	movs	r2, #0
 8009dca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009dce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009dd2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009dd6:	4642      	mov	r2, r8
 8009dd8:	464b      	mov	r3, r9
 8009dda:	1891      	adds	r1, r2, r2
 8009ddc:	6239      	str	r1, [r7, #32]
 8009dde:	415b      	adcs	r3, r3
 8009de0:	627b      	str	r3, [r7, #36]	; 0x24
 8009de2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009de6:	4641      	mov	r1, r8
 8009de8:	1854      	adds	r4, r2, r1
 8009dea:	4649      	mov	r1, r9
 8009dec:	eb43 0501 	adc.w	r5, r3, r1
 8009df0:	f04f 0200 	mov.w	r2, #0
 8009df4:	f04f 0300 	mov.w	r3, #0
 8009df8:	00eb      	lsls	r3, r5, #3
 8009dfa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009dfe:	00e2      	lsls	r2, r4, #3
 8009e00:	4614      	mov	r4, r2
 8009e02:	461d      	mov	r5, r3
 8009e04:	4643      	mov	r3, r8
 8009e06:	18e3      	adds	r3, r4, r3
 8009e08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009e0c:	464b      	mov	r3, r9
 8009e0e:	eb45 0303 	adc.w	r3, r5, r3
 8009e12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e1a:	685b      	ldr	r3, [r3, #4]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009e22:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009e26:	f04f 0200 	mov.w	r2, #0
 8009e2a:	f04f 0300 	mov.w	r3, #0
 8009e2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009e32:	4629      	mov	r1, r5
 8009e34:	008b      	lsls	r3, r1, #2
 8009e36:	4621      	mov	r1, r4
 8009e38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009e3c:	4621      	mov	r1, r4
 8009e3e:	008a      	lsls	r2, r1, #2
 8009e40:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009e44:	f7f6 feb0 	bl	8000ba8 <__aeabi_uldivmod>
 8009e48:	4602      	mov	r2, r0
 8009e4a:	460b      	mov	r3, r1
 8009e4c:	4b60      	ldr	r3, [pc, #384]	; (8009fd0 <UART_SetConfig+0x4e4>)
 8009e4e:	fba3 2302 	umull	r2, r3, r3, r2
 8009e52:	095b      	lsrs	r3, r3, #5
 8009e54:	011c      	lsls	r4, r3, #4
 8009e56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009e60:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009e64:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009e68:	4642      	mov	r2, r8
 8009e6a:	464b      	mov	r3, r9
 8009e6c:	1891      	adds	r1, r2, r2
 8009e6e:	61b9      	str	r1, [r7, #24]
 8009e70:	415b      	adcs	r3, r3
 8009e72:	61fb      	str	r3, [r7, #28]
 8009e74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009e78:	4641      	mov	r1, r8
 8009e7a:	1851      	adds	r1, r2, r1
 8009e7c:	6139      	str	r1, [r7, #16]
 8009e7e:	4649      	mov	r1, r9
 8009e80:	414b      	adcs	r3, r1
 8009e82:	617b      	str	r3, [r7, #20]
 8009e84:	f04f 0200 	mov.w	r2, #0
 8009e88:	f04f 0300 	mov.w	r3, #0
 8009e8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009e90:	4659      	mov	r1, fp
 8009e92:	00cb      	lsls	r3, r1, #3
 8009e94:	4651      	mov	r1, sl
 8009e96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009e9a:	4651      	mov	r1, sl
 8009e9c:	00ca      	lsls	r2, r1, #3
 8009e9e:	4610      	mov	r0, r2
 8009ea0:	4619      	mov	r1, r3
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	4642      	mov	r2, r8
 8009ea6:	189b      	adds	r3, r3, r2
 8009ea8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009eac:	464b      	mov	r3, r9
 8009eae:	460a      	mov	r2, r1
 8009eb0:	eb42 0303 	adc.w	r3, r2, r3
 8009eb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	67bb      	str	r3, [r7, #120]	; 0x78
 8009ec2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009ec4:	f04f 0200 	mov.w	r2, #0
 8009ec8:	f04f 0300 	mov.w	r3, #0
 8009ecc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009ed0:	4649      	mov	r1, r9
 8009ed2:	008b      	lsls	r3, r1, #2
 8009ed4:	4641      	mov	r1, r8
 8009ed6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009eda:	4641      	mov	r1, r8
 8009edc:	008a      	lsls	r2, r1, #2
 8009ede:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009ee2:	f7f6 fe61 	bl	8000ba8 <__aeabi_uldivmod>
 8009ee6:	4602      	mov	r2, r0
 8009ee8:	460b      	mov	r3, r1
 8009eea:	4611      	mov	r1, r2
 8009eec:	4b38      	ldr	r3, [pc, #224]	; (8009fd0 <UART_SetConfig+0x4e4>)
 8009eee:	fba3 2301 	umull	r2, r3, r3, r1
 8009ef2:	095b      	lsrs	r3, r3, #5
 8009ef4:	2264      	movs	r2, #100	; 0x64
 8009ef6:	fb02 f303 	mul.w	r3, r2, r3
 8009efa:	1acb      	subs	r3, r1, r3
 8009efc:	011b      	lsls	r3, r3, #4
 8009efe:	3332      	adds	r3, #50	; 0x32
 8009f00:	4a33      	ldr	r2, [pc, #204]	; (8009fd0 <UART_SetConfig+0x4e4>)
 8009f02:	fba2 2303 	umull	r2, r3, r2, r3
 8009f06:	095b      	lsrs	r3, r3, #5
 8009f08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009f0c:	441c      	add	r4, r3
 8009f0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f12:	2200      	movs	r2, #0
 8009f14:	673b      	str	r3, [r7, #112]	; 0x70
 8009f16:	677a      	str	r2, [r7, #116]	; 0x74
 8009f18:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009f1c:	4642      	mov	r2, r8
 8009f1e:	464b      	mov	r3, r9
 8009f20:	1891      	adds	r1, r2, r2
 8009f22:	60b9      	str	r1, [r7, #8]
 8009f24:	415b      	adcs	r3, r3
 8009f26:	60fb      	str	r3, [r7, #12]
 8009f28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009f2c:	4641      	mov	r1, r8
 8009f2e:	1851      	adds	r1, r2, r1
 8009f30:	6039      	str	r1, [r7, #0]
 8009f32:	4649      	mov	r1, r9
 8009f34:	414b      	adcs	r3, r1
 8009f36:	607b      	str	r3, [r7, #4]
 8009f38:	f04f 0200 	mov.w	r2, #0
 8009f3c:	f04f 0300 	mov.w	r3, #0
 8009f40:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009f44:	4659      	mov	r1, fp
 8009f46:	00cb      	lsls	r3, r1, #3
 8009f48:	4651      	mov	r1, sl
 8009f4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009f4e:	4651      	mov	r1, sl
 8009f50:	00ca      	lsls	r2, r1, #3
 8009f52:	4610      	mov	r0, r2
 8009f54:	4619      	mov	r1, r3
 8009f56:	4603      	mov	r3, r0
 8009f58:	4642      	mov	r2, r8
 8009f5a:	189b      	adds	r3, r3, r2
 8009f5c:	66bb      	str	r3, [r7, #104]	; 0x68
 8009f5e:	464b      	mov	r3, r9
 8009f60:	460a      	mov	r2, r1
 8009f62:	eb42 0303 	adc.w	r3, r2, r3
 8009f66:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	663b      	str	r3, [r7, #96]	; 0x60
 8009f72:	667a      	str	r2, [r7, #100]	; 0x64
 8009f74:	f04f 0200 	mov.w	r2, #0
 8009f78:	f04f 0300 	mov.w	r3, #0
 8009f7c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009f80:	4649      	mov	r1, r9
 8009f82:	008b      	lsls	r3, r1, #2
 8009f84:	4641      	mov	r1, r8
 8009f86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009f8a:	4641      	mov	r1, r8
 8009f8c:	008a      	lsls	r2, r1, #2
 8009f8e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009f92:	f7f6 fe09 	bl	8000ba8 <__aeabi_uldivmod>
 8009f96:	4602      	mov	r2, r0
 8009f98:	460b      	mov	r3, r1
 8009f9a:	4b0d      	ldr	r3, [pc, #52]	; (8009fd0 <UART_SetConfig+0x4e4>)
 8009f9c:	fba3 1302 	umull	r1, r3, r3, r2
 8009fa0:	095b      	lsrs	r3, r3, #5
 8009fa2:	2164      	movs	r1, #100	; 0x64
 8009fa4:	fb01 f303 	mul.w	r3, r1, r3
 8009fa8:	1ad3      	subs	r3, r2, r3
 8009faa:	011b      	lsls	r3, r3, #4
 8009fac:	3332      	adds	r3, #50	; 0x32
 8009fae:	4a08      	ldr	r2, [pc, #32]	; (8009fd0 <UART_SetConfig+0x4e4>)
 8009fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8009fb4:	095b      	lsrs	r3, r3, #5
 8009fb6:	f003 020f 	and.w	r2, r3, #15
 8009fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4422      	add	r2, r4
 8009fc2:	609a      	str	r2, [r3, #8]
}
 8009fc4:	bf00      	nop
 8009fc6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009fd0:	51eb851f 	.word	0x51eb851f

08009fd4 <gencrc>:
#include "SharedFunctions.h"

uint16_t CRC16 = 0x8005;

uint16_t gencrc(uint8_t* data, size_t len)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b089      	sub	sp, #36	; 0x24
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	6039      	str	r1, [r7, #0]
    uint16_t out = 0;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	83fb      	strh	r3, [r7, #30]
    int bits_read = 0, bit_flag;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	61bb      	str	r3, [r7, #24]

    /* Sanity check: */
    if (data == NULL)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d12d      	bne.n	800a048 <gencrc+0x74>
        return 0;
 8009fec:	2300      	movs	r3, #0
 8009fee:	e064      	b.n	800a0ba <gencrc+0xe6>

    while (len > 0)
    {
        bit_flag = out >> 15;
 8009ff0:	8bfb      	ldrh	r3, [r7, #30]
 8009ff2:	0bdb      	lsrs	r3, r3, #15
 8009ff4:	b29b      	uxth	r3, r3
 8009ff6:	60bb      	str	r3, [r7, #8]

        /* Get next bit: */
        out <<= 1;
 8009ff8:	8bfb      	ldrh	r3, [r7, #30]
 8009ffa:	005b      	lsls	r3, r3, #1
 8009ffc:	83fb      	strh	r3, [r7, #30]
        out |= (*data >> bits_read) & 1; // item a) work from the least significant bits
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	781b      	ldrb	r3, [r3, #0]
 800a002:	461a      	mov	r2, r3
 800a004:	69bb      	ldr	r3, [r7, #24]
 800a006:	fa42 f303 	asr.w	r3, r2, r3
 800a00a:	b21b      	sxth	r3, r3
 800a00c:	f003 0301 	and.w	r3, r3, #1
 800a010:	b21a      	sxth	r2, r3
 800a012:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a016:	4313      	orrs	r3, r2
 800a018:	b21b      	sxth	r3, r3
 800a01a:	83fb      	strh	r3, [r7, #30]

        /* Increment bit counter: */
        bits_read++;
 800a01c:	69bb      	ldr	r3, [r7, #24]
 800a01e:	3301      	adds	r3, #1
 800a020:	61bb      	str	r3, [r7, #24]
        if (bits_read > 7)
 800a022:	69bb      	ldr	r3, [r7, #24]
 800a024:	2b07      	cmp	r3, #7
 800a026:	dd07      	ble.n	800a038 <gencrc+0x64>
        {
            bits_read = 0;
 800a028:	2300      	movs	r3, #0
 800a02a:	61bb      	str	r3, [r7, #24]
            data++;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	3301      	adds	r3, #1
 800a030:	607b      	str	r3, [r7, #4]
            len--;
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	3b01      	subs	r3, #1
 800a036:	603b      	str	r3, [r7, #0]
        }

        /* Cycle check: */
        if (bit_flag)
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d004      	beq.n	800a048 <gencrc+0x74>
            out ^= CRC16;
 800a03e:	4b22      	ldr	r3, [pc, #136]	; (800a0c8 <gencrc+0xf4>)
 800a040:	881a      	ldrh	r2, [r3, #0]
 800a042:	8bfb      	ldrh	r3, [r7, #30]
 800a044:	4053      	eors	r3, r2
 800a046:	83fb      	strh	r3, [r7, #30]
    while (len > 0)
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d1d0      	bne.n	8009ff0 <gencrc+0x1c>

    }

    // item b) "push out" the last 16 bits
    int i;
    for (i = 0; i < 16; ++i) {
 800a04e:	2300      	movs	r3, #0
 800a050:	617b      	str	r3, [r7, #20]
 800a052:	e011      	b.n	800a078 <gencrc+0xa4>
        bit_flag = out >> 15;
 800a054:	8bfb      	ldrh	r3, [r7, #30]
 800a056:	0bdb      	lsrs	r3, r3, #15
 800a058:	b29b      	uxth	r3, r3
 800a05a:	60bb      	str	r3, [r7, #8]
        out <<= 1;
 800a05c:	8bfb      	ldrh	r3, [r7, #30]
 800a05e:	005b      	lsls	r3, r3, #1
 800a060:	83fb      	strh	r3, [r7, #30]
        if (bit_flag)
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d004      	beq.n	800a072 <gencrc+0x9e>
            out ^= CRC16;
 800a068:	4b17      	ldr	r3, [pc, #92]	; (800a0c8 <gencrc+0xf4>)
 800a06a:	881a      	ldrh	r2, [r3, #0]
 800a06c:	8bfb      	ldrh	r3, [r7, #30]
 800a06e:	4053      	eors	r3, r2
 800a070:	83fb      	strh	r3, [r7, #30]
    for (i = 0; i < 16; ++i) {
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	3301      	adds	r3, #1
 800a076:	617b      	str	r3, [r7, #20]
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	2b0f      	cmp	r3, #15
 800a07c:	ddea      	ble.n	800a054 <gencrc+0x80>
    }

    // item c) reverse the bits
    uint16_t crc = 0;
 800a07e:	2300      	movs	r3, #0
 800a080:	827b      	strh	r3, [r7, #18]
    i = 0x8000;
 800a082:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a086:	617b      	str	r3, [r7, #20]
    int j = 0x0001;
 800a088:	2301      	movs	r3, #1
 800a08a:	60fb      	str	r3, [r7, #12]
    for (; i != 0; i >>= 1, j <<= 1) {
 800a08c:	e011      	b.n	800a0b2 <gencrc+0xde>
        if (i & out) crc |= j;
 800a08e:	8bfa      	ldrh	r2, [r7, #30]
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	4013      	ands	r3, r2
 800a094:	2b00      	cmp	r3, #0
 800a096:	d006      	beq.n	800a0a6 <gencrc+0xd2>
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	b21a      	sxth	r2, r3
 800a09c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a0a0:	4313      	orrs	r3, r2
 800a0a2:	b21b      	sxth	r3, r3
 800a0a4:	827b      	strh	r3, [r7, #18]
    for (; i != 0; i >>= 1, j <<= 1) {
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	105b      	asrs	r3, r3, #1
 800a0aa:	617b      	str	r3, [r7, #20]
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	005b      	lsls	r3, r3, #1
 800a0b0:	60fb      	str	r3, [r7, #12]
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d1ea      	bne.n	800a08e <gencrc+0xba>
    }

    return crc;
 800a0b8:	8a7b      	ldrh	r3, [r7, #18]
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3724      	adds	r7, #36	; 0x24
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c4:	4770      	bx	lr
 800a0c6:	bf00      	nop
 800a0c8:	20000016 	.word	0x20000016

0800a0cc <_Z8Delay_msm>:
extern GPIO_TypeDef *nRF_csnPort;
extern uint16_t      nRF_cePin;
extern uint16_t      nRF_csnPin;

inline void Delay_ms(uint32_t ms) 
{ 
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b082      	sub	sp, #8
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms); 
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f7fb fead 	bl	8005e34 <HAL_Delay>
}
 800a0da:	bf00      	nop
 800a0dc:	3708      	adds	r7, #8
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}
	...

0800a0e4 <_Z11nRF24_CSN_Lv>:

inline void nRF24_CE_H() {
    HAL_GPIO_WritePin(nRF_cePort, nRF_cePin, GPIO_PIN_SET);
}

inline void nRF24_CSN_L() {
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(nRF_csnPort, nRF_csnPin, GPIO_PIN_RESET);
 800a0e8:	4b04      	ldr	r3, [pc, #16]	; (800a0fc <_Z11nRF24_CSN_Lv+0x18>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	4a04      	ldr	r2, [pc, #16]	; (800a100 <_Z11nRF24_CSN_Lv+0x1c>)
 800a0ee:	8811      	ldrh	r1, [r2, #0]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f7fc fb48 	bl	8006788 <HAL_GPIO_WritePin>
}
 800a0f8:	bf00      	nop
 800a0fa:	bd80      	pop	{r7, pc}
 800a0fc:	2000269c 	.word	0x2000269c
 800a100:	200026a2 	.word	0x200026a2

0800a104 <_Z11nRF24_CSN_Hv>:

inline void nRF24_CSN_H() {
 800a104:	b580      	push	{r7, lr}
 800a106:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(nRF_csnPort, nRF_csnPin, GPIO_PIN_SET);
 800a108:	4b04      	ldr	r3, [pc, #16]	; (800a11c <_Z11nRF24_CSN_Hv+0x18>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	4a04      	ldr	r2, [pc, #16]	; (800a120 <_Z11nRF24_CSN_Hv+0x1c>)
 800a10e:	8811      	ldrh	r1, [r2, #0]
 800a110:	2201      	movs	r2, #1
 800a112:	4618      	mov	r0, r3
 800a114:	f7fc fb38 	bl	8006788 <HAL_GPIO_WritePin>
}
 800a118:	bf00      	nop
 800a11a:	bd80      	pop	{r7, pc}
 800a11c:	2000269c 	.word	0x2000269c
 800a120:	200026a2 	.word	0x200026a2

0800a124 <_Z11nRF24_LL_RWh>:

inline uint8_t nRF24_LL_RW(uint8_t data) {
 800a124:	b580      	push	{r7, lr}
 800a126:	b088      	sub	sp, #32
 800a128:	af02      	add	r7, sp, #8
 800a12a:	4603      	mov	r3, r0
 800a12c:	71fb      	strb	r3, [r7, #7]
    // Wait until TX buffer is empty
    uint8_t result;
    HAL_StatusTypeDef hal_result = HAL_SPI_TransmitReceive(nRF_hspi, &data, &result, 1, 2000);
 800a12e:	4b19      	ldr	r3, [pc, #100]	; (800a194 <_Z11nRF24_LL_RWh+0x70>)
 800a130:	6818      	ldr	r0, [r3, #0]
 800a132:	f107 020f 	add.w	r2, r7, #15
 800a136:	1df9      	adds	r1, r7, #7
 800a138:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a13c:	9300      	str	r3, [sp, #0]
 800a13e:	2301      	movs	r3, #1
 800a140:	f7fd fc52 	bl	80079e8 <HAL_SPI_TransmitReceive>
 800a144:	4603      	mov	r3, r0
 800a146:	75fb      	strb	r3, [r7, #23]
    int count = 0;
 800a148:	2300      	movs	r3, #0
 800a14a:	613b      	str	r3, [r7, #16]
    while(hal_result != HAL_OK && ++count < 30) {
 800a14c:	e00f      	b.n	800a16e <_Z11nRF24_LL_RWh+0x4a>
        Delay_ms(50);
 800a14e:	2032      	movs	r0, #50	; 0x32
 800a150:	f7ff ffbc 	bl	800a0cc <_Z8Delay_msm>
        hal_result = HAL_SPI_TransmitReceive(nRF_hspi, &data, &result, 1, 2000);
 800a154:	4b0f      	ldr	r3, [pc, #60]	; (800a194 <_Z11nRF24_LL_RWh+0x70>)
 800a156:	6818      	ldr	r0, [r3, #0]
 800a158:	f107 020f 	add.w	r2, r7, #15
 800a15c:	1df9      	adds	r1, r7, #7
 800a15e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a162:	9300      	str	r3, [sp, #0]
 800a164:	2301      	movs	r3, #1
 800a166:	f7fd fc3f 	bl	80079e8 <HAL_SPI_TransmitReceive>
 800a16a:	4603      	mov	r3, r0
 800a16c:	75fb      	strb	r3, [r7, #23]
    while(hal_result != HAL_OK && ++count < 30) {
 800a16e:	7dfb      	ldrb	r3, [r7, #23]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d007      	beq.n	800a184 <_Z11nRF24_LL_RWh+0x60>
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	3301      	adds	r3, #1
 800a178:	613b      	str	r3, [r7, #16]
 800a17a:	693b      	ldr	r3, [r7, #16]
 800a17c:	2b1d      	cmp	r3, #29
 800a17e:	dc01      	bgt.n	800a184 <_Z11nRF24_LL_RWh+0x60>
 800a180:	2301      	movs	r3, #1
 800a182:	e000      	b.n	800a186 <_Z11nRF24_LL_RWh+0x62>
 800a184:	2300      	movs	r3, #0
 800a186:	2b00      	cmp	r3, #0
 800a188:	d1e1      	bne.n	800a14e <_Z11nRF24_LL_RWh+0x2a>
    };
    return result;
 800a18a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3718      	adds	r7, #24
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}
 800a194:	20000000 	.word	0x20000000

0800a198 <_ZL13nRF24_ReadRegh>:

// Read a register
// input:
//   reg - number of register to read
// return: value of register
static uint8_t nRF24_ReadReg(uint8_t reg) {
 800a198:	b580      	push	{r7, lr}
 800a19a:	b084      	sub	sp, #16
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	4603      	mov	r3, r0
 800a1a0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;

    nRF24_CSN_L();
 800a1a2:	f7ff ff9f 	bl	800a0e4 <_Z11nRF24_CSN_Lv>
    nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 800a1a6:	79fb      	ldrb	r3, [r7, #7]
 800a1a8:	f003 031f 	and.w	r3, r3, #31
 800a1ac:	b2db      	uxtb	r3, r3
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f7ff ffb8 	bl	800a124 <_Z11nRF24_LL_RWh>
    value = nRF24_LL_RW(nRF24_CMD_NOP);
 800a1b4:	20ff      	movs	r0, #255	; 0xff
 800a1b6:	f7ff ffb5 	bl	800a124 <_Z11nRF24_LL_RWh>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	73fb      	strb	r3, [r7, #15]
    nRF24_CSN_H();
 800a1be:	f7ff ffa1 	bl	800a104 <_Z11nRF24_CSN_Hv>

    return value;
 800a1c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	3710      	adds	r7, #16
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}

0800a1cc <_ZL14nRF24_WriteReghh>:

// Write a new value to register
// input:
//   reg - number of register to write
//   value - value to write
static void nRF24_WriteReg(uint8_t reg, uint8_t value) {
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b082      	sub	sp, #8
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	460a      	mov	r2, r1
 800a1d6:	71fb      	strb	r3, [r7, #7]
 800a1d8:	4613      	mov	r3, r2
 800a1da:	71bb      	strb	r3, [r7, #6]
    nRF24_CSN_L();
 800a1dc:	f7ff ff82 	bl	800a0e4 <_Z11nRF24_CSN_Lv>
    if (reg < nRF24_CMD_W_REGISTER) {
 800a1e0:	79fb      	ldrb	r3, [r7, #7]
 800a1e2:	2b1f      	cmp	r3, #31
 800a1e4:	d80e      	bhi.n	800a204 <_ZL14nRF24_WriteReghh+0x38>
        // This is a register access
        nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 800a1e6:	79fb      	ldrb	r3, [r7, #7]
 800a1e8:	f003 031f 	and.w	r3, r3, #31
 800a1ec:	b2db      	uxtb	r3, r3
 800a1ee:	f043 0320 	orr.w	r3, r3, #32
 800a1f2:	b2db      	uxtb	r3, r3
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f7ff ff95 	bl	800a124 <_Z11nRF24_LL_RWh>
        nRF24_LL_RW(value);
 800a1fa:	79bb      	ldrb	r3, [r7, #6]
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f7ff ff91 	bl	800a124 <_Z11nRF24_LL_RWh>
 800a202:	e013      	b.n	800a22c <_ZL14nRF24_WriteReghh+0x60>
    } else {
        // This is a single byte command or future command/register
        nRF24_LL_RW(reg);
 800a204:	79fb      	ldrb	r3, [r7, #7]
 800a206:	4618      	mov	r0, r3
 800a208:	f7ff ff8c 	bl	800a124 <_Z11nRF24_LL_RWh>
        if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 800a20c:	79fb      	ldrb	r3, [r7, #7]
 800a20e:	2be1      	cmp	r3, #225	; 0xe1
 800a210:	d00c      	beq.n	800a22c <_ZL14nRF24_WriteReghh+0x60>
 800a212:	79fb      	ldrb	r3, [r7, #7]
 800a214:	2be2      	cmp	r3, #226	; 0xe2
 800a216:	d009      	beq.n	800a22c <_ZL14nRF24_WriteReghh+0x60>
 800a218:	79fb      	ldrb	r3, [r7, #7]
 800a21a:	2be3      	cmp	r3, #227	; 0xe3
 800a21c:	d006      	beq.n	800a22c <_ZL14nRF24_WriteReghh+0x60>
                (reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP)) {
 800a21e:	79fb      	ldrb	r3, [r7, #7]
 800a220:	2bff      	cmp	r3, #255	; 0xff
 800a222:	d003      	beq.n	800a22c <_ZL14nRF24_WriteReghh+0x60>
            // Send register value
            nRF24_LL_RW(value);
 800a224:	79bb      	ldrb	r3, [r7, #6]
 800a226:	4618      	mov	r0, r3
 800a228:	f7ff ff7c 	bl	800a124 <_Z11nRF24_LL_RWh>
        }
    }
    nRF24_CSN_H();
 800a22c:	f7ff ff6a 	bl	800a104 <_Z11nRF24_CSN_Hv>
}
 800a230:	bf00      	nop
 800a232:	3708      	adds	r7, #8
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}

0800a238 <_ZL15nRF24_ReadMBReghPhh>:
// Read a multi-byte register
// input:
//   reg - number of register to read
//   pBuf - pointer to the buffer for register data
//   count - number of bytes to read
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 800a238:	b590      	push	{r4, r7, lr}
 800a23a:	b083      	sub	sp, #12
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	4603      	mov	r3, r0
 800a240:	6039      	str	r1, [r7, #0]
 800a242:	71fb      	strb	r3, [r7, #7]
 800a244:	4613      	mov	r3, r2
 800a246:	71bb      	strb	r3, [r7, #6]
    nRF24_CSN_L();
 800a248:	f7ff ff4c 	bl	800a0e4 <_Z11nRF24_CSN_Lv>
    nRF24_LL_RW(reg);
 800a24c:	79fb      	ldrb	r3, [r7, #7]
 800a24e:	4618      	mov	r0, r3
 800a250:	f7ff ff68 	bl	800a124 <_Z11nRF24_LL_RWh>
    while (count--) {
 800a254:	e007      	b.n	800a266 <_ZL15nRF24_ReadMBReghPhh+0x2e>
        *pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 800a256:	683c      	ldr	r4, [r7, #0]
 800a258:	1c63      	adds	r3, r4, #1
 800a25a:	603b      	str	r3, [r7, #0]
 800a25c:	20ff      	movs	r0, #255	; 0xff
 800a25e:	f7ff ff61 	bl	800a124 <_Z11nRF24_LL_RWh>
 800a262:	4603      	mov	r3, r0
 800a264:	7023      	strb	r3, [r4, #0]
    while (count--) {
 800a266:	79bb      	ldrb	r3, [r7, #6]
 800a268:	1e5a      	subs	r2, r3, #1
 800a26a:	71ba      	strb	r2, [r7, #6]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	bf14      	ite	ne
 800a270:	2301      	movne	r3, #1
 800a272:	2300      	moveq	r3, #0
 800a274:	b2db      	uxtb	r3, r3
 800a276:	2b00      	cmp	r3, #0
 800a278:	d1ed      	bne.n	800a256 <_ZL15nRF24_ReadMBReghPhh+0x1e>
    }
    nRF24_CSN_H();
 800a27a:	f7ff ff43 	bl	800a104 <_Z11nRF24_CSN_Hv>
}
 800a27e:	bf00      	nop
 800a280:	370c      	adds	r7, #12
 800a282:	46bd      	mov	sp, r7
 800a284:	bd90      	pop	{r4, r7, pc}

0800a286 <_ZL16nRF24_WriteMBReghPhh>:
// Write a multi-byte register
// input:
//   reg - number of register to write
//   pBuf - pointer to the buffer with data to write
//   count - number of bytes to write
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 800a286:	b580      	push	{r7, lr}
 800a288:	b082      	sub	sp, #8
 800a28a:	af00      	add	r7, sp, #0
 800a28c:	4603      	mov	r3, r0
 800a28e:	6039      	str	r1, [r7, #0]
 800a290:	71fb      	strb	r3, [r7, #7]
 800a292:	4613      	mov	r3, r2
 800a294:	71bb      	strb	r3, [r7, #6]
    nRF24_CSN_L();
 800a296:	f7ff ff25 	bl	800a0e4 <_Z11nRF24_CSN_Lv>
    nRF24_LL_RW(reg);
 800a29a:	79fb      	ldrb	r3, [r7, #7]
 800a29c:	4618      	mov	r0, r3
 800a29e:	f7ff ff41 	bl	800a124 <_Z11nRF24_LL_RWh>
    while (count--) {
 800a2a2:	e006      	b.n	800a2b2 <_ZL16nRF24_WriteMBReghPhh+0x2c>
        nRF24_LL_RW(*pBuf++);
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	1c5a      	adds	r2, r3, #1
 800a2a8:	603a      	str	r2, [r7, #0]
 800a2aa:	781b      	ldrb	r3, [r3, #0]
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f7ff ff39 	bl	800a124 <_Z11nRF24_LL_RWh>
    while (count--) {
 800a2b2:	79bb      	ldrb	r3, [r7, #6]
 800a2b4:	1e5a      	subs	r2, r3, #1
 800a2b6:	71ba      	strb	r2, [r7, #6]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	bf14      	ite	ne
 800a2bc:	2301      	movne	r3, #1
 800a2be:	2300      	moveq	r3, #0
 800a2c0:	b2db      	uxtb	r3, r3
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d1ee      	bne.n	800a2a4 <_ZL16nRF24_WriteMBReghPhh+0x1e>
    }
    nRF24_CSN_H();
 800a2c6:	f7ff ff1d 	bl	800a104 <_Z11nRF24_CSN_Hv>
}
 800a2ca:	bf00      	nop
 800a2cc:	3708      	adds	r7, #8
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}

0800a2d2 <_Z10nRF24_Initv>:

// Set transceiver to it's initial state
// note: RX/TX pipe addresses remains untouched
void nRF24_Init(void) {
 800a2d2:	b580      	push	{r7, lr}
 800a2d4:	af00      	add	r7, sp, #0
    // Write to registers their initial values
    nRF24_WriteReg(nRF24_REG_CONFIG, 0x08);
 800a2d6:	2108      	movs	r1, #8
 800a2d8:	2000      	movs	r0, #0
 800a2da:	f7ff ff77 	bl	800a1cc <_ZL14nRF24_WriteReghh>
    nRF24_WriteReg(nRF24_REG_EN_AA, 0x3F);
 800a2de:	213f      	movs	r1, #63	; 0x3f
 800a2e0:	2001      	movs	r0, #1
 800a2e2:	f7ff ff73 	bl	800a1cc <_ZL14nRF24_WriteReghh>
    nRF24_WriteReg(nRF24_REG_EN_RXADDR, 0x03);
 800a2e6:	2103      	movs	r1, #3
 800a2e8:	2002      	movs	r0, #2
 800a2ea:	f7ff ff6f 	bl	800a1cc <_ZL14nRF24_WriteReghh>
    nRF24_WriteReg(nRF24_REG_SETUP_AW, 0x03);
 800a2ee:	2103      	movs	r1, #3
 800a2f0:	2003      	movs	r0, #3
 800a2f2:	f7ff ff6b 	bl	800a1cc <_ZL14nRF24_WriteReghh>
    nRF24_WriteReg(nRF24_REG_SETUP_RETR, 0x03);
 800a2f6:	2103      	movs	r1, #3
 800a2f8:	2004      	movs	r0, #4
 800a2fa:	f7ff ff67 	bl	800a1cc <_ZL14nRF24_WriteReghh>
    nRF24_WriteReg(nRF24_REG_RF_CH, 0x02);
 800a2fe:	2102      	movs	r1, #2
 800a300:	2005      	movs	r0, #5
 800a302:	f7ff ff63 	bl	800a1cc <_ZL14nRF24_WriteReghh>
    nRF24_WriteReg(nRF24_REG_RF_SETUP, 0x0E);
 800a306:	210e      	movs	r1, #14
 800a308:	2006      	movs	r0, #6
 800a30a:	f7ff ff5f 	bl	800a1cc <_ZL14nRF24_WriteReghh>
    nRF24_WriteReg(nRF24_REG_STATUS, 0x00);
 800a30e:	2100      	movs	r1, #0
 800a310:	2007      	movs	r0, #7
 800a312:	f7ff ff5b 	bl	800a1cc <_ZL14nRF24_WriteReghh>
    nRF24_WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 800a316:	2100      	movs	r1, #0
 800a318:	2011      	movs	r0, #17
 800a31a:	f7ff ff57 	bl	800a1cc <_ZL14nRF24_WriteReghh>
    nRF24_WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 800a31e:	2100      	movs	r1, #0
 800a320:	2012      	movs	r0, #18
 800a322:	f7ff ff53 	bl	800a1cc <_ZL14nRF24_WriteReghh>
    nRF24_WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 800a326:	2100      	movs	r1, #0
 800a328:	2013      	movs	r0, #19
 800a32a:	f7ff ff4f 	bl	800a1cc <_ZL14nRF24_WriteReghh>
    nRF24_WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 800a32e:	2100      	movs	r1, #0
 800a330:	2014      	movs	r0, #20
 800a332:	f7ff ff4b 	bl	800a1cc <_ZL14nRF24_WriteReghh>
    nRF24_WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 800a336:	2100      	movs	r1, #0
 800a338:	2015      	movs	r0, #21
 800a33a:	f7ff ff47 	bl	800a1cc <_ZL14nRF24_WriteReghh>
    nRF24_WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 800a33e:	2100      	movs	r1, #0
 800a340:	2016      	movs	r0, #22
 800a342:	f7ff ff43 	bl	800a1cc <_ZL14nRF24_WriteReghh>
    nRF24_WriteReg(nRF24_REG_DYNPD, 0x00);
 800a346:	2100      	movs	r1, #0
 800a348:	201c      	movs	r0, #28
 800a34a:	f7ff ff3f 	bl	800a1cc <_ZL14nRF24_WriteReghh>
    nRF24_WriteReg(nRF24_REG_FEATURE, 0x00);
 800a34e:	2100      	movs	r1, #0
 800a350:	201d      	movs	r0, #29
 800a352:	f7ff ff3b 	bl	800a1cc <_ZL14nRF24_WriteReghh>

    // Clear the FIFO's
    nRF24_FlushRX();
 800a356:	f000 fa09 	bl	800a76c <_Z13nRF24_FlushRXv>
    nRF24_FlushTX();
 800a35a:	f000 f9ff 	bl	800a75c <_Z13nRF24_FlushTXv>

    // Clear any pending interrupt flags
    nRF24_ClearIRQFlags();
 800a35e:	f000 fa0d 	bl	800a77c <_Z19nRF24_ClearIRQFlagsv>

    // Deassert CSN pin (chip release)
    nRF24_CSN_H();
 800a362:	f7ff fecf 	bl	800a104 <_Z11nRF24_CSN_Hv>
}
 800a366:	bf00      	nop
 800a368:	bd80      	pop	{r7, pc}
	...

0800a36c <_Z11nRF24_Checkv>:

// Check if the nRF24L01 present
// return:
//   1 - nRF24L01 is online and responding
//   0 - received sequence differs from original
uint8_t nRF24_Check(void) {
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b084      	sub	sp, #16
 800a370:	af00      	add	r7, sp, #0
    uint8_t rxbuf[5];
    uint8_t i;
    uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 800a372:	4b16      	ldr	r3, [pc, #88]	; (800a3cc <_Z11nRF24_Checkv+0x60>)
 800a374:	60bb      	str	r3, [r7, #8]

    // Write test TX address and read TX_ADDR register
    nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 800a376:	2205      	movs	r2, #5
 800a378:	68b9      	ldr	r1, [r7, #8]
 800a37a:	2030      	movs	r0, #48	; 0x30
 800a37c:	f7ff ff83 	bl	800a286 <_ZL16nRF24_WriteMBReghPhh>
    nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 800a380:	463b      	mov	r3, r7
 800a382:	2205      	movs	r2, #5
 800a384:	4619      	mov	r1, r3
 800a386:	2010      	movs	r0, #16
 800a388:	f7ff ff56 	bl	800a238 <_ZL15nRF24_ReadMBReghPhh>

    // Compare buffers, return error on first mismatch
    for (i = 0; i < 5; i++) {
 800a38c:	2300      	movs	r3, #0
 800a38e:	73fb      	strb	r3, [r7, #15]
 800a390:	e014      	b.n	800a3bc <_Z11nRF24_Checkv+0x50>
        if (rxbuf[i] != *ptr++) {
 800a392:	7bfb      	ldrb	r3, [r7, #15]
 800a394:	3310      	adds	r3, #16
 800a396:	443b      	add	r3, r7
 800a398:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	1c59      	adds	r1, r3, #1
 800a3a0:	60b9      	str	r1, [r7, #8]
 800a3a2:	781b      	ldrb	r3, [r3, #0]
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	bf14      	ite	ne
 800a3a8:	2301      	movne	r3, #1
 800a3aa:	2300      	moveq	r3, #0
 800a3ac:	b2db      	uxtb	r3, r3
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d001      	beq.n	800a3b6 <_Z11nRF24_Checkv+0x4a>
            return 0;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	e006      	b.n	800a3c4 <_Z11nRF24_Checkv+0x58>
    for (i = 0; i < 5; i++) {
 800a3b6:	7bfb      	ldrb	r3, [r7, #15]
 800a3b8:	3301      	adds	r3, #1
 800a3ba:	73fb      	strb	r3, [r7, #15]
 800a3bc:	7bfb      	ldrb	r3, [r7, #15]
 800a3be:	2b04      	cmp	r3, #4
 800a3c0:	d9e7      	bls.n	800a392 <_Z11nRF24_Checkv+0x26>
        }
    }

    return 1;
 800a3c2:	2301      	movs	r3, #1
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3710      	adds	r7, #16
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}
 800a3cc:	0800e3e4 	.word	0x0800e3e4

0800a3d0 <_Z18nRF24_SetPowerModeh>:

// Control transceiver power mode
// input:
//   mode - new state of power mode, one of nRF24_PWR_xx values
void nRF24_SetPowerMode(uint8_t mode) {
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b084      	sub	sp, #16
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	71fb      	strb	r3, [r7, #7]
    uint8_t reg;

    reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 800a3da:	2000      	movs	r0, #0
 800a3dc:	f7ff fedc 	bl	800a198 <_ZL13nRF24_ReadRegh>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	73fb      	strb	r3, [r7, #15]
    if (mode == nRF24_PWR_UP) {
 800a3e4:	79fb      	ldrb	r3, [r7, #7]
 800a3e6:	2b02      	cmp	r3, #2
 800a3e8:	d104      	bne.n	800a3f4 <_Z18nRF24_SetPowerModeh+0x24>
        // Set the PWR_UP bit of CONFIG register to wake the transceiver
        // It goes into Stanby-I mode with consumption about 26uA
        reg |= nRF24_CONFIG_PWR_UP;
 800a3ea:	7bfb      	ldrb	r3, [r7, #15]
 800a3ec:	f043 0302 	orr.w	r3, r3, #2
 800a3f0:	73fb      	strb	r3, [r7, #15]
 800a3f2:	e003      	b.n	800a3fc <_Z18nRF24_SetPowerModeh+0x2c>
    } else {
        // Clear the PWR_UP bit of CONFIG register to put the transceiver
        // into power down mode with consumption about 900nA
        reg &= ~nRF24_CONFIG_PWR_UP;
 800a3f4:	7bfb      	ldrb	r3, [r7, #15]
 800a3f6:	f023 0302 	bic.w	r3, r3, #2
 800a3fa:	73fb      	strb	r3, [r7, #15]
    }
    nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 800a3fc:	7bfb      	ldrb	r3, [r7, #15]
 800a3fe:	4619      	mov	r1, r3
 800a400:	2000      	movs	r0, #0
 800a402:	f7ff fee3 	bl	800a1cc <_ZL14nRF24_WriteReghh>
}
 800a406:	bf00      	nop
 800a408:	3710      	adds	r7, #16
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}

0800a40e <_Z24nRF24_SetOperationalModeh>:

// Set transceiver operational mode
// input:
//   mode - operational mode, one of nRF24_MODE_xx values
void nRF24_SetOperationalMode(uint8_t mode) {
 800a40e:	b580      	push	{r7, lr}
 800a410:	b084      	sub	sp, #16
 800a412:	af00      	add	r7, sp, #0
 800a414:	4603      	mov	r3, r0
 800a416:	71fb      	strb	r3, [r7, #7]
    uint8_t reg;

    // Configure PRIM_RX bit of the CONFIG register
    reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 800a418:	2000      	movs	r0, #0
 800a41a:	f7ff febd 	bl	800a198 <_ZL13nRF24_ReadRegh>
 800a41e:	4603      	mov	r3, r0
 800a420:	73fb      	strb	r3, [r7, #15]
    reg &= ~nRF24_CONFIG_PRIM_RX;
 800a422:	7bfb      	ldrb	r3, [r7, #15]
 800a424:	f023 0301 	bic.w	r3, r3, #1
 800a428:	73fb      	strb	r3, [r7, #15]
    reg |= (mode & nRF24_CONFIG_PRIM_RX);
 800a42a:	79fb      	ldrb	r3, [r7, #7]
 800a42c:	f003 0301 	and.w	r3, r3, #1
 800a430:	b2da      	uxtb	r2, r3
 800a432:	7bfb      	ldrb	r3, [r7, #15]
 800a434:	4313      	orrs	r3, r2
 800a436:	73fb      	strb	r3, [r7, #15]
    nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 800a438:	7bfb      	ldrb	r3, [r7, #15]
 800a43a:	4619      	mov	r1, r3
 800a43c:	2000      	movs	r0, #0
 800a43e:	f7ff fec5 	bl	800a1cc <_ZL14nRF24_WriteReghh>
}
 800a442:	bf00      	nop
 800a444:	3710      	adds	r7, #16
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}

0800a44a <_Z29nRF24_SetDynamicPayloadLengthh>:

// Set transceiver DynamicPayloadLength feature for all the pipes
// input:
//   mode - status, one of nRF24_DPL_xx values
void nRF24_SetDynamicPayloadLength(uint8_t mode) {
 800a44a:	b580      	push	{r7, lr}
 800a44c:	b084      	sub	sp, #16
 800a44e:	af00      	add	r7, sp, #0
 800a450:	4603      	mov	r3, r0
 800a452:	71fb      	strb	r3, [r7, #7]
    uint8_t reg;
    reg  = nRF24_ReadReg(nRF24_REG_FEATURE);
 800a454:	201d      	movs	r0, #29
 800a456:	f7ff fe9f 	bl	800a198 <_ZL13nRF24_ReadRegh>
 800a45a:	4603      	mov	r3, r0
 800a45c:	73fb      	strb	r3, [r7, #15]
    if(mode) {
 800a45e:	79fb      	ldrb	r3, [r7, #7]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d00c      	beq.n	800a47e <_Z29nRF24_SetDynamicPayloadLengthh+0x34>
        nRF24_WriteReg(nRF24_REG_FEATURE, reg | nRF24_FEATURE_EN_DPL);
 800a464:	7bfb      	ldrb	r3, [r7, #15]
 800a466:	f043 0304 	orr.w	r3, r3, #4
 800a46a:	b2db      	uxtb	r3, r3
 800a46c:	4619      	mov	r1, r3
 800a46e:	201d      	movs	r0, #29
 800a470:	f7ff feac 	bl	800a1cc <_ZL14nRF24_WriteReghh>
        nRF24_WriteReg(nRF24_REG_DYNPD, 0x1F);
 800a474:	211f      	movs	r1, #31
 800a476:	201c      	movs	r0, #28
 800a478:	f7ff fea8 	bl	800a1cc <_ZL14nRF24_WriteReghh>
    } else {
        nRF24_WriteReg(nRF24_REG_FEATURE, reg &~ nRF24_FEATURE_EN_DPL);
        nRF24_WriteReg(nRF24_REG_DYNPD, 0x0);
    }
}
 800a47c:	e00b      	b.n	800a496 <_Z29nRF24_SetDynamicPayloadLengthh+0x4c>
        nRF24_WriteReg(nRF24_REG_FEATURE, reg &~ nRF24_FEATURE_EN_DPL);
 800a47e:	7bfb      	ldrb	r3, [r7, #15]
 800a480:	f023 0304 	bic.w	r3, r3, #4
 800a484:	b2db      	uxtb	r3, r3
 800a486:	4619      	mov	r1, r3
 800a488:	201d      	movs	r0, #29
 800a48a:	f7ff fe9f 	bl	800a1cc <_ZL14nRF24_WriteReghh>
        nRF24_WriteReg(nRF24_REG_DYNPD, 0x0);
 800a48e:	2100      	movs	r1, #0
 800a490:	201c      	movs	r0, #28
 800a492:	f7ff fe9b 	bl	800a1cc <_ZL14nRF24_WriteReghh>
}
 800a496:	bf00      	nop
 800a498:	3710      	adds	r7, #16
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}

0800a49e <_Z23nRF24_SetPayloadWithAckh>:

// Enables Payload With Ack. NB Refer to the datasheet for proper retransmit timing.
// input:
//   mode - status, 1 or 0
void nRF24_SetPayloadWithAck(uint8_t mode) {
 800a49e:	b580      	push	{r7, lr}
 800a4a0:	b084      	sub	sp, #16
 800a4a2:	af00      	add	r7, sp, #0
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	71fb      	strb	r3, [r7, #7]
    uint8_t reg;
    reg  = nRF24_ReadReg(nRF24_REG_FEATURE);
 800a4a8:	201d      	movs	r0, #29
 800a4aa:	f7ff fe75 	bl	800a198 <_ZL13nRF24_ReadRegh>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	73fb      	strb	r3, [r7, #15]
    if(mode) {
 800a4b2:	79fb      	ldrb	r3, [r7, #7]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d008      	beq.n	800a4ca <_Z23nRF24_SetPayloadWithAckh+0x2c>
        nRF24_WriteReg(nRF24_REG_FEATURE, reg | nRF24_FEATURE_EN_ACK_PAY);
 800a4b8:	7bfb      	ldrb	r3, [r7, #15]
 800a4ba:	f043 0302 	orr.w	r3, r3, #2
 800a4be:	b2db      	uxtb	r3, r3
 800a4c0:	4619      	mov	r1, r3
 800a4c2:	201d      	movs	r0, #29
 800a4c4:	f7ff fe82 	bl	800a1cc <_ZL14nRF24_WriteReghh>
    } else {
        nRF24_WriteReg(nRF24_REG_FEATURE, reg &~ nRF24_FEATURE_EN_ACK_PAY);
    }
}
 800a4c8:	e007      	b.n	800a4da <_Z23nRF24_SetPayloadWithAckh+0x3c>
        nRF24_WriteReg(nRF24_REG_FEATURE, reg &~ nRF24_FEATURE_EN_ACK_PAY);
 800a4ca:	7bfb      	ldrb	r3, [r7, #15]
 800a4cc:	f023 0302 	bic.w	r3, r3, #2
 800a4d0:	b2db      	uxtb	r3, r3
 800a4d2:	4619      	mov	r1, r3
 800a4d4:	201d      	movs	r0, #29
 800a4d6:	f7ff fe79 	bl	800a1cc <_ZL14nRF24_WriteReghh>
}
 800a4da:	bf00      	nop
 800a4dc:	3710      	adds	r7, #16
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}

0800a4e2 <_Z18nRF24_SetCRCSchemeh>:
// Configure transceiver CRC scheme
// input:
//   scheme - CRC scheme, one of nRF24_CRC_xx values
// note: transceiver will forcibly turn on the CRC in case if auto acknowledgment
//       enabled for at least one RX pipe
void nRF24_SetCRCScheme(uint8_t scheme) {
 800a4e2:	b580      	push	{r7, lr}
 800a4e4:	b084      	sub	sp, #16
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	71fb      	strb	r3, [r7, #7]
    uint8_t reg;

    // Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
    reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 800a4ec:	2000      	movs	r0, #0
 800a4ee:	f7ff fe53 	bl	800a198 <_ZL13nRF24_ReadRegh>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	73fb      	strb	r3, [r7, #15]
    reg &= ~nRF24_MASK_CRC;
 800a4f6:	7bfb      	ldrb	r3, [r7, #15]
 800a4f8:	f023 030c 	bic.w	r3, r3, #12
 800a4fc:	73fb      	strb	r3, [r7, #15]
    reg |= (scheme & nRF24_MASK_CRC);
 800a4fe:	79fb      	ldrb	r3, [r7, #7]
 800a500:	f003 030c 	and.w	r3, r3, #12
 800a504:	b2da      	uxtb	r2, r3
 800a506:	7bfb      	ldrb	r3, [r7, #15]
 800a508:	4313      	orrs	r3, r2
 800a50a:	73fb      	strb	r3, [r7, #15]
    nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 800a50c:	7bfb      	ldrb	r3, [r7, #15]
 800a50e:	4619      	mov	r1, r3
 800a510:	2000      	movs	r0, #0
 800a512:	f7ff fe5b 	bl	800a1cc <_ZL14nRF24_WriteReghh>
}
 800a516:	bf00      	nop
 800a518:	3710      	adds	r7, #16
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}

0800a51e <_Z18nRF24_SetRFChannelh>:
// Set frequency channel
// input:
//   channel - radio frequency channel, value from 0 to 127
// note: frequency will be (2400 + channel)MHz
// note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
void nRF24_SetRFChannel(uint8_t channel) {
 800a51e:	b580      	push	{r7, lr}
 800a520:	b082      	sub	sp, #8
 800a522:	af00      	add	r7, sp, #0
 800a524:	4603      	mov	r3, r0
 800a526:	71fb      	strb	r3, [r7, #7]
    nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 800a528:	79fb      	ldrb	r3, [r7, #7]
 800a52a:	4619      	mov	r1, r3
 800a52c:	2005      	movs	r0, #5
 800a52e:	f7ff fe4d 	bl	800a1cc <_ZL14nRF24_WriteReghh>
}
 800a532:	bf00      	nop
 800a534:	3708      	adds	r7, #8
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}

0800a53a <_Z18nRF24_SetAddrWidthh>:

// Set of address widths
// input:
//   addr_width - RX/TX address field width, value from 3 to 5
// note: this setting is common for all pipes
void nRF24_SetAddrWidth(uint8_t addr_width) {
 800a53a:	b580      	push	{r7, lr}
 800a53c:	b082      	sub	sp, #8
 800a53e:	af00      	add	r7, sp, #0
 800a540:	4603      	mov	r3, r0
 800a542:	71fb      	strb	r3, [r7, #7]
    nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 800a544:	79fb      	ldrb	r3, [r7, #7]
 800a546:	3b02      	subs	r3, #2
 800a548:	b2db      	uxtb	r3, r3
 800a54a:	4619      	mov	r1, r3
 800a54c:	2003      	movs	r0, #3
 800a54e:	f7ff fe3d 	bl	800a1cc <_ZL14nRF24_WriteReghh>
}
 800a552:	bf00      	nop
 800a554:	3708      	adds	r7, #8
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}
	...

0800a55c <_Z13nRF24_SetAddrhPKh>:
// note: buffer length must be equal to current address width of transceiver
// note: for pipes[2..5] only first byte of address will be written because
//       other bytes of address equals to pipe1
// note: for pipes[2..5] only first byte of address will be written because
//       pipes 1-5 share the four most significant address bytes
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr) {
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b084      	sub	sp, #16
 800a560:	af00      	add	r7, sp, #0
 800a562:	4603      	mov	r3, r0
 800a564:	6039      	str	r1, [r7, #0]
 800a566:	71fb      	strb	r3, [r7, #7]
    uint8_t addr_width;

    // RX_ADDR_Px register
    switch (pipe) {
 800a568:	79fb      	ldrb	r3, [r7, #7]
 800a56a:	2b06      	cmp	r3, #6
 800a56c:	d00a      	beq.n	800a584 <_Z13nRF24_SetAddrhPKh+0x28>
 800a56e:	2b06      	cmp	r3, #6
 800a570:	dc3b      	bgt.n	800a5ea <_Z13nRF24_SetAddrhPKh+0x8e>
 800a572:	2b01      	cmp	r3, #1
 800a574:	dc02      	bgt.n	800a57c <_Z13nRF24_SetAddrhPKh+0x20>
 800a576:	2b00      	cmp	r3, #0
 800a578:	da04      	bge.n	800a584 <_Z13nRF24_SetAddrhPKh+0x28>
            // Write address LSBbyte (only first byte from the addr buffer)
            nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
            break;
        default:
            // Incorrect pipe number -> do nothing
            break;
 800a57a:	e036      	b.n	800a5ea <_Z13nRF24_SetAddrhPKh+0x8e>
 800a57c:	3b02      	subs	r3, #2
    switch (pipe) {
 800a57e:	2b03      	cmp	r3, #3
 800a580:	d833      	bhi.n	800a5ea <_Z13nRF24_SetAddrhPKh+0x8e>
 800a582:	e028      	b.n	800a5d6 <_Z13nRF24_SetAddrhPKh+0x7a>
            addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 800a584:	2003      	movs	r0, #3
 800a586:	f7ff fe07 	bl	800a198 <_ZL13nRF24_ReadRegh>
 800a58a:	4603      	mov	r3, r0
 800a58c:	3301      	adds	r3, #1
 800a58e:	73fb      	strb	r3, [r7, #15]
            addr += addr_width;
 800a590:	7bfb      	ldrb	r3, [r7, #15]
 800a592:	683a      	ldr	r2, [r7, #0]
 800a594:	4413      	add	r3, r2
 800a596:	603b      	str	r3, [r7, #0]
            nRF24_CSN_L();
 800a598:	f7ff fda4 	bl	800a0e4 <_Z11nRF24_CSN_Lv>
            nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 800a59c:	79fb      	ldrb	r3, [r7, #7]
 800a59e:	4a15      	ldr	r2, [pc, #84]	; (800a5f4 <_Z13nRF24_SetAddrhPKh+0x98>)
 800a5a0:	5cd3      	ldrb	r3, [r2, r3]
 800a5a2:	f043 0320 	orr.w	r3, r3, #32
 800a5a6:	b2db      	uxtb	r3, r3
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f7ff fdbb 	bl	800a124 <_Z11nRF24_LL_RWh>
                nRF24_LL_RW(*addr--);
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	1e5a      	subs	r2, r3, #1
 800a5b2:	603a      	str	r2, [r7, #0]
 800a5b4:	781b      	ldrb	r3, [r3, #0]
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f7ff fdb4 	bl	800a124 <_Z11nRF24_LL_RWh>
            } while (addr_width--);
 800a5bc:	7bfb      	ldrb	r3, [r7, #15]
 800a5be:	1e5a      	subs	r2, r3, #1
 800a5c0:	73fa      	strb	r2, [r7, #15]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	bf14      	ite	ne
 800a5c6:	2301      	movne	r3, #1
 800a5c8:	2300      	moveq	r3, #0
 800a5ca:	b2db      	uxtb	r3, r3
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d1ee      	bne.n	800a5ae <_Z13nRF24_SetAddrhPKh+0x52>
            nRF24_CSN_H();
 800a5d0:	f7ff fd98 	bl	800a104 <_Z11nRF24_CSN_Hv>
            break;
 800a5d4:	e00a      	b.n	800a5ec <_Z13nRF24_SetAddrhPKh+0x90>
            nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 800a5d6:	79fb      	ldrb	r3, [r7, #7]
 800a5d8:	4a06      	ldr	r2, [pc, #24]	; (800a5f4 <_Z13nRF24_SetAddrhPKh+0x98>)
 800a5da:	5cd2      	ldrb	r2, [r2, r3]
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	781b      	ldrb	r3, [r3, #0]
 800a5e0:	4619      	mov	r1, r3
 800a5e2:	4610      	mov	r0, r2
 800a5e4:	f7ff fdf2 	bl	800a1cc <_ZL14nRF24_WriteReghh>
            break;
 800a5e8:	e000      	b.n	800a5ec <_Z13nRF24_SetAddrhPKh+0x90>
            break;
 800a5ea:	bf00      	nop
    }
}
 800a5ec:	bf00      	nop
 800a5ee:	3710      	adds	r7, #16
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}
 800a5f4:	0800e770 	.word	0x0800e770

0800a5f8 <_Z16nRF24_SetTXPowerh>:

// Configure RF output power in TX mode
// input:
//   tx_pwr - RF output power, one of nRF24_TXPWR_xx values
void nRF24_SetTXPower(uint8_t tx_pwr) {
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b084      	sub	sp, #16
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	4603      	mov	r3, r0
 800a600:	71fb      	strb	r3, [r7, #7]
    uint8_t reg;

    // Configure RF_PWR[2:1] bits of the RF_SETUP register
    reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 800a602:	2006      	movs	r0, #6
 800a604:	f7ff fdc8 	bl	800a198 <_ZL13nRF24_ReadRegh>
 800a608:	4603      	mov	r3, r0
 800a60a:	73fb      	strb	r3, [r7, #15]
    reg &= ~nRF24_MASK_RF_PWR;
 800a60c:	7bfb      	ldrb	r3, [r7, #15]
 800a60e:	f023 0306 	bic.w	r3, r3, #6
 800a612:	73fb      	strb	r3, [r7, #15]
    reg |= tx_pwr;
 800a614:	7bfa      	ldrb	r2, [r7, #15]
 800a616:	79fb      	ldrb	r3, [r7, #7]
 800a618:	4313      	orrs	r3, r2
 800a61a:	73fb      	strb	r3, [r7, #15]
    nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 800a61c:	7bfb      	ldrb	r3, [r7, #15]
 800a61e:	4619      	mov	r1, r3
 800a620:	2006      	movs	r0, #6
 800a622:	f7ff fdd3 	bl	800a1cc <_ZL14nRF24_WriteReghh>
}
 800a626:	bf00      	nop
 800a628:	3710      	adds	r7, #16
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}

0800a62e <_Z17nRF24_SetDataRateh>:

// Configure transceiver data rate
// input:
//   data_rate - data rate, one of nRF24_DR_xx values
void nRF24_SetDataRate(uint8_t data_rate) {
 800a62e:	b580      	push	{r7, lr}
 800a630:	b084      	sub	sp, #16
 800a632:	af00      	add	r7, sp, #0
 800a634:	4603      	mov	r3, r0
 800a636:	71fb      	strb	r3, [r7, #7]
    uint8_t reg;

    // Configure RF_DR_LOW[5] and RF_DR_HIGH[3] bits of the RF_SETUP register
    reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 800a638:	2006      	movs	r0, #6
 800a63a:	f7ff fdad 	bl	800a198 <_ZL13nRF24_ReadRegh>
 800a63e:	4603      	mov	r3, r0
 800a640:	73fb      	strb	r3, [r7, #15]
    reg &= ~nRF24_MASK_DATARATE;
 800a642:	7bfb      	ldrb	r3, [r7, #15]
 800a644:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800a648:	73fb      	strb	r3, [r7, #15]
    reg |= data_rate;
 800a64a:	7bfa      	ldrb	r2, [r7, #15]
 800a64c:	79fb      	ldrb	r3, [r7, #7]
 800a64e:	4313      	orrs	r3, r2
 800a650:	73fb      	strb	r3, [r7, #15]
    nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 800a652:	7bfb      	ldrb	r3, [r7, #15]
 800a654:	4619      	mov	r1, r3
 800a656:	2006      	movs	r0, #6
 800a658:	f7ff fdb8 	bl	800a1cc <_ZL14nRF24_WriteReghh>
}
 800a65c:	bf00      	nop
 800a65e:	3710      	adds	r7, #16
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}

0800a664 <_Z15nRF24_SetRXPipehhh>:
// Configure a specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
//   aa_state - state of auto acknowledgment, one of nRF24_AA_xx values
//   payload_len - payload length in bytes
void nRF24_SetRXPipe(uint8_t pipe, uint8_t aa_state, uint8_t payload_len) {
 800a664:	b580      	push	{r7, lr}
 800a666:	b084      	sub	sp, #16
 800a668:	af00      	add	r7, sp, #0
 800a66a:	4603      	mov	r3, r0
 800a66c:	71fb      	strb	r3, [r7, #7]
 800a66e:	460b      	mov	r3, r1
 800a670:	71bb      	strb	r3, [r7, #6]
 800a672:	4613      	mov	r3, r2
 800a674:	717b      	strb	r3, [r7, #5]
    uint8_t reg;

    // Enable the specified pipe (EN_RXADDR register)
    reg = (nRF24_ReadReg(nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 800a676:	2002      	movs	r0, #2
 800a678:	f7ff fd8e 	bl	800a198 <_ZL13nRF24_ReadRegh>
 800a67c:	4603      	mov	r3, r0
 800a67e:	b25a      	sxtb	r2, r3
 800a680:	79fb      	ldrb	r3, [r7, #7]
 800a682:	2101      	movs	r1, #1
 800a684:	fa01 f303 	lsl.w	r3, r1, r3
 800a688:	b25b      	sxtb	r3, r3
 800a68a:	4313      	orrs	r3, r2
 800a68c:	b25b      	sxtb	r3, r3
 800a68e:	b2db      	uxtb	r3, r3
 800a690:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a694:	73fb      	strb	r3, [r7, #15]
    nRF24_WriteReg(nRF24_REG_EN_RXADDR, reg);
 800a696:	7bfb      	ldrb	r3, [r7, #15]
 800a698:	4619      	mov	r1, r3
 800a69a:	2002      	movs	r0, #2
 800a69c:	f7ff fd96 	bl	800a1cc <_ZL14nRF24_WriteReghh>

    // Set RX payload length (RX_PW_Px register)
    nRF24_WriteReg(nRF24_RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 800a6a0:	79fb      	ldrb	r3, [r7, #7]
 800a6a2:	4a19      	ldr	r2, [pc, #100]	; (800a708 <_Z15nRF24_SetRXPipehhh+0xa4>)
 800a6a4:	5cd2      	ldrb	r2, [r2, r3]
 800a6a6:	797b      	ldrb	r3, [r7, #5]
 800a6a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a6ac:	b2db      	uxtb	r3, r3
 800a6ae:	4619      	mov	r1, r3
 800a6b0:	4610      	mov	r0, r2
 800a6b2:	f7ff fd8b 	bl	800a1cc <_ZL14nRF24_WriteReghh>

    // Set auto acknowledgment for a specified pipe (EN_AA register)
    reg = nRF24_ReadReg(nRF24_REG_EN_AA);
 800a6b6:	2001      	movs	r0, #1
 800a6b8:	f7ff fd6e 	bl	800a198 <_ZL13nRF24_ReadRegh>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	73fb      	strb	r3, [r7, #15]
    if (aa_state == nRF24_AA_ON) {
 800a6c0:	79bb      	ldrb	r3, [r7, #6]
 800a6c2:	2b01      	cmp	r3, #1
 800a6c4:	d10a      	bne.n	800a6dc <_Z15nRF24_SetRXPipehhh+0x78>
        reg |=  (1 << pipe);
 800a6c6:	79fb      	ldrb	r3, [r7, #7]
 800a6c8:	2201      	movs	r2, #1
 800a6ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a6ce:	b25a      	sxtb	r2, r3
 800a6d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a6d4:	4313      	orrs	r3, r2
 800a6d6:	b25b      	sxtb	r3, r3
 800a6d8:	73fb      	strb	r3, [r7, #15]
 800a6da:	e00b      	b.n	800a6f4 <_Z15nRF24_SetRXPipehhh+0x90>
    } else {
        reg &= ~(1 << pipe);
 800a6dc:	79fb      	ldrb	r3, [r7, #7]
 800a6de:	2201      	movs	r2, #1
 800a6e0:	fa02 f303 	lsl.w	r3, r2, r3
 800a6e4:	b25b      	sxtb	r3, r3
 800a6e6:	43db      	mvns	r3, r3
 800a6e8:	b25a      	sxtb	r2, r3
 800a6ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a6ee:	4013      	ands	r3, r2
 800a6f0:	b25b      	sxtb	r3, r3
 800a6f2:	73fb      	strb	r3, [r7, #15]
    }
    nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 800a6f4:	7bfb      	ldrb	r3, [r7, #15]
 800a6f6:	4619      	mov	r1, r3
 800a6f8:	2001      	movs	r0, #1
 800a6fa:	f7ff fd67 	bl	800a1cc <_ZL14nRF24_WriteReghh>
}
 800a6fe:	bf00      	nop
 800a700:	3710      	adds	r7, #16
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}
 800a706:	bf00      	nop
 800a708:	0800e768 	.word	0x0800e768

0800a70c <_Z14nRF24_EnableAAh>:
}

// Enable the auto retransmit (a.k.a. enhanced ShockBurst) for the specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
void nRF24_EnableAA(uint8_t pipe) {
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b084      	sub	sp, #16
 800a710:	af00      	add	r7, sp, #0
 800a712:	4603      	mov	r3, r0
 800a714:	71fb      	strb	r3, [r7, #7]
    uint8_t reg;

    // Set bit in EN_AA register
    reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
 800a716:	2001      	movs	r0, #1
 800a718:	f7ff fd3e 	bl	800a198 <_ZL13nRF24_ReadRegh>
 800a71c:	4603      	mov	r3, r0
 800a71e:	73fb      	strb	r3, [r7, #15]
    reg |= (1 << pipe);
 800a720:	79fb      	ldrb	r3, [r7, #7]
 800a722:	2201      	movs	r2, #1
 800a724:	fa02 f303 	lsl.w	r3, r2, r3
 800a728:	b25a      	sxtb	r2, r3
 800a72a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a72e:	4313      	orrs	r3, r2
 800a730:	b25b      	sxtb	r3, r3
 800a732:	73fb      	strb	r3, [r7, #15]
    nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 800a734:	7bfb      	ldrb	r3, [r7, #15]
 800a736:	4619      	mov	r1, r3
 800a738:	2001      	movs	r0, #1
 800a73a:	f7ff fd47 	bl	800a1cc <_ZL14nRF24_WriteReghh>
}
 800a73e:	bf00      	nop
 800a740:	3710      	adds	r7, #16
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}

0800a746 <_Z17nRF24_GetIRQFlagsv>:
    return nRF24_ReadReg(nRF24_REG_STATUS);
}

// Get pending IRQ flags
// return: current status of RX_DR, TX_DS and MAX_RT bits of the STATUS register
uint8_t nRF24_GetIRQFlags(void) {
 800a746:	b580      	push	{r7, lr}
 800a748:	af00      	add	r7, sp, #0
    return (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_STATUS_IRQ);
 800a74a:	2007      	movs	r0, #7
 800a74c:	f7ff fd24 	bl	800a198 <_ZL13nRF24_ReadRegh>
 800a750:	4603      	mov	r3, r0
 800a752:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a756:	b2db      	uxtb	r3, r3
}
 800a758:	4618      	mov	r0, r3
 800a75a:	bd80      	pop	{r7, pc}

0800a75c <_Z13nRF24_FlushTXv>:
    reg = nRF24_ReadReg(nRF24_REG_RF_CH);
    nRF24_WriteReg(nRF24_REG_RF_CH, reg);
}

// Flush the TX FIFO
void nRF24_FlushTX(void) {
 800a75c:	b580      	push	{r7, lr}
 800a75e:	af00      	add	r7, sp, #0
    nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 800a760:	21ff      	movs	r1, #255	; 0xff
 800a762:	20e1      	movs	r0, #225	; 0xe1
 800a764:	f7ff fd32 	bl	800a1cc <_ZL14nRF24_WriteReghh>
}
 800a768:	bf00      	nop
 800a76a:	bd80      	pop	{r7, pc}

0800a76c <_Z13nRF24_FlushRXv>:

// Flush the RX FIFO
void nRF24_FlushRX(void) {
 800a76c:	b580      	push	{r7, lr}
 800a76e:	af00      	add	r7, sp, #0
    nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 800a770:	21ff      	movs	r1, #255	; 0xff
 800a772:	20e2      	movs	r0, #226	; 0xe2
 800a774:	f7ff fd2a 	bl	800a1cc <_ZL14nRF24_WriteReghh>
}
 800a778:	bf00      	nop
 800a77a:	bd80      	pop	{r7, pc}

0800a77c <_Z19nRF24_ClearIRQFlagsv>:

// Clear any pending IRQ flags
void nRF24_ClearIRQFlags(void) {
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b082      	sub	sp, #8
 800a780:	af00      	add	r7, sp, #0
    uint8_t reg;

    // Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
    reg  = nRF24_ReadReg(nRF24_REG_STATUS);
 800a782:	2007      	movs	r0, #7
 800a784:	f7ff fd08 	bl	800a198 <_ZL13nRF24_ReadRegh>
 800a788:	4603      	mov	r3, r0
 800a78a:	71fb      	strb	r3, [r7, #7]
    reg |= nRF24_MASK_STATUS_IRQ;
 800a78c:	79fb      	ldrb	r3, [r7, #7]
 800a78e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800a792:	71fb      	strb	r3, [r7, #7]
    nRF24_WriteReg(nRF24_REG_STATUS, reg);
 800a794:	79fb      	ldrb	r3, [r7, #7]
 800a796:	4619      	mov	r1, r3
 800a798:	2007      	movs	r0, #7
 800a79a:	f7ff fd17 	bl	800a1cc <_ZL14nRF24_WriteReghh>
}
 800a79e:	bf00      	nop
 800a7a0:	3708      	adds	r7, #8
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}

0800a7a6 <_ZL26nRF24_GetRxDplPayloadWidthv>:
//   length - payload length in bytes
void nRF24_WritePayload(uint8_t *pBuf, uint8_t length) {
    nRF24_WriteMBReg(nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
}

static uint8_t nRF24_GetRxDplPayloadWidth() {
 800a7a6:	b580      	push	{r7, lr}
 800a7a8:	b082      	sub	sp, #8
 800a7aa:	af00      	add	r7, sp, #0
    uint8_t value;

    nRF24_CSN_L();
 800a7ac:	f7ff fc9a 	bl	800a0e4 <_Z11nRF24_CSN_Lv>
    nRF24_LL_RW(nRF24_CMD_R_RX_PL_WID);
 800a7b0:	2060      	movs	r0, #96	; 0x60
 800a7b2:	f7ff fcb7 	bl	800a124 <_Z11nRF24_LL_RWh>
    value = nRF24_LL_RW(nRF24_CMD_NOP);
 800a7b6:	20ff      	movs	r0, #255	; 0xff
 800a7b8:	f7ff fcb4 	bl	800a124 <_Z11nRF24_LL_RWh>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	71fb      	strb	r3, [r7, #7]
    nRF24_CSN_H();
 800a7c0:	f7ff fca0 	bl	800a104 <_Z11nRF24_CSN_Hv>

    return value;
 800a7c4:	79fb      	ldrb	r3, [r7, #7]

}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3708      	adds	r7, #8
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}
	...

0800a7d0 <_ZL24nRF24_ReadPayloadGenericPhS_h>:

static nRF24_RXResult nRF24_ReadPayloadGeneric(uint8_t *pBuf, uint8_t *length, uint8_t dpl) {
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b086      	sub	sp, #24
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	60f8      	str	r0, [r7, #12]
 800a7d8:	60b9      	str	r1, [r7, #8]
 800a7da:	4613      	mov	r3, r2
 800a7dc:	71fb      	strb	r3, [r7, #7]
    uint8_t pipe;

    // Extract a payload pipe number from the STATUS register
    pipe = (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 800a7de:	2007      	movs	r0, #7
 800a7e0:	f7ff fcda 	bl	800a198 <_ZL13nRF24_ReadRegh>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	085b      	lsrs	r3, r3, #1
 800a7e8:	b2db      	uxtb	r3, r3
 800a7ea:	f003 0307 	and.w	r3, r3, #7
 800a7ee:	75fb      	strb	r3, [r7, #23]

    // RX FIFO empty?
    if (pipe < 6) {
 800a7f0:	7dfb      	ldrb	r3, [r7, #23]
 800a7f2:	2b05      	cmp	r3, #5
 800a7f4:	d829      	bhi.n	800a84a <_ZL24nRF24_ReadPayloadGenericPhS_h+0x7a>
        // Get payload length
        if(dpl) {
 800a7f6:	79fb      	ldrb	r3, [r7, #7]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d00f      	beq.n	800a81c <_ZL24nRF24_ReadPayloadGenericPhS_h+0x4c>
            *length = nRF24_GetRxDplPayloadWidth();
 800a7fc:	f7ff ffd3 	bl	800a7a6 <_ZL26nRF24_GetRxDplPayloadWidthv>
 800a800:	4603      	mov	r3, r0
 800a802:	461a      	mov	r2, r3
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	701a      	strb	r2, [r3, #0]
            if(*length>32) { //broken packet
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	781b      	ldrb	r3, [r3, #0]
 800a80c:	2b20      	cmp	r3, #32
 800a80e:	d90f      	bls.n	800a830 <_ZL24nRF24_ReadPayloadGenericPhS_h+0x60>
                *length = 0;
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	2200      	movs	r2, #0
 800a814:	701a      	strb	r2, [r3, #0]
                nRF24_FlushRX();
 800a816:	f7ff ffa9 	bl	800a76c <_Z13nRF24_FlushRXv>
 800a81a:	e009      	b.n	800a830 <_ZL24nRF24_ReadPayloadGenericPhS_h+0x60>
            }
        } else {
            *length = nRF24_ReadReg(nRF24_RX_PW_PIPE[pipe]);
 800a81c:	7dfb      	ldrb	r3, [r7, #23]
 800a81e:	4a0f      	ldr	r2, [pc, #60]	; (800a85c <_ZL24nRF24_ReadPayloadGenericPhS_h+0x8c>)
 800a820:	5cd3      	ldrb	r3, [r2, r3]
 800a822:	4618      	mov	r0, r3
 800a824:	f7ff fcb8 	bl	800a198 <_ZL13nRF24_ReadRegh>
 800a828:	4603      	mov	r3, r0
 800a82a:	461a      	mov	r2, r3
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	701a      	strb	r2, [r3, #0]
        }

        // Read a payload from the RX FIFO
        if (*length) {
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	781b      	ldrb	r3, [r3, #0]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d006      	beq.n	800a846 <_ZL24nRF24_ReadPayloadGenericPhS_h+0x76>
            nRF24_ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	781b      	ldrb	r3, [r3, #0]
 800a83c:	461a      	mov	r2, r3
 800a83e:	68f9      	ldr	r1, [r7, #12]
 800a840:	2061      	movs	r0, #97	; 0x61
 800a842:	f7ff fcf9 	bl	800a238 <_ZL15nRF24_ReadMBReghPhh>
        }

        return ((nRF24_RXResult)pipe);
 800a846:	7dfb      	ldrb	r3, [r7, #23]
 800a848:	e003      	b.n	800a852 <_ZL24nRF24_ReadPayloadGenericPhS_h+0x82>
    }

    // The RX FIFO is empty
    *length = 0;
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	2200      	movs	r2, #0
 800a84e:	701a      	strb	r2, [r3, #0]

    return nRF24_RX_EMPTY;
 800a850:	23ff      	movs	r3, #255	; 0xff
}
 800a852:	4618      	mov	r0, r3
 800a854:	3718      	adds	r7, #24
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}
 800a85a:	bf00      	nop
 800a85c:	0800e768 	.word	0x0800e768

0800a860 <_Z20nRF24_ReadPayloadDplPhS_>:
//   nRF24_RX_EMPTY - the RX FIFO is empty
nRF24_RXResult nRF24_ReadPayload(uint8_t *pBuf, uint8_t *length) {
    return nRF24_ReadPayloadGeneric(pBuf, length,0);
}

nRF24_RXResult nRF24_ReadPayloadDpl(uint8_t *pBuf, uint8_t *length) {
 800a860:	b580      	push	{r7, lr}
 800a862:	b082      	sub	sp, #8
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
 800a868:	6039      	str	r1, [r7, #0]
    return nRF24_ReadPayloadGeneric(pBuf, length,1);
 800a86a:	2201      	movs	r2, #1
 800a86c:	6839      	ldr	r1, [r7, #0]
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f7ff ffae 	bl	800a7d0 <_ZL24nRF24_ReadPayloadGenericPhS_h>
 800a874:	4603      	mov	r3, r0
}
 800a876:	4618      	mov	r0, r3
 800a878:	3708      	adds	r7, #8
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}

0800a87e <_Z21nRF24_WriteAckPayload14nRF24_RXResultPhh>:
    nRF24_CSN_L();
    nRF24_LL_RW(nRF24_CMD_ACTIVATE);
    nRF24_LL_RW(0x73);
    nRF24_CSN_H();
}
void nRF24_WriteAckPayload(nRF24_RXResult pipe, uint8_t *payload, uint8_t length) {
 800a87e:	b580      	push	{r7, lr}
 800a880:	b082      	sub	sp, #8
 800a882:	af00      	add	r7, sp, #0
 800a884:	4603      	mov	r3, r0
 800a886:	6039      	str	r1, [r7, #0]
 800a888:	71fb      	strb	r3, [r7, #7]
 800a88a:	4613      	mov	r3, r2
 800a88c:	71bb      	strb	r3, [r7, #6]
    nRF24_CSN_L();
 800a88e:	f7ff fc29 	bl	800a0e4 <_Z11nRF24_CSN_Lv>
    nRF24_LL_RW(nRF24_CMD_W_ACK_PAYLOAD | pipe);
 800a892:	79fb      	ldrb	r3, [r7, #7]
 800a894:	f063 0357 	orn	r3, r3, #87	; 0x57
 800a898:	b2db      	uxtb	r3, r3
 800a89a:	4618      	mov	r0, r3
 800a89c:	f7ff fc42 	bl	800a124 <_Z11nRF24_LL_RWh>
    while (length--) {
 800a8a0:	e006      	b.n	800a8b0 <_Z21nRF24_WriteAckPayload14nRF24_RXResultPhh+0x32>
        nRF24_LL_RW(*payload++);
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	1c5a      	adds	r2, r3, #1
 800a8a6:	603a      	str	r2, [r7, #0]
 800a8a8:	781b      	ldrb	r3, [r3, #0]
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f7ff fc3a 	bl	800a124 <_Z11nRF24_LL_RWh>
    while (length--) {
 800a8b0:	79bb      	ldrb	r3, [r7, #6]
 800a8b2:	1e5a      	subs	r2, r3, #1
 800a8b4:	71ba      	strb	r2, [r7, #6]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	bf14      	ite	ne
 800a8ba:	2301      	movne	r3, #1
 800a8bc:	2300      	moveq	r3, #0
 800a8be:	b2db      	uxtb	r3, r3
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d1ee      	bne.n	800a8a2 <_Z21nRF24_WriteAckPayload14nRF24_RXResultPhh+0x24>
    }
    nRF24_CSN_H();
 800a8c4:	f7ff fc1e 	bl	800a104 <_Z11nRF24_CSN_Hv>

}
 800a8c8:	bf00      	nop
 800a8ca:	3708      	adds	r7, #8
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}

0800a8d0 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b086      	sub	sp, #24
 800a8d4:	af02      	add	r7, sp, #8
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 800a8da:	f107 020f 	add.w	r2, r7, #15
 800a8de:	1df9      	adds	r1, r7, #7
 800a8e0:	2364      	movs	r3, #100	; 0x64
 800a8e2:	9300      	str	r3, [sp, #0]
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	4804      	ldr	r0, [pc, #16]	; (800a8f8 <W25qxx_Spi+0x28>)
 800a8e8:	f7fd f87e 	bl	80079e8 <HAL_SPI_TransmitReceive>
	return ret;
 800a8ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3710      	adds	r7, #16
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}
 800a8f6:	bf00      	nop
 800a8f8:	200021c8 	.word	0x200021c8

0800a8fc <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b084      	sub	sp, #16
 800a900:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 800a902:	2300      	movs	r3, #0
 800a904:	60fb      	str	r3, [r7, #12]
 800a906:	2300      	movs	r3, #0
 800a908:	60bb      	str	r3, [r7, #8]
 800a90a:	2300      	movs	r3, #0
 800a90c:	607b      	str	r3, [r7, #4]
 800a90e:	2300      	movs	r3, #0
 800a910:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800a912:	2200      	movs	r2, #0
 800a914:	2101      	movs	r1, #1
 800a916:	4813      	ldr	r0, [pc, #76]	; (800a964 <W25qxx_ReadID+0x68>)
 800a918:	f7fb ff36 	bl	8006788 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 800a91c:	209f      	movs	r0, #159	; 0x9f
 800a91e:	f7ff ffd7 	bl	800a8d0 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800a922:	20a5      	movs	r0, #165	; 0xa5
 800a924:	f7ff ffd4 	bl	800a8d0 <W25qxx_Spi>
 800a928:	4603      	mov	r3, r0
 800a92a:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800a92c:	20a5      	movs	r0, #165	; 0xa5
 800a92e:	f7ff ffcf 	bl	800a8d0 <W25qxx_Spi>
 800a932:	4603      	mov	r3, r0
 800a934:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800a936:	20a5      	movs	r0, #165	; 0xa5
 800a938:	f7ff ffca 	bl	800a8d0 <W25qxx_Spi>
 800a93c:	4603      	mov	r3, r0
 800a93e:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800a940:	2201      	movs	r2, #1
 800a942:	2101      	movs	r1, #1
 800a944:	4807      	ldr	r0, [pc, #28]	; (800a964 <W25qxx_ReadID+0x68>)
 800a946:	f7fb ff1f 	bl	8006788 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	041a      	lsls	r2, r3, #16
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	021b      	lsls	r3, r3, #8
 800a952:	4313      	orrs	r3, r2
 800a954:	683a      	ldr	r2, [r7, #0]
 800a956:	4313      	orrs	r3, r2
 800a958:	60fb      	str	r3, [r7, #12]
	return Temp;
 800a95a:	68fb      	ldr	r3, [r7, #12]
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3710      	adds	r7, #16
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}
 800a964:	40020400 	.word	0x40020400

0800a968 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 800a968:	b590      	push	{r4, r7, lr}
 800a96a:	b083      	sub	sp, #12
 800a96c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800a96e:	2200      	movs	r2, #0
 800a970:	2101      	movs	r1, #1
 800a972:	4816      	ldr	r0, [pc, #88]	; (800a9cc <W25qxx_ReadUniqID+0x64>)
 800a974:	f7fb ff08 	bl	8006788 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 800a978:	204b      	movs	r0, #75	; 0x4b
 800a97a:	f7ff ffa9 	bl	800a8d0 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 800a97e:	2300      	movs	r3, #0
 800a980:	71fb      	strb	r3, [r7, #7]
 800a982:	e005      	b.n	800a990 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800a984:	20a5      	movs	r0, #165	; 0xa5
 800a986:	f7ff ffa3 	bl	800a8d0 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 800a98a:	79fb      	ldrb	r3, [r7, #7]
 800a98c:	3301      	adds	r3, #1
 800a98e:	71fb      	strb	r3, [r7, #7]
 800a990:	79fb      	ldrb	r3, [r7, #7]
 800a992:	2b03      	cmp	r3, #3
 800a994:	d9f6      	bls.n	800a984 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 800a996:	2300      	movs	r3, #0
 800a998:	71bb      	strb	r3, [r7, #6]
 800a99a:	e00b      	b.n	800a9b4 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800a99c:	79bc      	ldrb	r4, [r7, #6]
 800a99e:	20a5      	movs	r0, #165	; 0xa5
 800a9a0:	f7ff ff96 	bl	800a8d0 <W25qxx_Spi>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	461a      	mov	r2, r3
 800a9a8:	4b09      	ldr	r3, [pc, #36]	; (800a9d0 <W25qxx_ReadUniqID+0x68>)
 800a9aa:	4423      	add	r3, r4
 800a9ac:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 800a9ae:	79bb      	ldrb	r3, [r7, #6]
 800a9b0:	3301      	adds	r3, #1
 800a9b2:	71bb      	strb	r3, [r7, #6]
 800a9b4:	79bb      	ldrb	r3, [r7, #6]
 800a9b6:	2b07      	cmp	r3, #7
 800a9b8:	d9f0      	bls.n	800a99c <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800a9ba:	2201      	movs	r2, #1
 800a9bc:	2101      	movs	r1, #1
 800a9be:	4803      	ldr	r0, [pc, #12]	; (800a9cc <W25qxx_ReadUniqID+0x64>)
 800a9c0:	f7fb fee2 	bl	8006788 <HAL_GPIO_WritePin>
}
 800a9c4:	bf00      	nop
 800a9c6:	370c      	adds	r7, #12
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd90      	pop	{r4, r7, pc}
 800a9cc:	40020400 	.word	0x40020400
 800a9d0:	200026a4 	.word	0x200026a4

0800a9d4 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800a9d8:	2200      	movs	r2, #0
 800a9da:	2101      	movs	r1, #1
 800a9dc:	4807      	ldr	r0, [pc, #28]	; (800a9fc <W25qxx_WriteEnable+0x28>)
 800a9de:	f7fb fed3 	bl	8006788 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 800a9e2:	2006      	movs	r0, #6
 800a9e4:	f7ff ff74 	bl	800a8d0 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800a9e8:	2201      	movs	r2, #1
 800a9ea:	2101      	movs	r1, #1
 800a9ec:	4803      	ldr	r0, [pc, #12]	; (800a9fc <W25qxx_WriteEnable+0x28>)
 800a9ee:	f7fb fecb 	bl	8006788 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 800a9f2:	2001      	movs	r0, #1
 800a9f4:	f7fb fa1e 	bl	8005e34 <HAL_Delay>
}
 800a9f8:	bf00      	nop
 800a9fa:	bd80      	pop	{r7, pc}
 800a9fc:	40020400 	.word	0x40020400

0800aa00 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b084      	sub	sp, #16
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	4603      	mov	r3, r0
 800aa08:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800aa0e:	2200      	movs	r2, #0
 800aa10:	2101      	movs	r1, #1
 800aa12:	481c      	ldr	r0, [pc, #112]	; (800aa84 <W25qxx_ReadStatusRegister+0x84>)
 800aa14:	f7fb feb8 	bl	8006788 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 800aa18:	79fb      	ldrb	r3, [r7, #7]
 800aa1a:	2b01      	cmp	r3, #1
 800aa1c:	d10c      	bne.n	800aa38 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 800aa1e:	2005      	movs	r0, #5
 800aa20:	f7ff ff56 	bl	800a8d0 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800aa24:	20a5      	movs	r0, #165	; 0xa5
 800aa26:	f7ff ff53 	bl	800a8d0 <W25qxx_Spi>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 800aa2e:	4a16      	ldr	r2, [pc, #88]	; (800aa88 <W25qxx_ReadStatusRegister+0x88>)
 800aa30:	7bfb      	ldrb	r3, [r7, #15]
 800aa32:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 800aa36:	e01b      	b.n	800aa70 <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 800aa38:	79fb      	ldrb	r3, [r7, #7]
 800aa3a:	2b02      	cmp	r3, #2
 800aa3c:	d10c      	bne.n	800aa58 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 800aa3e:	2035      	movs	r0, #53	; 0x35
 800aa40:	f7ff ff46 	bl	800a8d0 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800aa44:	20a5      	movs	r0, #165	; 0xa5
 800aa46:	f7ff ff43 	bl	800a8d0 <W25qxx_Spi>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 800aa4e:	4a0e      	ldr	r2, [pc, #56]	; (800aa88 <W25qxx_ReadStatusRegister+0x88>)
 800aa50:	7bfb      	ldrb	r3, [r7, #15]
 800aa52:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 800aa56:	e00b      	b.n	800aa70 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 800aa58:	2015      	movs	r0, #21
 800aa5a:	f7ff ff39 	bl	800a8d0 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800aa5e:	20a5      	movs	r0, #165	; 0xa5
 800aa60:	f7ff ff36 	bl	800a8d0 <W25qxx_Spi>
 800aa64:	4603      	mov	r3, r0
 800aa66:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 800aa68:	4a07      	ldr	r2, [pc, #28]	; (800aa88 <W25qxx_ReadStatusRegister+0x88>)
 800aa6a:	7bfb      	ldrb	r3, [r7, #15]
 800aa6c:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800aa70:	2201      	movs	r2, #1
 800aa72:	2101      	movs	r1, #1
 800aa74:	4803      	ldr	r0, [pc, #12]	; (800aa84 <W25qxx_ReadStatusRegister+0x84>)
 800aa76:	f7fb fe87 	bl	8006788 <HAL_GPIO_WritePin>
	return status;
 800aa7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3710      	adds	r7, #16
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}
 800aa84:	40020400 	.word	0x40020400
 800aa88:	200026a4 	.word	0x200026a4

0800aa8c <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 800aa90:	2001      	movs	r0, #1
 800aa92:	f7fb f9cf 	bl	8005e34 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800aa96:	2200      	movs	r2, #0
 800aa98:	2101      	movs	r1, #1
 800aa9a:	480f      	ldr	r0, [pc, #60]	; (800aad8 <W25qxx_WaitForWriteEnd+0x4c>)
 800aa9c:	f7fb fe74 	bl	8006788 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 800aaa0:	2005      	movs	r0, #5
 800aaa2:	f7ff ff15 	bl	800a8d0 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800aaa6:	20a5      	movs	r0, #165	; 0xa5
 800aaa8:	f7ff ff12 	bl	800a8d0 <W25qxx_Spi>
 800aaac:	4603      	mov	r3, r0
 800aaae:	461a      	mov	r2, r3
 800aab0:	4b0a      	ldr	r3, [pc, #40]	; (800aadc <W25qxx_WaitForWriteEnd+0x50>)
 800aab2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 800aab6:	2001      	movs	r0, #1
 800aab8:	f7fb f9bc 	bl	8005e34 <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 800aabc:	4b07      	ldr	r3, [pc, #28]	; (800aadc <W25qxx_WaitForWriteEnd+0x50>)
 800aabe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800aac2:	f003 0301 	and.w	r3, r3, #1
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d1ed      	bne.n	800aaa6 <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800aaca:	2201      	movs	r2, #1
 800aacc:	2101      	movs	r1, #1
 800aace:	4802      	ldr	r0, [pc, #8]	; (800aad8 <W25qxx_WaitForWriteEnd+0x4c>)
 800aad0:	f7fb fe5a 	bl	8006788 <HAL_GPIO_WritePin>
}
 800aad4:	bf00      	nop
 800aad6:	bd80      	pop	{r7, pc}
 800aad8:	40020400 	.word	0x40020400
 800aadc:	200026a4 	.word	0x200026a4

0800aae0 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b082      	sub	sp, #8
 800aae4:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 800aae6:	4b65      	ldr	r3, [pc, #404]	; (800ac7c <W25qxx_Init+0x19c>)
 800aae8:	2201      	movs	r2, #1
 800aaea:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 800aaee:	e002      	b.n	800aaf6 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 800aaf0:	2001      	movs	r0, #1
 800aaf2:	f7fb f99f 	bl	8005e34 <HAL_Delay>
	while (HAL_GetTick() < 100)
 800aaf6:	f7fb f991 	bl	8005e1c <HAL_GetTick>
 800aafa:	4603      	mov	r3, r0
 800aafc:	2b63      	cmp	r3, #99	; 0x63
 800aafe:	d9f7      	bls.n	800aaf0 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800ab00:	2201      	movs	r2, #1
 800ab02:	2101      	movs	r1, #1
 800ab04:	485e      	ldr	r0, [pc, #376]	; (800ac80 <W25qxx_Init+0x1a0>)
 800ab06:	f7fb fe3f 	bl	8006788 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 800ab0a:	2064      	movs	r0, #100	; 0x64
 800ab0c:	f7fb f992 	bl	8005e34 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 800ab10:	f7ff fef4 	bl	800a8fc <W25qxx_ReadID>
 800ab14:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	b2db      	uxtb	r3, r3
 800ab1a:	3b11      	subs	r3, #17
 800ab1c:	2b0f      	cmp	r3, #15
 800ab1e:	d86c      	bhi.n	800abfa <W25qxx_Init+0x11a>
 800ab20:	a201      	add	r2, pc, #4	; (adr r2, 800ab28 <W25qxx_Init+0x48>)
 800ab22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab26:	bf00      	nop
 800ab28:	0800abed 	.word	0x0800abed
 800ab2c:	0800abdf 	.word	0x0800abdf
 800ab30:	0800abd1 	.word	0x0800abd1
 800ab34:	0800abc3 	.word	0x0800abc3
 800ab38:	0800abb5 	.word	0x0800abb5
 800ab3c:	0800aba7 	.word	0x0800aba7
 800ab40:	0800ab99 	.word	0x0800ab99
 800ab44:	0800ab89 	.word	0x0800ab89
 800ab48:	0800ab79 	.word	0x0800ab79
 800ab4c:	0800abfb 	.word	0x0800abfb
 800ab50:	0800abfb 	.word	0x0800abfb
 800ab54:	0800abfb 	.word	0x0800abfb
 800ab58:	0800abfb 	.word	0x0800abfb
 800ab5c:	0800abfb 	.word	0x0800abfb
 800ab60:	0800abfb 	.word	0x0800abfb
 800ab64:	0800ab69 	.word	0x0800ab69
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 800ab68:	4b44      	ldr	r3, [pc, #272]	; (800ac7c <W25qxx_Init+0x19c>)
 800ab6a:	220a      	movs	r2, #10
 800ab6c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 800ab6e:	4b43      	ldr	r3, [pc, #268]	; (800ac7c <W25qxx_Init+0x19c>)
 800ab70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ab74:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 800ab76:	e046      	b.n	800ac06 <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 800ab78:	4b40      	ldr	r3, [pc, #256]	; (800ac7c <W25qxx_Init+0x19c>)
 800ab7a:	2209      	movs	r2, #9
 800ab7c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 800ab7e:	4b3f      	ldr	r3, [pc, #252]	; (800ac7c <W25qxx_Init+0x19c>)
 800ab80:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab84:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 800ab86:	e03e      	b.n	800ac06 <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 800ab88:	4b3c      	ldr	r3, [pc, #240]	; (800ac7c <W25qxx_Init+0x19c>)
 800ab8a:	2208      	movs	r2, #8
 800ab8c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 800ab8e:	4b3b      	ldr	r3, [pc, #236]	; (800ac7c <W25qxx_Init+0x19c>)
 800ab90:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ab94:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 800ab96:	e036      	b.n	800ac06 <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 800ab98:	4b38      	ldr	r3, [pc, #224]	; (800ac7c <W25qxx_Init+0x19c>)
 800ab9a:	2207      	movs	r2, #7
 800ab9c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 800ab9e:	4b37      	ldr	r3, [pc, #220]	; (800ac7c <W25qxx_Init+0x19c>)
 800aba0:	2280      	movs	r2, #128	; 0x80
 800aba2:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 800aba4:	e02f      	b.n	800ac06 <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 800aba6:	4b35      	ldr	r3, [pc, #212]	; (800ac7c <W25qxx_Init+0x19c>)
 800aba8:	2206      	movs	r2, #6
 800abaa:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 800abac:	4b33      	ldr	r3, [pc, #204]	; (800ac7c <W25qxx_Init+0x19c>)
 800abae:	2240      	movs	r2, #64	; 0x40
 800abb0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 800abb2:	e028      	b.n	800ac06 <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 800abb4:	4b31      	ldr	r3, [pc, #196]	; (800ac7c <W25qxx_Init+0x19c>)
 800abb6:	2205      	movs	r2, #5
 800abb8:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 800abba:	4b30      	ldr	r3, [pc, #192]	; (800ac7c <W25qxx_Init+0x19c>)
 800abbc:	2220      	movs	r2, #32
 800abbe:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 800abc0:	e021      	b.n	800ac06 <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 800abc2:	4b2e      	ldr	r3, [pc, #184]	; (800ac7c <W25qxx_Init+0x19c>)
 800abc4:	2204      	movs	r2, #4
 800abc6:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 800abc8:	4b2c      	ldr	r3, [pc, #176]	; (800ac7c <W25qxx_Init+0x19c>)
 800abca:	2210      	movs	r2, #16
 800abcc:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 800abce:	e01a      	b.n	800ac06 <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 800abd0:	4b2a      	ldr	r3, [pc, #168]	; (800ac7c <W25qxx_Init+0x19c>)
 800abd2:	2203      	movs	r2, #3
 800abd4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 800abd6:	4b29      	ldr	r3, [pc, #164]	; (800ac7c <W25qxx_Init+0x19c>)
 800abd8:	2208      	movs	r2, #8
 800abda:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 800abdc:	e013      	b.n	800ac06 <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 800abde:	4b27      	ldr	r3, [pc, #156]	; (800ac7c <W25qxx_Init+0x19c>)
 800abe0:	2202      	movs	r2, #2
 800abe2:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 800abe4:	4b25      	ldr	r3, [pc, #148]	; (800ac7c <W25qxx_Init+0x19c>)
 800abe6:	2204      	movs	r2, #4
 800abe8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 800abea:	e00c      	b.n	800ac06 <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 800abec:	4b23      	ldr	r3, [pc, #140]	; (800ac7c <W25qxx_Init+0x19c>)
 800abee:	2201      	movs	r2, #1
 800abf0:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 800abf2:	4b22      	ldr	r3, [pc, #136]	; (800ac7c <W25qxx_Init+0x19c>)
 800abf4:	2202      	movs	r2, #2
 800abf6:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 800abf8:	e005      	b.n	800ac06 <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 800abfa:	4b20      	ldr	r3, [pc, #128]	; (800ac7c <W25qxx_Init+0x19c>)
 800abfc:	2200      	movs	r2, #0
 800abfe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 800ac02:	2300      	movs	r3, #0
 800ac04:	e036      	b.n	800ac74 <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 800ac06:	4b1d      	ldr	r3, [pc, #116]	; (800ac7c <W25qxx_Init+0x19c>)
 800ac08:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ac0c:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 800ac0e:	4b1b      	ldr	r3, [pc, #108]	; (800ac7c <W25qxx_Init+0x19c>)
 800ac10:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ac14:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 800ac16:	4b19      	ldr	r3, [pc, #100]	; (800ac7c <W25qxx_Init+0x19c>)
 800ac18:	69db      	ldr	r3, [r3, #28]
 800ac1a:	011b      	lsls	r3, r3, #4
 800ac1c:	4a17      	ldr	r2, [pc, #92]	; (800ac7c <W25qxx_Init+0x19c>)
 800ac1e:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 800ac20:	4b16      	ldr	r3, [pc, #88]	; (800ac7c <W25qxx_Init+0x19c>)
 800ac22:	695b      	ldr	r3, [r3, #20]
 800ac24:	4a15      	ldr	r2, [pc, #84]	; (800ac7c <W25qxx_Init+0x19c>)
 800ac26:	6912      	ldr	r2, [r2, #16]
 800ac28:	fb02 f303 	mul.w	r3, r2, r3
 800ac2c:	4a13      	ldr	r2, [pc, #76]	; (800ac7c <W25qxx_Init+0x19c>)
 800ac2e:	8952      	ldrh	r2, [r2, #10]
 800ac30:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac34:	4a11      	ldr	r2, [pc, #68]	; (800ac7c <W25qxx_Init+0x19c>)
 800ac36:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 800ac38:	4b10      	ldr	r3, [pc, #64]	; (800ac7c <W25qxx_Init+0x19c>)
 800ac3a:	691b      	ldr	r3, [r3, #16]
 800ac3c:	011b      	lsls	r3, r3, #4
 800ac3e:	4a0f      	ldr	r2, [pc, #60]	; (800ac7c <W25qxx_Init+0x19c>)
 800ac40:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 800ac42:	4b0e      	ldr	r3, [pc, #56]	; (800ac7c <W25qxx_Init+0x19c>)
 800ac44:	695b      	ldr	r3, [r3, #20]
 800ac46:	4a0d      	ldr	r2, [pc, #52]	; (800ac7c <W25qxx_Init+0x19c>)
 800ac48:	6912      	ldr	r2, [r2, #16]
 800ac4a:	fb02 f303 	mul.w	r3, r2, r3
 800ac4e:	0a9b      	lsrs	r3, r3, #10
 800ac50:	4a0a      	ldr	r2, [pc, #40]	; (800ac7c <W25qxx_Init+0x19c>)
 800ac52:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 800ac54:	f7ff fe88 	bl	800a968 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 800ac58:	2001      	movs	r0, #1
 800ac5a:	f7ff fed1 	bl	800aa00 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 800ac5e:	2002      	movs	r0, #2
 800ac60:	f7ff fece 	bl	800aa00 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 800ac64:	2003      	movs	r0, #3
 800ac66:	f7ff fecb 	bl	800aa00 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 800ac6a:	4b04      	ldr	r3, [pc, #16]	; (800ac7c <W25qxx_Init+0x19c>)
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 800ac72:	2301      	movs	r3, #1
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3708      	adds	r7, #8
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}
 800ac7c:	200026a4 	.word	0x200026a4
 800ac80:	40020400 	.word	0x40020400

0800ac84 <W25qxx_EraseBlock>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseBlock(uint32_t BlockAddr)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b082      	sub	sp, #8
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 800ac8c:	e002      	b.n	800ac94 <W25qxx_EraseBlock+0x10>
		W25qxx_Delay(1);
 800ac8e:	2001      	movs	r0, #1
 800ac90:	f7fb f8d0 	bl	8005e34 <HAL_Delay>
	while (w25qxx.Lock == 1)
 800ac94:	4b26      	ldr	r3, [pc, #152]	; (800ad30 <W25qxx_EraseBlock+0xac>)
 800ac96:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800ac9a:	2b01      	cmp	r3, #1
 800ac9c:	d0f7      	beq.n	800ac8e <W25qxx_EraseBlock+0xa>
	w25qxx.Lock = 1;
 800ac9e:	4b24      	ldr	r3, [pc, #144]	; (800ad30 <W25qxx_EraseBlock+0xac>)
 800aca0:	2201      	movs	r2, #1
 800aca2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseBlock %d Begin...\r\n", BlockAddr);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 800aca6:	f7ff fef1 	bl	800aa8c <W25qxx_WaitForWriteEnd>
	BlockAddr = BlockAddr * w25qxx.SectorSize * 16;
 800acaa:	4b21      	ldr	r3, [pc, #132]	; (800ad30 <W25qxx_EraseBlock+0xac>)
 800acac:	691b      	ldr	r3, [r3, #16]
 800acae:	687a      	ldr	r2, [r7, #4]
 800acb0:	fb02 f303 	mul.w	r3, r2, r3
 800acb4:	011b      	lsls	r3, r3, #4
 800acb6:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 800acb8:	f7ff fe8c 	bl	800a9d4 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800acbc:	2200      	movs	r2, #0
 800acbe:	2101      	movs	r1, #1
 800acc0:	481c      	ldr	r0, [pc, #112]	; (800ad34 <W25qxx_EraseBlock+0xb0>)
 800acc2:	f7fb fd61 	bl	8006788 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 800acc6:	4b1a      	ldr	r3, [pc, #104]	; (800ad30 <W25qxx_EraseBlock+0xac>)
 800acc8:	781b      	ldrb	r3, [r3, #0]
 800acca:	2b08      	cmp	r3, #8
 800accc:	d909      	bls.n	800ace2 <W25qxx_EraseBlock+0x5e>
	{
		W25qxx_Spi(0xDC);
 800acce:	20dc      	movs	r0, #220	; 0xdc
 800acd0:	f7ff fdfe 	bl	800a8d0 <W25qxx_Spi>
		W25qxx_Spi((BlockAddr & 0xFF000000) >> 24);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	0e1b      	lsrs	r3, r3, #24
 800acd8:	b2db      	uxtb	r3, r3
 800acda:	4618      	mov	r0, r3
 800acdc:	f7ff fdf8 	bl	800a8d0 <W25qxx_Spi>
 800ace0:	e002      	b.n	800ace8 <W25qxx_EraseBlock+0x64>
	}
	else
	{
		W25qxx_Spi(0xD8);
 800ace2:	20d8      	movs	r0, #216	; 0xd8
 800ace4:	f7ff fdf4 	bl	800a8d0 <W25qxx_Spi>
	}
	W25qxx_Spi((BlockAddr & 0xFF0000) >> 16);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	0c1b      	lsrs	r3, r3, #16
 800acec:	b2db      	uxtb	r3, r3
 800acee:	4618      	mov	r0, r3
 800acf0:	f7ff fdee 	bl	800a8d0 <W25qxx_Spi>
	W25qxx_Spi((BlockAddr & 0xFF00) >> 8);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	0a1b      	lsrs	r3, r3, #8
 800acf8:	b2db      	uxtb	r3, r3
 800acfa:	4618      	mov	r0, r3
 800acfc:	f7ff fde8 	bl	800a8d0 <W25qxx_Spi>
	W25qxx_Spi(BlockAddr & 0xFF);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	b2db      	uxtb	r3, r3
 800ad04:	4618      	mov	r0, r3
 800ad06:	f7ff fde3 	bl	800a8d0 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	2101      	movs	r1, #1
 800ad0e:	4809      	ldr	r0, [pc, #36]	; (800ad34 <W25qxx_EraseBlock+0xb0>)
 800ad10:	f7fb fd3a 	bl	8006788 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 800ad14:	f7ff feba 	bl	800aa8c <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseBlock done after %d ms\r\n", HAL_GetTick() - StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 800ad18:	2001      	movs	r0, #1
 800ad1a:	f7fb f88b 	bl	8005e34 <HAL_Delay>
	w25qxx.Lock = 0;
 800ad1e:	4b04      	ldr	r3, [pc, #16]	; (800ad30 <W25qxx_EraseBlock+0xac>)
 800ad20:	2200      	movs	r2, #0
 800ad22:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800ad26:	bf00      	nop
 800ad28:	3708      	adds	r7, #8
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
 800ad2e:	bf00      	nop
 800ad30:	200026a4 	.word	0x200026a4
 800ad34:	40020400 	.word	0x40020400

0800ad38 <W25qxx_BlockToPage>:
{
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
}
//###################################################################################################################
uint32_t W25qxx_BlockToPage(uint32_t BlockAddress)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b083      	sub	sp, #12
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
	return (BlockAddress * w25qxx.BlockSize) / w25qxx.PageSize;
 800ad40:	4b07      	ldr	r3, [pc, #28]	; (800ad60 <W25qxx_BlockToPage+0x28>)
 800ad42:	699b      	ldr	r3, [r3, #24]
 800ad44:	687a      	ldr	r2, [r7, #4]
 800ad46:	fb02 f303 	mul.w	r3, r2, r3
 800ad4a:	4a05      	ldr	r2, [pc, #20]	; (800ad60 <W25qxx_BlockToPage+0x28>)
 800ad4c:	8952      	ldrh	r2, [r2, #10]
 800ad4e:	fbb3 f3f2 	udiv	r3, r3, r2
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	370c      	adds	r7, #12
 800ad56:	46bd      	mov	sp, r7
 800ad58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5c:	4770      	bx	lr
 800ad5e:	bf00      	nop
 800ad60:	200026a4 	.word	0x200026a4

0800ad64 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b084      	sub	sp, #16
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	60f8      	str	r0, [r7, #12]
 800ad6c:	60b9      	str	r1, [r7, #8]
 800ad6e:	607a      	str	r2, [r7, #4]
 800ad70:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 800ad72:	e002      	b.n	800ad7a <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 800ad74:	2001      	movs	r0, #1
 800ad76:	f7fb f85d 	bl	8005e34 <HAL_Delay>
	while (w25qxx.Lock == 1)
 800ad7a:	4b39      	ldr	r3, [pc, #228]	; (800ae60 <W25qxx_WritePage+0xfc>)
 800ad7c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800ad80:	2b01      	cmp	r3, #1
 800ad82:	d0f7      	beq.n	800ad74 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 800ad84:	4b36      	ldr	r3, [pc, #216]	; (800ae60 <W25qxx_WritePage+0xfc>)
 800ad86:	2201      	movs	r2, #1
 800ad88:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 800ad8c:	683a      	ldr	r2, [r7, #0]
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	4413      	add	r3, r2
 800ad92:	4a33      	ldr	r2, [pc, #204]	; (800ae60 <W25qxx_WritePage+0xfc>)
 800ad94:	8952      	ldrh	r2, [r2, #10]
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d802      	bhi.n	800ada0 <W25qxx_WritePage+0x3c>
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d105      	bne.n	800adac <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800ada0:	4b2f      	ldr	r3, [pc, #188]	; (800ae60 <W25qxx_WritePage+0xfc>)
 800ada2:	895b      	ldrh	r3, [r3, #10]
 800ada4:	461a      	mov	r2, r3
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	1ad3      	subs	r3, r2, r3
 800adaa:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 800adac:	687a      	ldr	r2, [r7, #4]
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	4413      	add	r3, r2
 800adb2:	4a2b      	ldr	r2, [pc, #172]	; (800ae60 <W25qxx_WritePage+0xfc>)
 800adb4:	8952      	ldrh	r2, [r2, #10]
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d905      	bls.n	800adc6 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800adba:	4b29      	ldr	r3, [pc, #164]	; (800ae60 <W25qxx_WritePage+0xfc>)
 800adbc:	895b      	ldrh	r3, [r3, #10]
 800adbe:	461a      	mov	r2, r3
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	1ad3      	subs	r3, r2, r3
 800adc4:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 800adc6:	f7ff fe61 	bl	800aa8c <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 800adca:	f7ff fe03 	bl	800a9d4 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800adce:	2200      	movs	r2, #0
 800add0:	2101      	movs	r1, #1
 800add2:	4824      	ldr	r0, [pc, #144]	; (800ae64 <W25qxx_WritePage+0x100>)
 800add4:	f7fb fcd8 	bl	8006788 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 800add8:	4b21      	ldr	r3, [pc, #132]	; (800ae60 <W25qxx_WritePage+0xfc>)
 800adda:	895b      	ldrh	r3, [r3, #10]
 800addc:	461a      	mov	r2, r3
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	fb02 f303 	mul.w	r3, r2, r3
 800ade4:	687a      	ldr	r2, [r7, #4]
 800ade6:	4413      	add	r3, r2
 800ade8:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 800adea:	4b1d      	ldr	r3, [pc, #116]	; (800ae60 <W25qxx_WritePage+0xfc>)
 800adec:	781b      	ldrb	r3, [r3, #0]
 800adee:	2b08      	cmp	r3, #8
 800adf0:	d909      	bls.n	800ae06 <W25qxx_WritePage+0xa2>
	{
		W25qxx_Spi(0x12);
 800adf2:	2012      	movs	r0, #18
 800adf4:	f7ff fd6c 	bl	800a8d0 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	0e1b      	lsrs	r3, r3, #24
 800adfc:	b2db      	uxtb	r3, r3
 800adfe:	4618      	mov	r0, r3
 800ae00:	f7ff fd66 	bl	800a8d0 <W25qxx_Spi>
 800ae04:	e002      	b.n	800ae0c <W25qxx_WritePage+0xa8>
	}
	else
	{
		W25qxx_Spi(0x02);
 800ae06:	2002      	movs	r0, #2
 800ae08:	f7ff fd62 	bl	800a8d0 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	0c1b      	lsrs	r3, r3, #16
 800ae10:	b2db      	uxtb	r3, r3
 800ae12:	4618      	mov	r0, r3
 800ae14:	f7ff fd5c 	bl	800a8d0 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	0a1b      	lsrs	r3, r3, #8
 800ae1c:	b2db      	uxtb	r3, r3
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f7ff fd56 	bl	800a8d0 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	b2db      	uxtb	r3, r3
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f7ff fd51 	bl	800a8d0 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	b29a      	uxth	r2, r3
 800ae32:	2364      	movs	r3, #100	; 0x64
 800ae34:	68f9      	ldr	r1, [r7, #12]
 800ae36:	480c      	ldr	r0, [pc, #48]	; (800ae68 <W25qxx_WritePage+0x104>)
 800ae38:	f7fc fb89 	bl	800754e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800ae3c:	2201      	movs	r2, #1
 800ae3e:	2101      	movs	r1, #1
 800ae40:	4808      	ldr	r0, [pc, #32]	; (800ae64 <W25qxx_WritePage+0x100>)
 800ae42:	f7fb fca1 	bl	8006788 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 800ae46:	f7ff fe21 	bl	800aa8c <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 800ae4a:	2001      	movs	r0, #1
 800ae4c:	f7fa fff2 	bl	8005e34 <HAL_Delay>
	w25qxx.Lock = 0;
 800ae50:	4b03      	ldr	r3, [pc, #12]	; (800ae60 <W25qxx_WritePage+0xfc>)
 800ae52:	2200      	movs	r2, #0
 800ae54:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800ae58:	bf00      	nop
 800ae5a:	3710      	adds	r7, #16
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}
 800ae60:	200026a4 	.word	0x200026a4
 800ae64:	40020400 	.word	0x40020400
 800ae68:	200021c8 	.word	0x200021c8

0800ae6c <W25qxx_WriteBlock>:
	W25qxx_Delay(100);
#endif
}
//###################################################################################################################
void W25qxx_WriteBlock(uint8_t *pBuffer, uint32_t Block_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_BlockSize)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b088      	sub	sp, #32
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	60f8      	str	r0, [r7, #12]
 800ae74:	60b9      	str	r1, [r7, #8]
 800ae76:	607a      	str	r2, [r7, #4]
 800ae78:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_BlockSize > w25qxx.BlockSize) || (NumByteToWrite_up_to_BlockSize == 0))
 800ae7a:	4b2c      	ldr	r3, [pc, #176]	; (800af2c <W25qxx_WriteBlock+0xc0>)
 800ae7c:	699b      	ldr	r3, [r3, #24]
 800ae7e:	683a      	ldr	r2, [r7, #0]
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d802      	bhi.n	800ae8a <W25qxx_WriteBlock+0x1e>
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d102      	bne.n	800ae90 <W25qxx_WriteBlock+0x24>
		NumByteToWrite_up_to_BlockSize = w25qxx.BlockSize;
 800ae8a:	4b28      	ldr	r3, [pc, #160]	; (800af2c <W25qxx_WriteBlock+0xc0>)
 800ae8c:	699b      	ldr	r3, [r3, #24]
 800ae8e:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteBlock:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Block_Address, OffsetInByte, NumByteToWrite_up_to_BlockSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.BlockSize)
 800ae90:	4b26      	ldr	r3, [pc, #152]	; (800af2c <W25qxx_WriteBlock+0xc0>)
 800ae92:	699b      	ldr	r3, [r3, #24]
 800ae94:	687a      	ldr	r2, [r7, #4]
 800ae96:	429a      	cmp	r2, r3
 800ae98:	d243      	bcs.n	800af22 <W25qxx_WriteBlock+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_BlockSize) > w25qxx.BlockSize)
 800ae9a:	687a      	ldr	r2, [r7, #4]
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	441a      	add	r2, r3
 800aea0:	4b22      	ldr	r3, [pc, #136]	; (800af2c <W25qxx_WriteBlock+0xc0>)
 800aea2:	699b      	ldr	r3, [r3, #24]
 800aea4:	429a      	cmp	r2, r3
 800aea6:	d905      	bls.n	800aeb4 <W25qxx_WriteBlock+0x48>
		BytesToWrite = w25qxx.BlockSize - OffsetInByte;
 800aea8:	4b20      	ldr	r3, [pc, #128]	; (800af2c <W25qxx_WriteBlock+0xc0>)
 800aeaa:	699a      	ldr	r2, [r3, #24]
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	1ad3      	subs	r3, r2, r3
 800aeb0:	61bb      	str	r3, [r7, #24]
 800aeb2:	e001      	b.n	800aeb8 <W25qxx_WriteBlock+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_BlockSize;
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_BlockToPage(Block_Address) + (OffsetInByte / w25qxx.PageSize);
 800aeb8:	68b8      	ldr	r0, [r7, #8]
 800aeba:	f7ff ff3d 	bl	800ad38 <W25qxx_BlockToPage>
 800aebe:	4602      	mov	r2, r0
 800aec0:	4b1a      	ldr	r3, [pc, #104]	; (800af2c <W25qxx_WriteBlock+0xc0>)
 800aec2:	895b      	ldrh	r3, [r3, #10]
 800aec4:	4619      	mov	r1, r3
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	fbb3 f3f1 	udiv	r3, r3, r1
 800aecc:	4413      	add	r3, r2
 800aece:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 800aed0:	4b16      	ldr	r3, [pc, #88]	; (800af2c <W25qxx_WriteBlock+0xc0>)
 800aed2:	895b      	ldrh	r3, [r3, #10]
 800aed4:	461a      	mov	r2, r3
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	fbb3 f1f2 	udiv	r1, r3, r2
 800aedc:	fb01 f202 	mul.w	r2, r1, r2
 800aee0:	1a9b      	subs	r3, r3, r2
 800aee2:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 800aee4:	69bb      	ldr	r3, [r7, #24]
 800aee6:	697a      	ldr	r2, [r7, #20]
 800aee8:	69f9      	ldr	r1, [r7, #28]
 800aeea:	68f8      	ldr	r0, [r7, #12]
 800aeec:	f7ff ff3a 	bl	800ad64 <W25qxx_WritePage>
		StartPage++;
 800aef0:	69fb      	ldr	r3, [r7, #28]
 800aef2:	3301      	adds	r3, #1
 800aef4:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 800aef6:	4b0d      	ldr	r3, [pc, #52]	; (800af2c <W25qxx_WriteBlock+0xc0>)
 800aef8:	895b      	ldrh	r3, [r3, #10]
 800aefa:	461a      	mov	r2, r3
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	1a9a      	subs	r2, r3, r2
 800af00:	69bb      	ldr	r3, [r7, #24]
 800af02:	4413      	add	r3, r2
 800af04:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 800af06:	4b09      	ldr	r3, [pc, #36]	; (800af2c <W25qxx_WriteBlock+0xc0>)
 800af08:	895b      	ldrh	r3, [r3, #10]
 800af0a:	461a      	mov	r2, r3
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	1ad3      	subs	r3, r2, r3
 800af10:	68fa      	ldr	r2, [r7, #12]
 800af12:	4413      	add	r3, r2
 800af14:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 800af16:	2300      	movs	r3, #0
 800af18:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 800af1a:	69bb      	ldr	r3, [r7, #24]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	dce1      	bgt.n	800aee4 <W25qxx_WriteBlock+0x78>
 800af20:	e000      	b.n	800af24 <W25qxx_WriteBlock+0xb8>
		return;
 800af22:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteBlock Done\r\n");
	W25qxx_Delay(100);
#endif
}
 800af24:	3720      	adds	r7, #32
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}
 800af2a:	bf00      	nop
 800af2c:	200026a4 	.word	0x200026a4

0800af30 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b084      	sub	sp, #16
 800af34:	af00      	add	r7, sp, #0
 800af36:	60f8      	str	r0, [r7, #12]
 800af38:	60b9      	str	r1, [r7, #8]
 800af3a:	607a      	str	r2, [r7, #4]
 800af3c:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 800af3e:	e002      	b.n	800af46 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 800af40:	2001      	movs	r0, #1
 800af42:	f7fa ff77 	bl	8005e34 <HAL_Delay>
	while (w25qxx.Lock == 1)
 800af46:	4b36      	ldr	r3, [pc, #216]	; (800b020 <W25qxx_ReadPage+0xf0>)
 800af48:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800af4c:	2b01      	cmp	r3, #1
 800af4e:	d0f7      	beq.n	800af40 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 800af50:	4b33      	ldr	r3, [pc, #204]	; (800b020 <W25qxx_ReadPage+0xf0>)
 800af52:	2201      	movs	r2, #1
 800af54:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 800af58:	4b31      	ldr	r3, [pc, #196]	; (800b020 <W25qxx_ReadPage+0xf0>)
 800af5a:	895b      	ldrh	r3, [r3, #10]
 800af5c:	461a      	mov	r2, r3
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	4293      	cmp	r3, r2
 800af62:	d802      	bhi.n	800af6a <W25qxx_ReadPage+0x3a>
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d102      	bne.n	800af70 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 800af6a:	4b2d      	ldr	r3, [pc, #180]	; (800b020 <W25qxx_ReadPage+0xf0>)
 800af6c:	895b      	ldrh	r3, [r3, #10]
 800af6e:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 800af70:	687a      	ldr	r2, [r7, #4]
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	4413      	add	r3, r2
 800af76:	4a2a      	ldr	r2, [pc, #168]	; (800b020 <W25qxx_ReadPage+0xf0>)
 800af78:	8952      	ldrh	r2, [r2, #10]
 800af7a:	4293      	cmp	r3, r2
 800af7c:	d905      	bls.n	800af8a <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800af7e:	4b28      	ldr	r3, [pc, #160]	; (800b020 <W25qxx_ReadPage+0xf0>)
 800af80:	895b      	ldrh	r3, [r3, #10]
 800af82:	461a      	mov	r2, r3
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	1ad3      	subs	r3, r2, r3
 800af88:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 800af8a:	4b25      	ldr	r3, [pc, #148]	; (800b020 <W25qxx_ReadPage+0xf0>)
 800af8c:	895b      	ldrh	r3, [r3, #10]
 800af8e:	461a      	mov	r2, r3
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	fb02 f303 	mul.w	r3, r2, r3
 800af96:	687a      	ldr	r2, [r7, #4]
 800af98:	4413      	add	r3, r2
 800af9a:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800af9c:	2200      	movs	r2, #0
 800af9e:	2101      	movs	r1, #1
 800afa0:	4820      	ldr	r0, [pc, #128]	; (800b024 <W25qxx_ReadPage+0xf4>)
 800afa2:	f7fb fbf1 	bl	8006788 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 800afa6:	4b1e      	ldr	r3, [pc, #120]	; (800b020 <W25qxx_ReadPage+0xf0>)
 800afa8:	781b      	ldrb	r3, [r3, #0]
 800afaa:	2b08      	cmp	r3, #8
 800afac:	d909      	bls.n	800afc2 <W25qxx_ReadPage+0x92>
	{
		W25qxx_Spi(0x0C);
 800afae:	200c      	movs	r0, #12
 800afb0:	f7ff fc8e 	bl	800a8d0 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	0e1b      	lsrs	r3, r3, #24
 800afb8:	b2db      	uxtb	r3, r3
 800afba:	4618      	mov	r0, r3
 800afbc:	f7ff fc88 	bl	800a8d0 <W25qxx_Spi>
 800afc0:	e002      	b.n	800afc8 <W25qxx_ReadPage+0x98>
	}
	else
	{
		W25qxx_Spi(0x0B);
 800afc2:	200b      	movs	r0, #11
 800afc4:	f7ff fc84 	bl	800a8d0 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	0c1b      	lsrs	r3, r3, #16
 800afcc:	b2db      	uxtb	r3, r3
 800afce:	4618      	mov	r0, r3
 800afd0:	f7ff fc7e 	bl	800a8d0 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	0a1b      	lsrs	r3, r3, #8
 800afd8:	b2db      	uxtb	r3, r3
 800afda:	4618      	mov	r0, r3
 800afdc:	f7ff fc78 	bl	800a8d0 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 800afe0:	68bb      	ldr	r3, [r7, #8]
 800afe2:	b2db      	uxtb	r3, r3
 800afe4:	4618      	mov	r0, r3
 800afe6:	f7ff fc73 	bl	800a8d0 <W25qxx_Spi>
	W25qxx_Spi(0);
 800afea:	2000      	movs	r0, #0
 800afec:	f7ff fc70 	bl	800a8d0 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	b29a      	uxth	r2, r3
 800aff4:	2364      	movs	r3, #100	; 0x64
 800aff6:	68f9      	ldr	r1, [r7, #12]
 800aff8:	480b      	ldr	r0, [pc, #44]	; (800b028 <W25qxx_ReadPage+0xf8>)
 800affa:	f7fc fbe4 	bl	80077c6 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800affe:	2201      	movs	r2, #1
 800b000:	2101      	movs	r1, #1
 800b002:	4808      	ldr	r0, [pc, #32]	; (800b024 <W25qxx_ReadPage+0xf4>)
 800b004:	f7fb fbc0 	bl	8006788 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 800b008:	2001      	movs	r0, #1
 800b00a:	f7fa ff13 	bl	8005e34 <HAL_Delay>
	w25qxx.Lock = 0;
 800b00e:	4b04      	ldr	r3, [pc, #16]	; (800b020 <W25qxx_ReadPage+0xf0>)
 800b010:	2200      	movs	r2, #0
 800b012:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800b016:	bf00      	nop
 800b018:	3710      	adds	r7, #16
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}
 800b01e:	bf00      	nop
 800b020:	200026a4 	.word	0x200026a4
 800b024:	40020400 	.word	0x40020400
 800b028:	200021c8 	.word	0x200021c8

0800b02c <W25qxx_ReadBlock>:
	W25qxx_Delay(100);
#endif
}
//###################################################################################################################
void W25qxx_ReadBlock(uint8_t *pBuffer, uint32_t Block_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_BlockSize)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b088      	sub	sp, #32
 800b030:	af00      	add	r7, sp, #0
 800b032:	60f8      	str	r0, [r7, #12]
 800b034:	60b9      	str	r1, [r7, #8]
 800b036:	607a      	str	r2, [r7, #4]
 800b038:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_BlockSize > w25qxx.BlockSize) || (NumByteToRead_up_to_BlockSize == 0))
 800b03a:	4b2c      	ldr	r3, [pc, #176]	; (800b0ec <W25qxx_ReadBlock+0xc0>)
 800b03c:	699b      	ldr	r3, [r3, #24]
 800b03e:	683a      	ldr	r2, [r7, #0]
 800b040:	429a      	cmp	r2, r3
 800b042:	d802      	bhi.n	800b04a <W25qxx_ReadBlock+0x1e>
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d102      	bne.n	800b050 <W25qxx_ReadBlock+0x24>
		NumByteToRead_up_to_BlockSize = w25qxx.BlockSize;
 800b04a:	4b28      	ldr	r3, [pc, #160]	; (800b0ec <W25qxx_ReadBlock+0xc0>)
 800b04c:	699b      	ldr	r3, [r3, #24]
 800b04e:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadBlock:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Block_Address, OffsetInByte, NumByteToRead_up_to_BlockSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.BlockSize)
 800b050:	4b26      	ldr	r3, [pc, #152]	; (800b0ec <W25qxx_ReadBlock+0xc0>)
 800b052:	699b      	ldr	r3, [r3, #24]
 800b054:	687a      	ldr	r2, [r7, #4]
 800b056:	429a      	cmp	r2, r3
 800b058:	d243      	bcs.n	800b0e2 <W25qxx_ReadBlock+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_BlockSize) > w25qxx.BlockSize)
 800b05a:	687a      	ldr	r2, [r7, #4]
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	441a      	add	r2, r3
 800b060:	4b22      	ldr	r3, [pc, #136]	; (800b0ec <W25qxx_ReadBlock+0xc0>)
 800b062:	699b      	ldr	r3, [r3, #24]
 800b064:	429a      	cmp	r2, r3
 800b066:	d905      	bls.n	800b074 <W25qxx_ReadBlock+0x48>
		BytesToRead = w25qxx.BlockSize - OffsetInByte;
 800b068:	4b20      	ldr	r3, [pc, #128]	; (800b0ec <W25qxx_ReadBlock+0xc0>)
 800b06a:	699a      	ldr	r2, [r3, #24]
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	1ad3      	subs	r3, r2, r3
 800b070:	61bb      	str	r3, [r7, #24]
 800b072:	e001      	b.n	800b078 <W25qxx_ReadBlock+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_BlockSize;
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_BlockToPage(Block_Address) + (OffsetInByte / w25qxx.PageSize);
 800b078:	68b8      	ldr	r0, [r7, #8]
 800b07a:	f7ff fe5d 	bl	800ad38 <W25qxx_BlockToPage>
 800b07e:	4602      	mov	r2, r0
 800b080:	4b1a      	ldr	r3, [pc, #104]	; (800b0ec <W25qxx_ReadBlock+0xc0>)
 800b082:	895b      	ldrh	r3, [r3, #10]
 800b084:	4619      	mov	r1, r3
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	fbb3 f3f1 	udiv	r3, r3, r1
 800b08c:	4413      	add	r3, r2
 800b08e:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 800b090:	4b16      	ldr	r3, [pc, #88]	; (800b0ec <W25qxx_ReadBlock+0xc0>)
 800b092:	895b      	ldrh	r3, [r3, #10]
 800b094:	461a      	mov	r2, r3
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	fbb3 f1f2 	udiv	r1, r3, r2
 800b09c:	fb01 f202 	mul.w	r2, r1, r2
 800b0a0:	1a9b      	subs	r3, r3, r2
 800b0a2:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 800b0a4:	69bb      	ldr	r3, [r7, #24]
 800b0a6:	697a      	ldr	r2, [r7, #20]
 800b0a8:	69f9      	ldr	r1, [r7, #28]
 800b0aa:	68f8      	ldr	r0, [r7, #12]
 800b0ac:	f7ff ff40 	bl	800af30 <W25qxx_ReadPage>
		StartPage++;
 800b0b0:	69fb      	ldr	r3, [r7, #28]
 800b0b2:	3301      	adds	r3, #1
 800b0b4:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 800b0b6:	4b0d      	ldr	r3, [pc, #52]	; (800b0ec <W25qxx_ReadBlock+0xc0>)
 800b0b8:	895b      	ldrh	r3, [r3, #10]
 800b0ba:	461a      	mov	r2, r3
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	1a9a      	subs	r2, r3, r2
 800b0c0:	69bb      	ldr	r3, [r7, #24]
 800b0c2:	4413      	add	r3, r2
 800b0c4:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 800b0c6:	4b09      	ldr	r3, [pc, #36]	; (800b0ec <W25qxx_ReadBlock+0xc0>)
 800b0c8:	895b      	ldrh	r3, [r3, #10]
 800b0ca:	461a      	mov	r2, r3
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	1ad3      	subs	r3, r2, r3
 800b0d0:	68fa      	ldr	r2, [r7, #12]
 800b0d2:	4413      	add	r3, r2
 800b0d4:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 800b0da:	69bb      	ldr	r3, [r7, #24]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	dce1      	bgt.n	800b0a4 <W25qxx_ReadBlock+0x78>
 800b0e0:	e000      	b.n	800b0e4 <W25qxx_ReadBlock+0xb8>
		return;
 800b0e2:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadBlock Done\r\n");
	W25qxx_Delay(100);
#endif
}
 800b0e4:	3720      	adds	r7, #32
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}
 800b0ea:	bf00      	nop
 800b0ec:	200026a4 	.word	0x200026a4

0800b0f0 <_ZdlPvj>:
 800b0f0:	f000 b81a 	b.w	800b128 <_ZdlPv>

0800b0f4 <_Znwj>:
 800b0f4:	2801      	cmp	r0, #1
 800b0f6:	bf38      	it	cc
 800b0f8:	2001      	movcc	r0, #1
 800b0fa:	b510      	push	{r4, lr}
 800b0fc:	4604      	mov	r4, r0
 800b0fe:	4620      	mov	r0, r4
 800b100:	f000 f824 	bl	800b14c <malloc>
 800b104:	b100      	cbz	r0, 800b108 <_Znwj+0x14>
 800b106:	bd10      	pop	{r4, pc}
 800b108:	f000 f810 	bl	800b12c <_ZSt15get_new_handlerv>
 800b10c:	b908      	cbnz	r0, 800b112 <_Znwj+0x1e>
 800b10e:	f000 f815 	bl	800b13c <abort>
 800b112:	4780      	blx	r0
 800b114:	e7f3      	b.n	800b0fe <_Znwj+0xa>

0800b116 <_ZSt17__throw_bad_allocv>:
 800b116:	b508      	push	{r3, lr}
 800b118:	f000 f810 	bl	800b13c <abort>

0800b11c <_ZSt28__throw_bad_array_new_lengthv>:
 800b11c:	b508      	push	{r3, lr}
 800b11e:	f000 f80d 	bl	800b13c <abort>

0800b122 <_ZSt20__throw_length_errorPKc>:
 800b122:	b508      	push	{r3, lr}
 800b124:	f000 f80a 	bl	800b13c <abort>

0800b128 <_ZdlPv>:
 800b128:	f000 b818 	b.w	800b15c <free>

0800b12c <_ZSt15get_new_handlerv>:
 800b12c:	4b02      	ldr	r3, [pc, #8]	; (800b138 <_ZSt15get_new_handlerv+0xc>)
 800b12e:	6818      	ldr	r0, [r3, #0]
 800b130:	f3bf 8f5b 	dmb	ish
 800b134:	4770      	bx	lr
 800b136:	bf00      	nop
 800b138:	200026cc 	.word	0x200026cc

0800b13c <abort>:
 800b13c:	b508      	push	{r3, lr}
 800b13e:	2006      	movs	r0, #6
 800b140:	f000 ff86 	bl	800c050 <raise>
 800b144:	2001      	movs	r0, #1
 800b146:	f002 ff19 	bl	800df7c <_exit>
	...

0800b14c <malloc>:
 800b14c:	4b02      	ldr	r3, [pc, #8]	; (800b158 <malloc+0xc>)
 800b14e:	4601      	mov	r1, r0
 800b150:	6818      	ldr	r0, [r3, #0]
 800b152:	f000 b82b 	b.w	800b1ac <_malloc_r>
 800b156:	bf00      	nop
 800b158:	20000070 	.word	0x20000070

0800b15c <free>:
 800b15c:	4b02      	ldr	r3, [pc, #8]	; (800b168 <free+0xc>)
 800b15e:	4601      	mov	r1, r0
 800b160:	6818      	ldr	r0, [r3, #0]
 800b162:	f001 be9b 	b.w	800ce9c <_free_r>
 800b166:	bf00      	nop
 800b168:	20000070 	.word	0x20000070

0800b16c <sbrk_aligned>:
 800b16c:	b570      	push	{r4, r5, r6, lr}
 800b16e:	4e0e      	ldr	r6, [pc, #56]	; (800b1a8 <sbrk_aligned+0x3c>)
 800b170:	460c      	mov	r4, r1
 800b172:	6831      	ldr	r1, [r6, #0]
 800b174:	4605      	mov	r5, r0
 800b176:	b911      	cbnz	r1, 800b17e <sbrk_aligned+0x12>
 800b178:	f000 ffbe 	bl	800c0f8 <_sbrk_r>
 800b17c:	6030      	str	r0, [r6, #0]
 800b17e:	4621      	mov	r1, r4
 800b180:	4628      	mov	r0, r5
 800b182:	f000 ffb9 	bl	800c0f8 <_sbrk_r>
 800b186:	1c43      	adds	r3, r0, #1
 800b188:	d00a      	beq.n	800b1a0 <sbrk_aligned+0x34>
 800b18a:	1cc4      	adds	r4, r0, #3
 800b18c:	f024 0403 	bic.w	r4, r4, #3
 800b190:	42a0      	cmp	r0, r4
 800b192:	d007      	beq.n	800b1a4 <sbrk_aligned+0x38>
 800b194:	1a21      	subs	r1, r4, r0
 800b196:	4628      	mov	r0, r5
 800b198:	f000 ffae 	bl	800c0f8 <_sbrk_r>
 800b19c:	3001      	adds	r0, #1
 800b19e:	d101      	bne.n	800b1a4 <sbrk_aligned+0x38>
 800b1a0:	f04f 34ff 	mov.w	r4, #4294967295
 800b1a4:	4620      	mov	r0, r4
 800b1a6:	bd70      	pop	{r4, r5, r6, pc}
 800b1a8:	200026d4 	.word	0x200026d4

0800b1ac <_malloc_r>:
 800b1ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1b0:	1ccd      	adds	r5, r1, #3
 800b1b2:	f025 0503 	bic.w	r5, r5, #3
 800b1b6:	3508      	adds	r5, #8
 800b1b8:	2d0c      	cmp	r5, #12
 800b1ba:	bf38      	it	cc
 800b1bc:	250c      	movcc	r5, #12
 800b1be:	2d00      	cmp	r5, #0
 800b1c0:	4607      	mov	r7, r0
 800b1c2:	db01      	blt.n	800b1c8 <_malloc_r+0x1c>
 800b1c4:	42a9      	cmp	r1, r5
 800b1c6:	d905      	bls.n	800b1d4 <_malloc_r+0x28>
 800b1c8:	230c      	movs	r3, #12
 800b1ca:	603b      	str	r3, [r7, #0]
 800b1cc:	2600      	movs	r6, #0
 800b1ce:	4630      	mov	r0, r6
 800b1d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b2a8 <_malloc_r+0xfc>
 800b1d8:	f000 f868 	bl	800b2ac <__malloc_lock>
 800b1dc:	f8d8 3000 	ldr.w	r3, [r8]
 800b1e0:	461c      	mov	r4, r3
 800b1e2:	bb5c      	cbnz	r4, 800b23c <_malloc_r+0x90>
 800b1e4:	4629      	mov	r1, r5
 800b1e6:	4638      	mov	r0, r7
 800b1e8:	f7ff ffc0 	bl	800b16c <sbrk_aligned>
 800b1ec:	1c43      	adds	r3, r0, #1
 800b1ee:	4604      	mov	r4, r0
 800b1f0:	d155      	bne.n	800b29e <_malloc_r+0xf2>
 800b1f2:	f8d8 4000 	ldr.w	r4, [r8]
 800b1f6:	4626      	mov	r6, r4
 800b1f8:	2e00      	cmp	r6, #0
 800b1fa:	d145      	bne.n	800b288 <_malloc_r+0xdc>
 800b1fc:	2c00      	cmp	r4, #0
 800b1fe:	d048      	beq.n	800b292 <_malloc_r+0xe6>
 800b200:	6823      	ldr	r3, [r4, #0]
 800b202:	4631      	mov	r1, r6
 800b204:	4638      	mov	r0, r7
 800b206:	eb04 0903 	add.w	r9, r4, r3
 800b20a:	f000 ff75 	bl	800c0f8 <_sbrk_r>
 800b20e:	4581      	cmp	r9, r0
 800b210:	d13f      	bne.n	800b292 <_malloc_r+0xe6>
 800b212:	6821      	ldr	r1, [r4, #0]
 800b214:	1a6d      	subs	r5, r5, r1
 800b216:	4629      	mov	r1, r5
 800b218:	4638      	mov	r0, r7
 800b21a:	f7ff ffa7 	bl	800b16c <sbrk_aligned>
 800b21e:	3001      	adds	r0, #1
 800b220:	d037      	beq.n	800b292 <_malloc_r+0xe6>
 800b222:	6823      	ldr	r3, [r4, #0]
 800b224:	442b      	add	r3, r5
 800b226:	6023      	str	r3, [r4, #0]
 800b228:	f8d8 3000 	ldr.w	r3, [r8]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d038      	beq.n	800b2a2 <_malloc_r+0xf6>
 800b230:	685a      	ldr	r2, [r3, #4]
 800b232:	42a2      	cmp	r2, r4
 800b234:	d12b      	bne.n	800b28e <_malloc_r+0xe2>
 800b236:	2200      	movs	r2, #0
 800b238:	605a      	str	r2, [r3, #4]
 800b23a:	e00f      	b.n	800b25c <_malloc_r+0xb0>
 800b23c:	6822      	ldr	r2, [r4, #0]
 800b23e:	1b52      	subs	r2, r2, r5
 800b240:	d41f      	bmi.n	800b282 <_malloc_r+0xd6>
 800b242:	2a0b      	cmp	r2, #11
 800b244:	d917      	bls.n	800b276 <_malloc_r+0xca>
 800b246:	1961      	adds	r1, r4, r5
 800b248:	42a3      	cmp	r3, r4
 800b24a:	6025      	str	r5, [r4, #0]
 800b24c:	bf18      	it	ne
 800b24e:	6059      	strne	r1, [r3, #4]
 800b250:	6863      	ldr	r3, [r4, #4]
 800b252:	bf08      	it	eq
 800b254:	f8c8 1000 	streq.w	r1, [r8]
 800b258:	5162      	str	r2, [r4, r5]
 800b25a:	604b      	str	r3, [r1, #4]
 800b25c:	4638      	mov	r0, r7
 800b25e:	f104 060b 	add.w	r6, r4, #11
 800b262:	f000 f829 	bl	800b2b8 <__malloc_unlock>
 800b266:	f026 0607 	bic.w	r6, r6, #7
 800b26a:	1d23      	adds	r3, r4, #4
 800b26c:	1af2      	subs	r2, r6, r3
 800b26e:	d0ae      	beq.n	800b1ce <_malloc_r+0x22>
 800b270:	1b9b      	subs	r3, r3, r6
 800b272:	50a3      	str	r3, [r4, r2]
 800b274:	e7ab      	b.n	800b1ce <_malloc_r+0x22>
 800b276:	42a3      	cmp	r3, r4
 800b278:	6862      	ldr	r2, [r4, #4]
 800b27a:	d1dd      	bne.n	800b238 <_malloc_r+0x8c>
 800b27c:	f8c8 2000 	str.w	r2, [r8]
 800b280:	e7ec      	b.n	800b25c <_malloc_r+0xb0>
 800b282:	4623      	mov	r3, r4
 800b284:	6864      	ldr	r4, [r4, #4]
 800b286:	e7ac      	b.n	800b1e2 <_malloc_r+0x36>
 800b288:	4634      	mov	r4, r6
 800b28a:	6876      	ldr	r6, [r6, #4]
 800b28c:	e7b4      	b.n	800b1f8 <_malloc_r+0x4c>
 800b28e:	4613      	mov	r3, r2
 800b290:	e7cc      	b.n	800b22c <_malloc_r+0x80>
 800b292:	230c      	movs	r3, #12
 800b294:	603b      	str	r3, [r7, #0]
 800b296:	4638      	mov	r0, r7
 800b298:	f000 f80e 	bl	800b2b8 <__malloc_unlock>
 800b29c:	e797      	b.n	800b1ce <_malloc_r+0x22>
 800b29e:	6025      	str	r5, [r4, #0]
 800b2a0:	e7dc      	b.n	800b25c <_malloc_r+0xb0>
 800b2a2:	605b      	str	r3, [r3, #4]
 800b2a4:	deff      	udf	#255	; 0xff
 800b2a6:	bf00      	nop
 800b2a8:	200026d0 	.word	0x200026d0

0800b2ac <__malloc_lock>:
 800b2ac:	4801      	ldr	r0, [pc, #4]	; (800b2b4 <__malloc_lock+0x8>)
 800b2ae:	f000 bf69 	b.w	800c184 <__retarget_lock_acquire_recursive>
 800b2b2:	bf00      	nop
 800b2b4:	20002818 	.word	0x20002818

0800b2b8 <__malloc_unlock>:
 800b2b8:	4801      	ldr	r0, [pc, #4]	; (800b2c0 <__malloc_unlock+0x8>)
 800b2ba:	f000 bf64 	b.w	800c186 <__retarget_lock_release_recursive>
 800b2be:	bf00      	nop
 800b2c0:	20002818 	.word	0x20002818

0800b2c4 <__cvt>:
 800b2c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b2c8:	ec55 4b10 	vmov	r4, r5, d0
 800b2cc:	2d00      	cmp	r5, #0
 800b2ce:	460e      	mov	r6, r1
 800b2d0:	4619      	mov	r1, r3
 800b2d2:	462b      	mov	r3, r5
 800b2d4:	bfbb      	ittet	lt
 800b2d6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b2da:	461d      	movlt	r5, r3
 800b2dc:	2300      	movge	r3, #0
 800b2de:	232d      	movlt	r3, #45	; 0x2d
 800b2e0:	700b      	strb	r3, [r1, #0]
 800b2e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b2e4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b2e8:	4691      	mov	r9, r2
 800b2ea:	f023 0820 	bic.w	r8, r3, #32
 800b2ee:	bfbc      	itt	lt
 800b2f0:	4622      	movlt	r2, r4
 800b2f2:	4614      	movlt	r4, r2
 800b2f4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b2f8:	d005      	beq.n	800b306 <__cvt+0x42>
 800b2fa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b2fe:	d100      	bne.n	800b302 <__cvt+0x3e>
 800b300:	3601      	adds	r6, #1
 800b302:	2102      	movs	r1, #2
 800b304:	e000      	b.n	800b308 <__cvt+0x44>
 800b306:	2103      	movs	r1, #3
 800b308:	ab03      	add	r3, sp, #12
 800b30a:	9301      	str	r3, [sp, #4]
 800b30c:	ab02      	add	r3, sp, #8
 800b30e:	9300      	str	r3, [sp, #0]
 800b310:	ec45 4b10 	vmov	d0, r4, r5
 800b314:	4653      	mov	r3, sl
 800b316:	4632      	mov	r2, r6
 800b318:	f000 ffce 	bl	800c2b8 <_dtoa_r>
 800b31c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b320:	4607      	mov	r7, r0
 800b322:	d102      	bne.n	800b32a <__cvt+0x66>
 800b324:	f019 0f01 	tst.w	r9, #1
 800b328:	d022      	beq.n	800b370 <__cvt+0xac>
 800b32a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b32e:	eb07 0906 	add.w	r9, r7, r6
 800b332:	d110      	bne.n	800b356 <__cvt+0x92>
 800b334:	783b      	ldrb	r3, [r7, #0]
 800b336:	2b30      	cmp	r3, #48	; 0x30
 800b338:	d10a      	bne.n	800b350 <__cvt+0x8c>
 800b33a:	2200      	movs	r2, #0
 800b33c:	2300      	movs	r3, #0
 800b33e:	4620      	mov	r0, r4
 800b340:	4629      	mov	r1, r5
 800b342:	f7f5 fbc1 	bl	8000ac8 <__aeabi_dcmpeq>
 800b346:	b918      	cbnz	r0, 800b350 <__cvt+0x8c>
 800b348:	f1c6 0601 	rsb	r6, r6, #1
 800b34c:	f8ca 6000 	str.w	r6, [sl]
 800b350:	f8da 3000 	ldr.w	r3, [sl]
 800b354:	4499      	add	r9, r3
 800b356:	2200      	movs	r2, #0
 800b358:	2300      	movs	r3, #0
 800b35a:	4620      	mov	r0, r4
 800b35c:	4629      	mov	r1, r5
 800b35e:	f7f5 fbb3 	bl	8000ac8 <__aeabi_dcmpeq>
 800b362:	b108      	cbz	r0, 800b368 <__cvt+0xa4>
 800b364:	f8cd 900c 	str.w	r9, [sp, #12]
 800b368:	2230      	movs	r2, #48	; 0x30
 800b36a:	9b03      	ldr	r3, [sp, #12]
 800b36c:	454b      	cmp	r3, r9
 800b36e:	d307      	bcc.n	800b380 <__cvt+0xbc>
 800b370:	9b03      	ldr	r3, [sp, #12]
 800b372:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b374:	1bdb      	subs	r3, r3, r7
 800b376:	4638      	mov	r0, r7
 800b378:	6013      	str	r3, [r2, #0]
 800b37a:	b004      	add	sp, #16
 800b37c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b380:	1c59      	adds	r1, r3, #1
 800b382:	9103      	str	r1, [sp, #12]
 800b384:	701a      	strb	r2, [r3, #0]
 800b386:	e7f0      	b.n	800b36a <__cvt+0xa6>

0800b388 <__exponent>:
 800b388:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b38a:	4603      	mov	r3, r0
 800b38c:	2900      	cmp	r1, #0
 800b38e:	bfb8      	it	lt
 800b390:	4249      	neglt	r1, r1
 800b392:	f803 2b02 	strb.w	r2, [r3], #2
 800b396:	bfb4      	ite	lt
 800b398:	222d      	movlt	r2, #45	; 0x2d
 800b39a:	222b      	movge	r2, #43	; 0x2b
 800b39c:	2909      	cmp	r1, #9
 800b39e:	7042      	strb	r2, [r0, #1]
 800b3a0:	dd2a      	ble.n	800b3f8 <__exponent+0x70>
 800b3a2:	f10d 0207 	add.w	r2, sp, #7
 800b3a6:	4617      	mov	r7, r2
 800b3a8:	260a      	movs	r6, #10
 800b3aa:	4694      	mov	ip, r2
 800b3ac:	fb91 f5f6 	sdiv	r5, r1, r6
 800b3b0:	fb06 1415 	mls	r4, r6, r5, r1
 800b3b4:	3430      	adds	r4, #48	; 0x30
 800b3b6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800b3ba:	460c      	mov	r4, r1
 800b3bc:	2c63      	cmp	r4, #99	; 0x63
 800b3be:	f102 32ff 	add.w	r2, r2, #4294967295
 800b3c2:	4629      	mov	r1, r5
 800b3c4:	dcf1      	bgt.n	800b3aa <__exponent+0x22>
 800b3c6:	3130      	adds	r1, #48	; 0x30
 800b3c8:	f1ac 0402 	sub.w	r4, ip, #2
 800b3cc:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b3d0:	1c41      	adds	r1, r0, #1
 800b3d2:	4622      	mov	r2, r4
 800b3d4:	42ba      	cmp	r2, r7
 800b3d6:	d30a      	bcc.n	800b3ee <__exponent+0x66>
 800b3d8:	f10d 0209 	add.w	r2, sp, #9
 800b3dc:	eba2 020c 	sub.w	r2, r2, ip
 800b3e0:	42bc      	cmp	r4, r7
 800b3e2:	bf88      	it	hi
 800b3e4:	2200      	movhi	r2, #0
 800b3e6:	4413      	add	r3, r2
 800b3e8:	1a18      	subs	r0, r3, r0
 800b3ea:	b003      	add	sp, #12
 800b3ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3ee:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b3f2:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b3f6:	e7ed      	b.n	800b3d4 <__exponent+0x4c>
 800b3f8:	2330      	movs	r3, #48	; 0x30
 800b3fa:	3130      	adds	r1, #48	; 0x30
 800b3fc:	7083      	strb	r3, [r0, #2]
 800b3fe:	70c1      	strb	r1, [r0, #3]
 800b400:	1d03      	adds	r3, r0, #4
 800b402:	e7f1      	b.n	800b3e8 <__exponent+0x60>

0800b404 <_printf_float>:
 800b404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b408:	ed2d 8b02 	vpush	{d8}
 800b40c:	b08d      	sub	sp, #52	; 0x34
 800b40e:	460c      	mov	r4, r1
 800b410:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b414:	4616      	mov	r6, r2
 800b416:	461f      	mov	r7, r3
 800b418:	4605      	mov	r5, r0
 800b41a:	f000 fe21 	bl	800c060 <_localeconv_r>
 800b41e:	f8d0 a000 	ldr.w	sl, [r0]
 800b422:	4650      	mov	r0, sl
 800b424:	f7f4 ff24 	bl	8000270 <strlen>
 800b428:	2300      	movs	r3, #0
 800b42a:	930a      	str	r3, [sp, #40]	; 0x28
 800b42c:	6823      	ldr	r3, [r4, #0]
 800b42e:	9305      	str	r3, [sp, #20]
 800b430:	f8d8 3000 	ldr.w	r3, [r8]
 800b434:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b438:	3307      	adds	r3, #7
 800b43a:	f023 0307 	bic.w	r3, r3, #7
 800b43e:	f103 0208 	add.w	r2, r3, #8
 800b442:	f8c8 2000 	str.w	r2, [r8]
 800b446:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b44a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b44e:	9307      	str	r3, [sp, #28]
 800b450:	f8cd 8018 	str.w	r8, [sp, #24]
 800b454:	ee08 0a10 	vmov	s16, r0
 800b458:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800b45c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b460:	4b9e      	ldr	r3, [pc, #632]	; (800b6dc <_printf_float+0x2d8>)
 800b462:	f04f 32ff 	mov.w	r2, #4294967295
 800b466:	f7f5 fb61 	bl	8000b2c <__aeabi_dcmpun>
 800b46a:	bb88      	cbnz	r0, 800b4d0 <_printf_float+0xcc>
 800b46c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b470:	4b9a      	ldr	r3, [pc, #616]	; (800b6dc <_printf_float+0x2d8>)
 800b472:	f04f 32ff 	mov.w	r2, #4294967295
 800b476:	f7f5 fb3b 	bl	8000af0 <__aeabi_dcmple>
 800b47a:	bb48      	cbnz	r0, 800b4d0 <_printf_float+0xcc>
 800b47c:	2200      	movs	r2, #0
 800b47e:	2300      	movs	r3, #0
 800b480:	4640      	mov	r0, r8
 800b482:	4649      	mov	r1, r9
 800b484:	f7f5 fb2a 	bl	8000adc <__aeabi_dcmplt>
 800b488:	b110      	cbz	r0, 800b490 <_printf_float+0x8c>
 800b48a:	232d      	movs	r3, #45	; 0x2d
 800b48c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b490:	4a93      	ldr	r2, [pc, #588]	; (800b6e0 <_printf_float+0x2dc>)
 800b492:	4b94      	ldr	r3, [pc, #592]	; (800b6e4 <_printf_float+0x2e0>)
 800b494:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b498:	bf94      	ite	ls
 800b49a:	4690      	movls	r8, r2
 800b49c:	4698      	movhi	r8, r3
 800b49e:	2303      	movs	r3, #3
 800b4a0:	6123      	str	r3, [r4, #16]
 800b4a2:	9b05      	ldr	r3, [sp, #20]
 800b4a4:	f023 0304 	bic.w	r3, r3, #4
 800b4a8:	6023      	str	r3, [r4, #0]
 800b4aa:	f04f 0900 	mov.w	r9, #0
 800b4ae:	9700      	str	r7, [sp, #0]
 800b4b0:	4633      	mov	r3, r6
 800b4b2:	aa0b      	add	r2, sp, #44	; 0x2c
 800b4b4:	4621      	mov	r1, r4
 800b4b6:	4628      	mov	r0, r5
 800b4b8:	f000 f9da 	bl	800b870 <_printf_common>
 800b4bc:	3001      	adds	r0, #1
 800b4be:	f040 8090 	bne.w	800b5e2 <_printf_float+0x1de>
 800b4c2:	f04f 30ff 	mov.w	r0, #4294967295
 800b4c6:	b00d      	add	sp, #52	; 0x34
 800b4c8:	ecbd 8b02 	vpop	{d8}
 800b4cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4d0:	4642      	mov	r2, r8
 800b4d2:	464b      	mov	r3, r9
 800b4d4:	4640      	mov	r0, r8
 800b4d6:	4649      	mov	r1, r9
 800b4d8:	f7f5 fb28 	bl	8000b2c <__aeabi_dcmpun>
 800b4dc:	b140      	cbz	r0, 800b4f0 <_printf_float+0xec>
 800b4de:	464b      	mov	r3, r9
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	bfbc      	itt	lt
 800b4e4:	232d      	movlt	r3, #45	; 0x2d
 800b4e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b4ea:	4a7f      	ldr	r2, [pc, #508]	; (800b6e8 <_printf_float+0x2e4>)
 800b4ec:	4b7f      	ldr	r3, [pc, #508]	; (800b6ec <_printf_float+0x2e8>)
 800b4ee:	e7d1      	b.n	800b494 <_printf_float+0x90>
 800b4f0:	6863      	ldr	r3, [r4, #4]
 800b4f2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b4f6:	9206      	str	r2, [sp, #24]
 800b4f8:	1c5a      	adds	r2, r3, #1
 800b4fa:	d13f      	bne.n	800b57c <_printf_float+0x178>
 800b4fc:	2306      	movs	r3, #6
 800b4fe:	6063      	str	r3, [r4, #4]
 800b500:	9b05      	ldr	r3, [sp, #20]
 800b502:	6861      	ldr	r1, [r4, #4]
 800b504:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b508:	2300      	movs	r3, #0
 800b50a:	9303      	str	r3, [sp, #12]
 800b50c:	ab0a      	add	r3, sp, #40	; 0x28
 800b50e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b512:	ab09      	add	r3, sp, #36	; 0x24
 800b514:	ec49 8b10 	vmov	d0, r8, r9
 800b518:	9300      	str	r3, [sp, #0]
 800b51a:	6022      	str	r2, [r4, #0]
 800b51c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b520:	4628      	mov	r0, r5
 800b522:	f7ff fecf 	bl	800b2c4 <__cvt>
 800b526:	9b06      	ldr	r3, [sp, #24]
 800b528:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b52a:	2b47      	cmp	r3, #71	; 0x47
 800b52c:	4680      	mov	r8, r0
 800b52e:	d108      	bne.n	800b542 <_printf_float+0x13e>
 800b530:	1cc8      	adds	r0, r1, #3
 800b532:	db02      	blt.n	800b53a <_printf_float+0x136>
 800b534:	6863      	ldr	r3, [r4, #4]
 800b536:	4299      	cmp	r1, r3
 800b538:	dd41      	ble.n	800b5be <_printf_float+0x1ba>
 800b53a:	f1ab 0302 	sub.w	r3, fp, #2
 800b53e:	fa5f fb83 	uxtb.w	fp, r3
 800b542:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b546:	d820      	bhi.n	800b58a <_printf_float+0x186>
 800b548:	3901      	subs	r1, #1
 800b54a:	465a      	mov	r2, fp
 800b54c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b550:	9109      	str	r1, [sp, #36]	; 0x24
 800b552:	f7ff ff19 	bl	800b388 <__exponent>
 800b556:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b558:	1813      	adds	r3, r2, r0
 800b55a:	2a01      	cmp	r2, #1
 800b55c:	4681      	mov	r9, r0
 800b55e:	6123      	str	r3, [r4, #16]
 800b560:	dc02      	bgt.n	800b568 <_printf_float+0x164>
 800b562:	6822      	ldr	r2, [r4, #0]
 800b564:	07d2      	lsls	r2, r2, #31
 800b566:	d501      	bpl.n	800b56c <_printf_float+0x168>
 800b568:	3301      	adds	r3, #1
 800b56a:	6123      	str	r3, [r4, #16]
 800b56c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b570:	2b00      	cmp	r3, #0
 800b572:	d09c      	beq.n	800b4ae <_printf_float+0xaa>
 800b574:	232d      	movs	r3, #45	; 0x2d
 800b576:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b57a:	e798      	b.n	800b4ae <_printf_float+0xaa>
 800b57c:	9a06      	ldr	r2, [sp, #24]
 800b57e:	2a47      	cmp	r2, #71	; 0x47
 800b580:	d1be      	bne.n	800b500 <_printf_float+0xfc>
 800b582:	2b00      	cmp	r3, #0
 800b584:	d1bc      	bne.n	800b500 <_printf_float+0xfc>
 800b586:	2301      	movs	r3, #1
 800b588:	e7b9      	b.n	800b4fe <_printf_float+0xfa>
 800b58a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b58e:	d118      	bne.n	800b5c2 <_printf_float+0x1be>
 800b590:	2900      	cmp	r1, #0
 800b592:	6863      	ldr	r3, [r4, #4]
 800b594:	dd0b      	ble.n	800b5ae <_printf_float+0x1aa>
 800b596:	6121      	str	r1, [r4, #16]
 800b598:	b913      	cbnz	r3, 800b5a0 <_printf_float+0x19c>
 800b59a:	6822      	ldr	r2, [r4, #0]
 800b59c:	07d0      	lsls	r0, r2, #31
 800b59e:	d502      	bpl.n	800b5a6 <_printf_float+0x1a2>
 800b5a0:	3301      	adds	r3, #1
 800b5a2:	440b      	add	r3, r1
 800b5a4:	6123      	str	r3, [r4, #16]
 800b5a6:	65a1      	str	r1, [r4, #88]	; 0x58
 800b5a8:	f04f 0900 	mov.w	r9, #0
 800b5ac:	e7de      	b.n	800b56c <_printf_float+0x168>
 800b5ae:	b913      	cbnz	r3, 800b5b6 <_printf_float+0x1b2>
 800b5b0:	6822      	ldr	r2, [r4, #0]
 800b5b2:	07d2      	lsls	r2, r2, #31
 800b5b4:	d501      	bpl.n	800b5ba <_printf_float+0x1b6>
 800b5b6:	3302      	adds	r3, #2
 800b5b8:	e7f4      	b.n	800b5a4 <_printf_float+0x1a0>
 800b5ba:	2301      	movs	r3, #1
 800b5bc:	e7f2      	b.n	800b5a4 <_printf_float+0x1a0>
 800b5be:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b5c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5c4:	4299      	cmp	r1, r3
 800b5c6:	db05      	blt.n	800b5d4 <_printf_float+0x1d0>
 800b5c8:	6823      	ldr	r3, [r4, #0]
 800b5ca:	6121      	str	r1, [r4, #16]
 800b5cc:	07d8      	lsls	r0, r3, #31
 800b5ce:	d5ea      	bpl.n	800b5a6 <_printf_float+0x1a2>
 800b5d0:	1c4b      	adds	r3, r1, #1
 800b5d2:	e7e7      	b.n	800b5a4 <_printf_float+0x1a0>
 800b5d4:	2900      	cmp	r1, #0
 800b5d6:	bfd4      	ite	le
 800b5d8:	f1c1 0202 	rsble	r2, r1, #2
 800b5dc:	2201      	movgt	r2, #1
 800b5de:	4413      	add	r3, r2
 800b5e0:	e7e0      	b.n	800b5a4 <_printf_float+0x1a0>
 800b5e2:	6823      	ldr	r3, [r4, #0]
 800b5e4:	055a      	lsls	r2, r3, #21
 800b5e6:	d407      	bmi.n	800b5f8 <_printf_float+0x1f4>
 800b5e8:	6923      	ldr	r3, [r4, #16]
 800b5ea:	4642      	mov	r2, r8
 800b5ec:	4631      	mov	r1, r6
 800b5ee:	4628      	mov	r0, r5
 800b5f0:	47b8      	blx	r7
 800b5f2:	3001      	adds	r0, #1
 800b5f4:	d12c      	bne.n	800b650 <_printf_float+0x24c>
 800b5f6:	e764      	b.n	800b4c2 <_printf_float+0xbe>
 800b5f8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b5fc:	f240 80e0 	bls.w	800b7c0 <_printf_float+0x3bc>
 800b600:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b604:	2200      	movs	r2, #0
 800b606:	2300      	movs	r3, #0
 800b608:	f7f5 fa5e 	bl	8000ac8 <__aeabi_dcmpeq>
 800b60c:	2800      	cmp	r0, #0
 800b60e:	d034      	beq.n	800b67a <_printf_float+0x276>
 800b610:	4a37      	ldr	r2, [pc, #220]	; (800b6f0 <_printf_float+0x2ec>)
 800b612:	2301      	movs	r3, #1
 800b614:	4631      	mov	r1, r6
 800b616:	4628      	mov	r0, r5
 800b618:	47b8      	blx	r7
 800b61a:	3001      	adds	r0, #1
 800b61c:	f43f af51 	beq.w	800b4c2 <_printf_float+0xbe>
 800b620:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b624:	429a      	cmp	r2, r3
 800b626:	db02      	blt.n	800b62e <_printf_float+0x22a>
 800b628:	6823      	ldr	r3, [r4, #0]
 800b62a:	07d8      	lsls	r0, r3, #31
 800b62c:	d510      	bpl.n	800b650 <_printf_float+0x24c>
 800b62e:	ee18 3a10 	vmov	r3, s16
 800b632:	4652      	mov	r2, sl
 800b634:	4631      	mov	r1, r6
 800b636:	4628      	mov	r0, r5
 800b638:	47b8      	blx	r7
 800b63a:	3001      	adds	r0, #1
 800b63c:	f43f af41 	beq.w	800b4c2 <_printf_float+0xbe>
 800b640:	f04f 0800 	mov.w	r8, #0
 800b644:	f104 091a 	add.w	r9, r4, #26
 800b648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b64a:	3b01      	subs	r3, #1
 800b64c:	4543      	cmp	r3, r8
 800b64e:	dc09      	bgt.n	800b664 <_printf_float+0x260>
 800b650:	6823      	ldr	r3, [r4, #0]
 800b652:	079b      	lsls	r3, r3, #30
 800b654:	f100 8107 	bmi.w	800b866 <_printf_float+0x462>
 800b658:	68e0      	ldr	r0, [r4, #12]
 800b65a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b65c:	4298      	cmp	r0, r3
 800b65e:	bfb8      	it	lt
 800b660:	4618      	movlt	r0, r3
 800b662:	e730      	b.n	800b4c6 <_printf_float+0xc2>
 800b664:	2301      	movs	r3, #1
 800b666:	464a      	mov	r2, r9
 800b668:	4631      	mov	r1, r6
 800b66a:	4628      	mov	r0, r5
 800b66c:	47b8      	blx	r7
 800b66e:	3001      	adds	r0, #1
 800b670:	f43f af27 	beq.w	800b4c2 <_printf_float+0xbe>
 800b674:	f108 0801 	add.w	r8, r8, #1
 800b678:	e7e6      	b.n	800b648 <_printf_float+0x244>
 800b67a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	dc39      	bgt.n	800b6f4 <_printf_float+0x2f0>
 800b680:	4a1b      	ldr	r2, [pc, #108]	; (800b6f0 <_printf_float+0x2ec>)
 800b682:	2301      	movs	r3, #1
 800b684:	4631      	mov	r1, r6
 800b686:	4628      	mov	r0, r5
 800b688:	47b8      	blx	r7
 800b68a:	3001      	adds	r0, #1
 800b68c:	f43f af19 	beq.w	800b4c2 <_printf_float+0xbe>
 800b690:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b694:	4313      	orrs	r3, r2
 800b696:	d102      	bne.n	800b69e <_printf_float+0x29a>
 800b698:	6823      	ldr	r3, [r4, #0]
 800b69a:	07d9      	lsls	r1, r3, #31
 800b69c:	d5d8      	bpl.n	800b650 <_printf_float+0x24c>
 800b69e:	ee18 3a10 	vmov	r3, s16
 800b6a2:	4652      	mov	r2, sl
 800b6a4:	4631      	mov	r1, r6
 800b6a6:	4628      	mov	r0, r5
 800b6a8:	47b8      	blx	r7
 800b6aa:	3001      	adds	r0, #1
 800b6ac:	f43f af09 	beq.w	800b4c2 <_printf_float+0xbe>
 800b6b0:	f04f 0900 	mov.w	r9, #0
 800b6b4:	f104 0a1a 	add.w	sl, r4, #26
 800b6b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6ba:	425b      	negs	r3, r3
 800b6bc:	454b      	cmp	r3, r9
 800b6be:	dc01      	bgt.n	800b6c4 <_printf_float+0x2c0>
 800b6c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6c2:	e792      	b.n	800b5ea <_printf_float+0x1e6>
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	4652      	mov	r2, sl
 800b6c8:	4631      	mov	r1, r6
 800b6ca:	4628      	mov	r0, r5
 800b6cc:	47b8      	blx	r7
 800b6ce:	3001      	adds	r0, #1
 800b6d0:	f43f aef7 	beq.w	800b4c2 <_printf_float+0xbe>
 800b6d4:	f109 0901 	add.w	r9, r9, #1
 800b6d8:	e7ee      	b.n	800b6b8 <_printf_float+0x2b4>
 800b6da:	bf00      	nop
 800b6dc:	7fefffff 	.word	0x7fefffff
 800b6e0:	0800e777 	.word	0x0800e777
 800b6e4:	0800e77b 	.word	0x0800e77b
 800b6e8:	0800e77f 	.word	0x0800e77f
 800b6ec:	0800e783 	.word	0x0800e783
 800b6f0:	0800e787 	.word	0x0800e787
 800b6f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b6f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b6f8:	429a      	cmp	r2, r3
 800b6fa:	bfa8      	it	ge
 800b6fc:	461a      	movge	r2, r3
 800b6fe:	2a00      	cmp	r2, #0
 800b700:	4691      	mov	r9, r2
 800b702:	dc37      	bgt.n	800b774 <_printf_float+0x370>
 800b704:	f04f 0b00 	mov.w	fp, #0
 800b708:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b70c:	f104 021a 	add.w	r2, r4, #26
 800b710:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b712:	9305      	str	r3, [sp, #20]
 800b714:	eba3 0309 	sub.w	r3, r3, r9
 800b718:	455b      	cmp	r3, fp
 800b71a:	dc33      	bgt.n	800b784 <_printf_float+0x380>
 800b71c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b720:	429a      	cmp	r2, r3
 800b722:	db3b      	blt.n	800b79c <_printf_float+0x398>
 800b724:	6823      	ldr	r3, [r4, #0]
 800b726:	07da      	lsls	r2, r3, #31
 800b728:	d438      	bmi.n	800b79c <_printf_float+0x398>
 800b72a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b72e:	eba2 0903 	sub.w	r9, r2, r3
 800b732:	9b05      	ldr	r3, [sp, #20]
 800b734:	1ad2      	subs	r2, r2, r3
 800b736:	4591      	cmp	r9, r2
 800b738:	bfa8      	it	ge
 800b73a:	4691      	movge	r9, r2
 800b73c:	f1b9 0f00 	cmp.w	r9, #0
 800b740:	dc35      	bgt.n	800b7ae <_printf_float+0x3aa>
 800b742:	f04f 0800 	mov.w	r8, #0
 800b746:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b74a:	f104 0a1a 	add.w	sl, r4, #26
 800b74e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b752:	1a9b      	subs	r3, r3, r2
 800b754:	eba3 0309 	sub.w	r3, r3, r9
 800b758:	4543      	cmp	r3, r8
 800b75a:	f77f af79 	ble.w	800b650 <_printf_float+0x24c>
 800b75e:	2301      	movs	r3, #1
 800b760:	4652      	mov	r2, sl
 800b762:	4631      	mov	r1, r6
 800b764:	4628      	mov	r0, r5
 800b766:	47b8      	blx	r7
 800b768:	3001      	adds	r0, #1
 800b76a:	f43f aeaa 	beq.w	800b4c2 <_printf_float+0xbe>
 800b76e:	f108 0801 	add.w	r8, r8, #1
 800b772:	e7ec      	b.n	800b74e <_printf_float+0x34a>
 800b774:	4613      	mov	r3, r2
 800b776:	4631      	mov	r1, r6
 800b778:	4642      	mov	r2, r8
 800b77a:	4628      	mov	r0, r5
 800b77c:	47b8      	blx	r7
 800b77e:	3001      	adds	r0, #1
 800b780:	d1c0      	bne.n	800b704 <_printf_float+0x300>
 800b782:	e69e      	b.n	800b4c2 <_printf_float+0xbe>
 800b784:	2301      	movs	r3, #1
 800b786:	4631      	mov	r1, r6
 800b788:	4628      	mov	r0, r5
 800b78a:	9205      	str	r2, [sp, #20]
 800b78c:	47b8      	blx	r7
 800b78e:	3001      	adds	r0, #1
 800b790:	f43f ae97 	beq.w	800b4c2 <_printf_float+0xbe>
 800b794:	9a05      	ldr	r2, [sp, #20]
 800b796:	f10b 0b01 	add.w	fp, fp, #1
 800b79a:	e7b9      	b.n	800b710 <_printf_float+0x30c>
 800b79c:	ee18 3a10 	vmov	r3, s16
 800b7a0:	4652      	mov	r2, sl
 800b7a2:	4631      	mov	r1, r6
 800b7a4:	4628      	mov	r0, r5
 800b7a6:	47b8      	blx	r7
 800b7a8:	3001      	adds	r0, #1
 800b7aa:	d1be      	bne.n	800b72a <_printf_float+0x326>
 800b7ac:	e689      	b.n	800b4c2 <_printf_float+0xbe>
 800b7ae:	9a05      	ldr	r2, [sp, #20]
 800b7b0:	464b      	mov	r3, r9
 800b7b2:	4442      	add	r2, r8
 800b7b4:	4631      	mov	r1, r6
 800b7b6:	4628      	mov	r0, r5
 800b7b8:	47b8      	blx	r7
 800b7ba:	3001      	adds	r0, #1
 800b7bc:	d1c1      	bne.n	800b742 <_printf_float+0x33e>
 800b7be:	e680      	b.n	800b4c2 <_printf_float+0xbe>
 800b7c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b7c2:	2a01      	cmp	r2, #1
 800b7c4:	dc01      	bgt.n	800b7ca <_printf_float+0x3c6>
 800b7c6:	07db      	lsls	r3, r3, #31
 800b7c8:	d53a      	bpl.n	800b840 <_printf_float+0x43c>
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	4642      	mov	r2, r8
 800b7ce:	4631      	mov	r1, r6
 800b7d0:	4628      	mov	r0, r5
 800b7d2:	47b8      	blx	r7
 800b7d4:	3001      	adds	r0, #1
 800b7d6:	f43f ae74 	beq.w	800b4c2 <_printf_float+0xbe>
 800b7da:	ee18 3a10 	vmov	r3, s16
 800b7de:	4652      	mov	r2, sl
 800b7e0:	4631      	mov	r1, r6
 800b7e2:	4628      	mov	r0, r5
 800b7e4:	47b8      	blx	r7
 800b7e6:	3001      	adds	r0, #1
 800b7e8:	f43f ae6b 	beq.w	800b4c2 <_printf_float+0xbe>
 800b7ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800b7f8:	f7f5 f966 	bl	8000ac8 <__aeabi_dcmpeq>
 800b7fc:	b9d8      	cbnz	r0, 800b836 <_printf_float+0x432>
 800b7fe:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b802:	f108 0201 	add.w	r2, r8, #1
 800b806:	4631      	mov	r1, r6
 800b808:	4628      	mov	r0, r5
 800b80a:	47b8      	blx	r7
 800b80c:	3001      	adds	r0, #1
 800b80e:	d10e      	bne.n	800b82e <_printf_float+0x42a>
 800b810:	e657      	b.n	800b4c2 <_printf_float+0xbe>
 800b812:	2301      	movs	r3, #1
 800b814:	4652      	mov	r2, sl
 800b816:	4631      	mov	r1, r6
 800b818:	4628      	mov	r0, r5
 800b81a:	47b8      	blx	r7
 800b81c:	3001      	adds	r0, #1
 800b81e:	f43f ae50 	beq.w	800b4c2 <_printf_float+0xbe>
 800b822:	f108 0801 	add.w	r8, r8, #1
 800b826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b828:	3b01      	subs	r3, #1
 800b82a:	4543      	cmp	r3, r8
 800b82c:	dcf1      	bgt.n	800b812 <_printf_float+0x40e>
 800b82e:	464b      	mov	r3, r9
 800b830:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b834:	e6da      	b.n	800b5ec <_printf_float+0x1e8>
 800b836:	f04f 0800 	mov.w	r8, #0
 800b83a:	f104 0a1a 	add.w	sl, r4, #26
 800b83e:	e7f2      	b.n	800b826 <_printf_float+0x422>
 800b840:	2301      	movs	r3, #1
 800b842:	4642      	mov	r2, r8
 800b844:	e7df      	b.n	800b806 <_printf_float+0x402>
 800b846:	2301      	movs	r3, #1
 800b848:	464a      	mov	r2, r9
 800b84a:	4631      	mov	r1, r6
 800b84c:	4628      	mov	r0, r5
 800b84e:	47b8      	blx	r7
 800b850:	3001      	adds	r0, #1
 800b852:	f43f ae36 	beq.w	800b4c2 <_printf_float+0xbe>
 800b856:	f108 0801 	add.w	r8, r8, #1
 800b85a:	68e3      	ldr	r3, [r4, #12]
 800b85c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b85e:	1a5b      	subs	r3, r3, r1
 800b860:	4543      	cmp	r3, r8
 800b862:	dcf0      	bgt.n	800b846 <_printf_float+0x442>
 800b864:	e6f8      	b.n	800b658 <_printf_float+0x254>
 800b866:	f04f 0800 	mov.w	r8, #0
 800b86a:	f104 0919 	add.w	r9, r4, #25
 800b86e:	e7f4      	b.n	800b85a <_printf_float+0x456>

0800b870 <_printf_common>:
 800b870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b874:	4616      	mov	r6, r2
 800b876:	4699      	mov	r9, r3
 800b878:	688a      	ldr	r2, [r1, #8]
 800b87a:	690b      	ldr	r3, [r1, #16]
 800b87c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b880:	4293      	cmp	r3, r2
 800b882:	bfb8      	it	lt
 800b884:	4613      	movlt	r3, r2
 800b886:	6033      	str	r3, [r6, #0]
 800b888:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b88c:	4607      	mov	r7, r0
 800b88e:	460c      	mov	r4, r1
 800b890:	b10a      	cbz	r2, 800b896 <_printf_common+0x26>
 800b892:	3301      	adds	r3, #1
 800b894:	6033      	str	r3, [r6, #0]
 800b896:	6823      	ldr	r3, [r4, #0]
 800b898:	0699      	lsls	r1, r3, #26
 800b89a:	bf42      	ittt	mi
 800b89c:	6833      	ldrmi	r3, [r6, #0]
 800b89e:	3302      	addmi	r3, #2
 800b8a0:	6033      	strmi	r3, [r6, #0]
 800b8a2:	6825      	ldr	r5, [r4, #0]
 800b8a4:	f015 0506 	ands.w	r5, r5, #6
 800b8a8:	d106      	bne.n	800b8b8 <_printf_common+0x48>
 800b8aa:	f104 0a19 	add.w	sl, r4, #25
 800b8ae:	68e3      	ldr	r3, [r4, #12]
 800b8b0:	6832      	ldr	r2, [r6, #0]
 800b8b2:	1a9b      	subs	r3, r3, r2
 800b8b4:	42ab      	cmp	r3, r5
 800b8b6:	dc26      	bgt.n	800b906 <_printf_common+0x96>
 800b8b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b8bc:	1e13      	subs	r3, r2, #0
 800b8be:	6822      	ldr	r2, [r4, #0]
 800b8c0:	bf18      	it	ne
 800b8c2:	2301      	movne	r3, #1
 800b8c4:	0692      	lsls	r2, r2, #26
 800b8c6:	d42b      	bmi.n	800b920 <_printf_common+0xb0>
 800b8c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b8cc:	4649      	mov	r1, r9
 800b8ce:	4638      	mov	r0, r7
 800b8d0:	47c0      	blx	r8
 800b8d2:	3001      	adds	r0, #1
 800b8d4:	d01e      	beq.n	800b914 <_printf_common+0xa4>
 800b8d6:	6823      	ldr	r3, [r4, #0]
 800b8d8:	6922      	ldr	r2, [r4, #16]
 800b8da:	f003 0306 	and.w	r3, r3, #6
 800b8de:	2b04      	cmp	r3, #4
 800b8e0:	bf02      	ittt	eq
 800b8e2:	68e5      	ldreq	r5, [r4, #12]
 800b8e4:	6833      	ldreq	r3, [r6, #0]
 800b8e6:	1aed      	subeq	r5, r5, r3
 800b8e8:	68a3      	ldr	r3, [r4, #8]
 800b8ea:	bf0c      	ite	eq
 800b8ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b8f0:	2500      	movne	r5, #0
 800b8f2:	4293      	cmp	r3, r2
 800b8f4:	bfc4      	itt	gt
 800b8f6:	1a9b      	subgt	r3, r3, r2
 800b8f8:	18ed      	addgt	r5, r5, r3
 800b8fa:	2600      	movs	r6, #0
 800b8fc:	341a      	adds	r4, #26
 800b8fe:	42b5      	cmp	r5, r6
 800b900:	d11a      	bne.n	800b938 <_printf_common+0xc8>
 800b902:	2000      	movs	r0, #0
 800b904:	e008      	b.n	800b918 <_printf_common+0xa8>
 800b906:	2301      	movs	r3, #1
 800b908:	4652      	mov	r2, sl
 800b90a:	4649      	mov	r1, r9
 800b90c:	4638      	mov	r0, r7
 800b90e:	47c0      	blx	r8
 800b910:	3001      	adds	r0, #1
 800b912:	d103      	bne.n	800b91c <_printf_common+0xac>
 800b914:	f04f 30ff 	mov.w	r0, #4294967295
 800b918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b91c:	3501      	adds	r5, #1
 800b91e:	e7c6      	b.n	800b8ae <_printf_common+0x3e>
 800b920:	18e1      	adds	r1, r4, r3
 800b922:	1c5a      	adds	r2, r3, #1
 800b924:	2030      	movs	r0, #48	; 0x30
 800b926:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b92a:	4422      	add	r2, r4
 800b92c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b930:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b934:	3302      	adds	r3, #2
 800b936:	e7c7      	b.n	800b8c8 <_printf_common+0x58>
 800b938:	2301      	movs	r3, #1
 800b93a:	4622      	mov	r2, r4
 800b93c:	4649      	mov	r1, r9
 800b93e:	4638      	mov	r0, r7
 800b940:	47c0      	blx	r8
 800b942:	3001      	adds	r0, #1
 800b944:	d0e6      	beq.n	800b914 <_printf_common+0xa4>
 800b946:	3601      	adds	r6, #1
 800b948:	e7d9      	b.n	800b8fe <_printf_common+0x8e>
	...

0800b94c <_printf_i>:
 800b94c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b950:	7e0f      	ldrb	r7, [r1, #24]
 800b952:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b954:	2f78      	cmp	r7, #120	; 0x78
 800b956:	4691      	mov	r9, r2
 800b958:	4680      	mov	r8, r0
 800b95a:	460c      	mov	r4, r1
 800b95c:	469a      	mov	sl, r3
 800b95e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b962:	d807      	bhi.n	800b974 <_printf_i+0x28>
 800b964:	2f62      	cmp	r7, #98	; 0x62
 800b966:	d80a      	bhi.n	800b97e <_printf_i+0x32>
 800b968:	2f00      	cmp	r7, #0
 800b96a:	f000 80d4 	beq.w	800bb16 <_printf_i+0x1ca>
 800b96e:	2f58      	cmp	r7, #88	; 0x58
 800b970:	f000 80c0 	beq.w	800baf4 <_printf_i+0x1a8>
 800b974:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b978:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b97c:	e03a      	b.n	800b9f4 <_printf_i+0xa8>
 800b97e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b982:	2b15      	cmp	r3, #21
 800b984:	d8f6      	bhi.n	800b974 <_printf_i+0x28>
 800b986:	a101      	add	r1, pc, #4	; (adr r1, 800b98c <_printf_i+0x40>)
 800b988:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b98c:	0800b9e5 	.word	0x0800b9e5
 800b990:	0800b9f9 	.word	0x0800b9f9
 800b994:	0800b975 	.word	0x0800b975
 800b998:	0800b975 	.word	0x0800b975
 800b99c:	0800b975 	.word	0x0800b975
 800b9a0:	0800b975 	.word	0x0800b975
 800b9a4:	0800b9f9 	.word	0x0800b9f9
 800b9a8:	0800b975 	.word	0x0800b975
 800b9ac:	0800b975 	.word	0x0800b975
 800b9b0:	0800b975 	.word	0x0800b975
 800b9b4:	0800b975 	.word	0x0800b975
 800b9b8:	0800bafd 	.word	0x0800bafd
 800b9bc:	0800ba25 	.word	0x0800ba25
 800b9c0:	0800bab7 	.word	0x0800bab7
 800b9c4:	0800b975 	.word	0x0800b975
 800b9c8:	0800b975 	.word	0x0800b975
 800b9cc:	0800bb1f 	.word	0x0800bb1f
 800b9d0:	0800b975 	.word	0x0800b975
 800b9d4:	0800ba25 	.word	0x0800ba25
 800b9d8:	0800b975 	.word	0x0800b975
 800b9dc:	0800b975 	.word	0x0800b975
 800b9e0:	0800babf 	.word	0x0800babf
 800b9e4:	682b      	ldr	r3, [r5, #0]
 800b9e6:	1d1a      	adds	r2, r3, #4
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	602a      	str	r2, [r5, #0]
 800b9ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b9f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	e09f      	b.n	800bb38 <_printf_i+0x1ec>
 800b9f8:	6820      	ldr	r0, [r4, #0]
 800b9fa:	682b      	ldr	r3, [r5, #0]
 800b9fc:	0607      	lsls	r7, r0, #24
 800b9fe:	f103 0104 	add.w	r1, r3, #4
 800ba02:	6029      	str	r1, [r5, #0]
 800ba04:	d501      	bpl.n	800ba0a <_printf_i+0xbe>
 800ba06:	681e      	ldr	r6, [r3, #0]
 800ba08:	e003      	b.n	800ba12 <_printf_i+0xc6>
 800ba0a:	0646      	lsls	r6, r0, #25
 800ba0c:	d5fb      	bpl.n	800ba06 <_printf_i+0xba>
 800ba0e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ba12:	2e00      	cmp	r6, #0
 800ba14:	da03      	bge.n	800ba1e <_printf_i+0xd2>
 800ba16:	232d      	movs	r3, #45	; 0x2d
 800ba18:	4276      	negs	r6, r6
 800ba1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba1e:	485a      	ldr	r0, [pc, #360]	; (800bb88 <_printf_i+0x23c>)
 800ba20:	230a      	movs	r3, #10
 800ba22:	e012      	b.n	800ba4a <_printf_i+0xfe>
 800ba24:	682b      	ldr	r3, [r5, #0]
 800ba26:	6820      	ldr	r0, [r4, #0]
 800ba28:	1d19      	adds	r1, r3, #4
 800ba2a:	6029      	str	r1, [r5, #0]
 800ba2c:	0605      	lsls	r5, r0, #24
 800ba2e:	d501      	bpl.n	800ba34 <_printf_i+0xe8>
 800ba30:	681e      	ldr	r6, [r3, #0]
 800ba32:	e002      	b.n	800ba3a <_printf_i+0xee>
 800ba34:	0641      	lsls	r1, r0, #25
 800ba36:	d5fb      	bpl.n	800ba30 <_printf_i+0xe4>
 800ba38:	881e      	ldrh	r6, [r3, #0]
 800ba3a:	4853      	ldr	r0, [pc, #332]	; (800bb88 <_printf_i+0x23c>)
 800ba3c:	2f6f      	cmp	r7, #111	; 0x6f
 800ba3e:	bf0c      	ite	eq
 800ba40:	2308      	moveq	r3, #8
 800ba42:	230a      	movne	r3, #10
 800ba44:	2100      	movs	r1, #0
 800ba46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ba4a:	6865      	ldr	r5, [r4, #4]
 800ba4c:	60a5      	str	r5, [r4, #8]
 800ba4e:	2d00      	cmp	r5, #0
 800ba50:	bfa2      	ittt	ge
 800ba52:	6821      	ldrge	r1, [r4, #0]
 800ba54:	f021 0104 	bicge.w	r1, r1, #4
 800ba58:	6021      	strge	r1, [r4, #0]
 800ba5a:	b90e      	cbnz	r6, 800ba60 <_printf_i+0x114>
 800ba5c:	2d00      	cmp	r5, #0
 800ba5e:	d04b      	beq.n	800baf8 <_printf_i+0x1ac>
 800ba60:	4615      	mov	r5, r2
 800ba62:	fbb6 f1f3 	udiv	r1, r6, r3
 800ba66:	fb03 6711 	mls	r7, r3, r1, r6
 800ba6a:	5dc7      	ldrb	r7, [r0, r7]
 800ba6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ba70:	4637      	mov	r7, r6
 800ba72:	42bb      	cmp	r3, r7
 800ba74:	460e      	mov	r6, r1
 800ba76:	d9f4      	bls.n	800ba62 <_printf_i+0x116>
 800ba78:	2b08      	cmp	r3, #8
 800ba7a:	d10b      	bne.n	800ba94 <_printf_i+0x148>
 800ba7c:	6823      	ldr	r3, [r4, #0]
 800ba7e:	07de      	lsls	r6, r3, #31
 800ba80:	d508      	bpl.n	800ba94 <_printf_i+0x148>
 800ba82:	6923      	ldr	r3, [r4, #16]
 800ba84:	6861      	ldr	r1, [r4, #4]
 800ba86:	4299      	cmp	r1, r3
 800ba88:	bfde      	ittt	le
 800ba8a:	2330      	movle	r3, #48	; 0x30
 800ba8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ba90:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ba94:	1b52      	subs	r2, r2, r5
 800ba96:	6122      	str	r2, [r4, #16]
 800ba98:	f8cd a000 	str.w	sl, [sp]
 800ba9c:	464b      	mov	r3, r9
 800ba9e:	aa03      	add	r2, sp, #12
 800baa0:	4621      	mov	r1, r4
 800baa2:	4640      	mov	r0, r8
 800baa4:	f7ff fee4 	bl	800b870 <_printf_common>
 800baa8:	3001      	adds	r0, #1
 800baaa:	d14a      	bne.n	800bb42 <_printf_i+0x1f6>
 800baac:	f04f 30ff 	mov.w	r0, #4294967295
 800bab0:	b004      	add	sp, #16
 800bab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bab6:	6823      	ldr	r3, [r4, #0]
 800bab8:	f043 0320 	orr.w	r3, r3, #32
 800babc:	6023      	str	r3, [r4, #0]
 800babe:	4833      	ldr	r0, [pc, #204]	; (800bb8c <_printf_i+0x240>)
 800bac0:	2778      	movs	r7, #120	; 0x78
 800bac2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bac6:	6823      	ldr	r3, [r4, #0]
 800bac8:	6829      	ldr	r1, [r5, #0]
 800baca:	061f      	lsls	r7, r3, #24
 800bacc:	f851 6b04 	ldr.w	r6, [r1], #4
 800bad0:	d402      	bmi.n	800bad8 <_printf_i+0x18c>
 800bad2:	065f      	lsls	r7, r3, #25
 800bad4:	bf48      	it	mi
 800bad6:	b2b6      	uxthmi	r6, r6
 800bad8:	07df      	lsls	r7, r3, #31
 800bada:	bf48      	it	mi
 800badc:	f043 0320 	orrmi.w	r3, r3, #32
 800bae0:	6029      	str	r1, [r5, #0]
 800bae2:	bf48      	it	mi
 800bae4:	6023      	strmi	r3, [r4, #0]
 800bae6:	b91e      	cbnz	r6, 800baf0 <_printf_i+0x1a4>
 800bae8:	6823      	ldr	r3, [r4, #0]
 800baea:	f023 0320 	bic.w	r3, r3, #32
 800baee:	6023      	str	r3, [r4, #0]
 800baf0:	2310      	movs	r3, #16
 800baf2:	e7a7      	b.n	800ba44 <_printf_i+0xf8>
 800baf4:	4824      	ldr	r0, [pc, #144]	; (800bb88 <_printf_i+0x23c>)
 800baf6:	e7e4      	b.n	800bac2 <_printf_i+0x176>
 800baf8:	4615      	mov	r5, r2
 800bafa:	e7bd      	b.n	800ba78 <_printf_i+0x12c>
 800bafc:	682b      	ldr	r3, [r5, #0]
 800bafe:	6826      	ldr	r6, [r4, #0]
 800bb00:	6961      	ldr	r1, [r4, #20]
 800bb02:	1d18      	adds	r0, r3, #4
 800bb04:	6028      	str	r0, [r5, #0]
 800bb06:	0635      	lsls	r5, r6, #24
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	d501      	bpl.n	800bb10 <_printf_i+0x1c4>
 800bb0c:	6019      	str	r1, [r3, #0]
 800bb0e:	e002      	b.n	800bb16 <_printf_i+0x1ca>
 800bb10:	0670      	lsls	r0, r6, #25
 800bb12:	d5fb      	bpl.n	800bb0c <_printf_i+0x1c0>
 800bb14:	8019      	strh	r1, [r3, #0]
 800bb16:	2300      	movs	r3, #0
 800bb18:	6123      	str	r3, [r4, #16]
 800bb1a:	4615      	mov	r5, r2
 800bb1c:	e7bc      	b.n	800ba98 <_printf_i+0x14c>
 800bb1e:	682b      	ldr	r3, [r5, #0]
 800bb20:	1d1a      	adds	r2, r3, #4
 800bb22:	602a      	str	r2, [r5, #0]
 800bb24:	681d      	ldr	r5, [r3, #0]
 800bb26:	6862      	ldr	r2, [r4, #4]
 800bb28:	2100      	movs	r1, #0
 800bb2a:	4628      	mov	r0, r5
 800bb2c:	f7f4 fb50 	bl	80001d0 <memchr>
 800bb30:	b108      	cbz	r0, 800bb36 <_printf_i+0x1ea>
 800bb32:	1b40      	subs	r0, r0, r5
 800bb34:	6060      	str	r0, [r4, #4]
 800bb36:	6863      	ldr	r3, [r4, #4]
 800bb38:	6123      	str	r3, [r4, #16]
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb40:	e7aa      	b.n	800ba98 <_printf_i+0x14c>
 800bb42:	6923      	ldr	r3, [r4, #16]
 800bb44:	462a      	mov	r2, r5
 800bb46:	4649      	mov	r1, r9
 800bb48:	4640      	mov	r0, r8
 800bb4a:	47d0      	blx	sl
 800bb4c:	3001      	adds	r0, #1
 800bb4e:	d0ad      	beq.n	800baac <_printf_i+0x160>
 800bb50:	6823      	ldr	r3, [r4, #0]
 800bb52:	079b      	lsls	r3, r3, #30
 800bb54:	d413      	bmi.n	800bb7e <_printf_i+0x232>
 800bb56:	68e0      	ldr	r0, [r4, #12]
 800bb58:	9b03      	ldr	r3, [sp, #12]
 800bb5a:	4298      	cmp	r0, r3
 800bb5c:	bfb8      	it	lt
 800bb5e:	4618      	movlt	r0, r3
 800bb60:	e7a6      	b.n	800bab0 <_printf_i+0x164>
 800bb62:	2301      	movs	r3, #1
 800bb64:	4632      	mov	r2, r6
 800bb66:	4649      	mov	r1, r9
 800bb68:	4640      	mov	r0, r8
 800bb6a:	47d0      	blx	sl
 800bb6c:	3001      	adds	r0, #1
 800bb6e:	d09d      	beq.n	800baac <_printf_i+0x160>
 800bb70:	3501      	adds	r5, #1
 800bb72:	68e3      	ldr	r3, [r4, #12]
 800bb74:	9903      	ldr	r1, [sp, #12]
 800bb76:	1a5b      	subs	r3, r3, r1
 800bb78:	42ab      	cmp	r3, r5
 800bb7a:	dcf2      	bgt.n	800bb62 <_printf_i+0x216>
 800bb7c:	e7eb      	b.n	800bb56 <_printf_i+0x20a>
 800bb7e:	2500      	movs	r5, #0
 800bb80:	f104 0619 	add.w	r6, r4, #25
 800bb84:	e7f5      	b.n	800bb72 <_printf_i+0x226>
 800bb86:	bf00      	nop
 800bb88:	0800e789 	.word	0x0800e789
 800bb8c:	0800e79a 	.word	0x0800e79a

0800bb90 <std>:
 800bb90:	2300      	movs	r3, #0
 800bb92:	b510      	push	{r4, lr}
 800bb94:	4604      	mov	r4, r0
 800bb96:	e9c0 3300 	strd	r3, r3, [r0]
 800bb9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bb9e:	6083      	str	r3, [r0, #8]
 800bba0:	8181      	strh	r1, [r0, #12]
 800bba2:	6643      	str	r3, [r0, #100]	; 0x64
 800bba4:	81c2      	strh	r2, [r0, #14]
 800bba6:	6183      	str	r3, [r0, #24]
 800bba8:	4619      	mov	r1, r3
 800bbaa:	2208      	movs	r2, #8
 800bbac:	305c      	adds	r0, #92	; 0x5c
 800bbae:	f000 fa1f 	bl	800bff0 <memset>
 800bbb2:	4b05      	ldr	r3, [pc, #20]	; (800bbc8 <std+0x38>)
 800bbb4:	6263      	str	r3, [r4, #36]	; 0x24
 800bbb6:	4b05      	ldr	r3, [pc, #20]	; (800bbcc <std+0x3c>)
 800bbb8:	62a3      	str	r3, [r4, #40]	; 0x28
 800bbba:	4b05      	ldr	r3, [pc, #20]	; (800bbd0 <std+0x40>)
 800bbbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bbbe:	4b05      	ldr	r3, [pc, #20]	; (800bbd4 <std+0x44>)
 800bbc0:	6224      	str	r4, [r4, #32]
 800bbc2:	6323      	str	r3, [r4, #48]	; 0x30
 800bbc4:	bd10      	pop	{r4, pc}
 800bbc6:	bf00      	nop
 800bbc8:	0800be0d 	.word	0x0800be0d
 800bbcc:	0800be2f 	.word	0x0800be2f
 800bbd0:	0800be67 	.word	0x0800be67
 800bbd4:	0800be8b 	.word	0x0800be8b

0800bbd8 <stdio_exit_handler>:
 800bbd8:	4a02      	ldr	r2, [pc, #8]	; (800bbe4 <stdio_exit_handler+0xc>)
 800bbda:	4903      	ldr	r1, [pc, #12]	; (800bbe8 <stdio_exit_handler+0x10>)
 800bbdc:	4803      	ldr	r0, [pc, #12]	; (800bbec <stdio_exit_handler+0x14>)
 800bbde:	f000 b869 	b.w	800bcb4 <_fwalk_sglue>
 800bbe2:	bf00      	nop
 800bbe4:	20000018 	.word	0x20000018
 800bbe8:	0800dc71 	.word	0x0800dc71
 800bbec:	20000024 	.word	0x20000024

0800bbf0 <cleanup_stdio>:
 800bbf0:	6841      	ldr	r1, [r0, #4]
 800bbf2:	4b0c      	ldr	r3, [pc, #48]	; (800bc24 <cleanup_stdio+0x34>)
 800bbf4:	4299      	cmp	r1, r3
 800bbf6:	b510      	push	{r4, lr}
 800bbf8:	4604      	mov	r4, r0
 800bbfa:	d001      	beq.n	800bc00 <cleanup_stdio+0x10>
 800bbfc:	f002 f838 	bl	800dc70 <_fflush_r>
 800bc00:	68a1      	ldr	r1, [r4, #8]
 800bc02:	4b09      	ldr	r3, [pc, #36]	; (800bc28 <cleanup_stdio+0x38>)
 800bc04:	4299      	cmp	r1, r3
 800bc06:	d002      	beq.n	800bc0e <cleanup_stdio+0x1e>
 800bc08:	4620      	mov	r0, r4
 800bc0a:	f002 f831 	bl	800dc70 <_fflush_r>
 800bc0e:	68e1      	ldr	r1, [r4, #12]
 800bc10:	4b06      	ldr	r3, [pc, #24]	; (800bc2c <cleanup_stdio+0x3c>)
 800bc12:	4299      	cmp	r1, r3
 800bc14:	d004      	beq.n	800bc20 <cleanup_stdio+0x30>
 800bc16:	4620      	mov	r0, r4
 800bc18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc1c:	f002 b828 	b.w	800dc70 <_fflush_r>
 800bc20:	bd10      	pop	{r4, pc}
 800bc22:	bf00      	nop
 800bc24:	200026d8 	.word	0x200026d8
 800bc28:	20002740 	.word	0x20002740
 800bc2c:	200027a8 	.word	0x200027a8

0800bc30 <global_stdio_init.part.0>:
 800bc30:	b510      	push	{r4, lr}
 800bc32:	4b0b      	ldr	r3, [pc, #44]	; (800bc60 <global_stdio_init.part.0+0x30>)
 800bc34:	4c0b      	ldr	r4, [pc, #44]	; (800bc64 <global_stdio_init.part.0+0x34>)
 800bc36:	4a0c      	ldr	r2, [pc, #48]	; (800bc68 <global_stdio_init.part.0+0x38>)
 800bc38:	601a      	str	r2, [r3, #0]
 800bc3a:	4620      	mov	r0, r4
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	2104      	movs	r1, #4
 800bc40:	f7ff ffa6 	bl	800bb90 <std>
 800bc44:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800bc48:	2201      	movs	r2, #1
 800bc4a:	2109      	movs	r1, #9
 800bc4c:	f7ff ffa0 	bl	800bb90 <std>
 800bc50:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800bc54:	2202      	movs	r2, #2
 800bc56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc5a:	2112      	movs	r1, #18
 800bc5c:	f7ff bf98 	b.w	800bb90 <std>
 800bc60:	20002810 	.word	0x20002810
 800bc64:	200026d8 	.word	0x200026d8
 800bc68:	0800bbd9 	.word	0x0800bbd9

0800bc6c <__sfp_lock_acquire>:
 800bc6c:	4801      	ldr	r0, [pc, #4]	; (800bc74 <__sfp_lock_acquire+0x8>)
 800bc6e:	f000 ba89 	b.w	800c184 <__retarget_lock_acquire_recursive>
 800bc72:	bf00      	nop
 800bc74:	20002819 	.word	0x20002819

0800bc78 <__sfp_lock_release>:
 800bc78:	4801      	ldr	r0, [pc, #4]	; (800bc80 <__sfp_lock_release+0x8>)
 800bc7a:	f000 ba84 	b.w	800c186 <__retarget_lock_release_recursive>
 800bc7e:	bf00      	nop
 800bc80:	20002819 	.word	0x20002819

0800bc84 <__sinit>:
 800bc84:	b510      	push	{r4, lr}
 800bc86:	4604      	mov	r4, r0
 800bc88:	f7ff fff0 	bl	800bc6c <__sfp_lock_acquire>
 800bc8c:	6a23      	ldr	r3, [r4, #32]
 800bc8e:	b11b      	cbz	r3, 800bc98 <__sinit+0x14>
 800bc90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc94:	f7ff bff0 	b.w	800bc78 <__sfp_lock_release>
 800bc98:	4b04      	ldr	r3, [pc, #16]	; (800bcac <__sinit+0x28>)
 800bc9a:	6223      	str	r3, [r4, #32]
 800bc9c:	4b04      	ldr	r3, [pc, #16]	; (800bcb0 <__sinit+0x2c>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d1f5      	bne.n	800bc90 <__sinit+0xc>
 800bca4:	f7ff ffc4 	bl	800bc30 <global_stdio_init.part.0>
 800bca8:	e7f2      	b.n	800bc90 <__sinit+0xc>
 800bcaa:	bf00      	nop
 800bcac:	0800bbf1 	.word	0x0800bbf1
 800bcb0:	20002810 	.word	0x20002810

0800bcb4 <_fwalk_sglue>:
 800bcb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcb8:	4607      	mov	r7, r0
 800bcba:	4688      	mov	r8, r1
 800bcbc:	4614      	mov	r4, r2
 800bcbe:	2600      	movs	r6, #0
 800bcc0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bcc4:	f1b9 0901 	subs.w	r9, r9, #1
 800bcc8:	d505      	bpl.n	800bcd6 <_fwalk_sglue+0x22>
 800bcca:	6824      	ldr	r4, [r4, #0]
 800bccc:	2c00      	cmp	r4, #0
 800bcce:	d1f7      	bne.n	800bcc0 <_fwalk_sglue+0xc>
 800bcd0:	4630      	mov	r0, r6
 800bcd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcd6:	89ab      	ldrh	r3, [r5, #12]
 800bcd8:	2b01      	cmp	r3, #1
 800bcda:	d907      	bls.n	800bcec <_fwalk_sglue+0x38>
 800bcdc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bce0:	3301      	adds	r3, #1
 800bce2:	d003      	beq.n	800bcec <_fwalk_sglue+0x38>
 800bce4:	4629      	mov	r1, r5
 800bce6:	4638      	mov	r0, r7
 800bce8:	47c0      	blx	r8
 800bcea:	4306      	orrs	r6, r0
 800bcec:	3568      	adds	r5, #104	; 0x68
 800bcee:	e7e9      	b.n	800bcc4 <_fwalk_sglue+0x10>

0800bcf0 <iprintf>:
 800bcf0:	b40f      	push	{r0, r1, r2, r3}
 800bcf2:	b507      	push	{r0, r1, r2, lr}
 800bcf4:	4906      	ldr	r1, [pc, #24]	; (800bd10 <iprintf+0x20>)
 800bcf6:	ab04      	add	r3, sp, #16
 800bcf8:	6808      	ldr	r0, [r1, #0]
 800bcfa:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcfe:	6881      	ldr	r1, [r0, #8]
 800bd00:	9301      	str	r3, [sp, #4]
 800bd02:	f001 fe15 	bl	800d930 <_vfiprintf_r>
 800bd06:	b003      	add	sp, #12
 800bd08:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd0c:	b004      	add	sp, #16
 800bd0e:	4770      	bx	lr
 800bd10:	20000070 	.word	0x20000070

0800bd14 <_puts_r>:
 800bd14:	6a03      	ldr	r3, [r0, #32]
 800bd16:	b570      	push	{r4, r5, r6, lr}
 800bd18:	6884      	ldr	r4, [r0, #8]
 800bd1a:	4605      	mov	r5, r0
 800bd1c:	460e      	mov	r6, r1
 800bd1e:	b90b      	cbnz	r3, 800bd24 <_puts_r+0x10>
 800bd20:	f7ff ffb0 	bl	800bc84 <__sinit>
 800bd24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd26:	07db      	lsls	r3, r3, #31
 800bd28:	d405      	bmi.n	800bd36 <_puts_r+0x22>
 800bd2a:	89a3      	ldrh	r3, [r4, #12]
 800bd2c:	0598      	lsls	r0, r3, #22
 800bd2e:	d402      	bmi.n	800bd36 <_puts_r+0x22>
 800bd30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd32:	f000 fa27 	bl	800c184 <__retarget_lock_acquire_recursive>
 800bd36:	89a3      	ldrh	r3, [r4, #12]
 800bd38:	0719      	lsls	r1, r3, #28
 800bd3a:	d513      	bpl.n	800bd64 <_puts_r+0x50>
 800bd3c:	6923      	ldr	r3, [r4, #16]
 800bd3e:	b18b      	cbz	r3, 800bd64 <_puts_r+0x50>
 800bd40:	3e01      	subs	r6, #1
 800bd42:	68a3      	ldr	r3, [r4, #8]
 800bd44:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bd48:	3b01      	subs	r3, #1
 800bd4a:	60a3      	str	r3, [r4, #8]
 800bd4c:	b9e9      	cbnz	r1, 800bd8a <_puts_r+0x76>
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	da2e      	bge.n	800bdb0 <_puts_r+0x9c>
 800bd52:	4622      	mov	r2, r4
 800bd54:	210a      	movs	r1, #10
 800bd56:	4628      	mov	r0, r5
 800bd58:	f000 f89b 	bl	800be92 <__swbuf_r>
 800bd5c:	3001      	adds	r0, #1
 800bd5e:	d007      	beq.n	800bd70 <_puts_r+0x5c>
 800bd60:	250a      	movs	r5, #10
 800bd62:	e007      	b.n	800bd74 <_puts_r+0x60>
 800bd64:	4621      	mov	r1, r4
 800bd66:	4628      	mov	r0, r5
 800bd68:	f000 f8d0 	bl	800bf0c <__swsetup_r>
 800bd6c:	2800      	cmp	r0, #0
 800bd6e:	d0e7      	beq.n	800bd40 <_puts_r+0x2c>
 800bd70:	f04f 35ff 	mov.w	r5, #4294967295
 800bd74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd76:	07da      	lsls	r2, r3, #31
 800bd78:	d405      	bmi.n	800bd86 <_puts_r+0x72>
 800bd7a:	89a3      	ldrh	r3, [r4, #12]
 800bd7c:	059b      	lsls	r3, r3, #22
 800bd7e:	d402      	bmi.n	800bd86 <_puts_r+0x72>
 800bd80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd82:	f000 fa00 	bl	800c186 <__retarget_lock_release_recursive>
 800bd86:	4628      	mov	r0, r5
 800bd88:	bd70      	pop	{r4, r5, r6, pc}
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	da04      	bge.n	800bd98 <_puts_r+0x84>
 800bd8e:	69a2      	ldr	r2, [r4, #24]
 800bd90:	429a      	cmp	r2, r3
 800bd92:	dc06      	bgt.n	800bda2 <_puts_r+0x8e>
 800bd94:	290a      	cmp	r1, #10
 800bd96:	d004      	beq.n	800bda2 <_puts_r+0x8e>
 800bd98:	6823      	ldr	r3, [r4, #0]
 800bd9a:	1c5a      	adds	r2, r3, #1
 800bd9c:	6022      	str	r2, [r4, #0]
 800bd9e:	7019      	strb	r1, [r3, #0]
 800bda0:	e7cf      	b.n	800bd42 <_puts_r+0x2e>
 800bda2:	4622      	mov	r2, r4
 800bda4:	4628      	mov	r0, r5
 800bda6:	f000 f874 	bl	800be92 <__swbuf_r>
 800bdaa:	3001      	adds	r0, #1
 800bdac:	d1c9      	bne.n	800bd42 <_puts_r+0x2e>
 800bdae:	e7df      	b.n	800bd70 <_puts_r+0x5c>
 800bdb0:	6823      	ldr	r3, [r4, #0]
 800bdb2:	250a      	movs	r5, #10
 800bdb4:	1c5a      	adds	r2, r3, #1
 800bdb6:	6022      	str	r2, [r4, #0]
 800bdb8:	701d      	strb	r5, [r3, #0]
 800bdba:	e7db      	b.n	800bd74 <_puts_r+0x60>

0800bdbc <puts>:
 800bdbc:	4b02      	ldr	r3, [pc, #8]	; (800bdc8 <puts+0xc>)
 800bdbe:	4601      	mov	r1, r0
 800bdc0:	6818      	ldr	r0, [r3, #0]
 800bdc2:	f7ff bfa7 	b.w	800bd14 <_puts_r>
 800bdc6:	bf00      	nop
 800bdc8:	20000070 	.word	0x20000070

0800bdcc <siprintf>:
 800bdcc:	b40e      	push	{r1, r2, r3}
 800bdce:	b500      	push	{lr}
 800bdd0:	b09c      	sub	sp, #112	; 0x70
 800bdd2:	ab1d      	add	r3, sp, #116	; 0x74
 800bdd4:	9002      	str	r0, [sp, #8]
 800bdd6:	9006      	str	r0, [sp, #24]
 800bdd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bddc:	4809      	ldr	r0, [pc, #36]	; (800be04 <siprintf+0x38>)
 800bdde:	9107      	str	r1, [sp, #28]
 800bde0:	9104      	str	r1, [sp, #16]
 800bde2:	4909      	ldr	r1, [pc, #36]	; (800be08 <siprintf+0x3c>)
 800bde4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bde8:	9105      	str	r1, [sp, #20]
 800bdea:	6800      	ldr	r0, [r0, #0]
 800bdec:	9301      	str	r3, [sp, #4]
 800bdee:	a902      	add	r1, sp, #8
 800bdf0:	f001 fc76 	bl	800d6e0 <_svfiprintf_r>
 800bdf4:	9b02      	ldr	r3, [sp, #8]
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	701a      	strb	r2, [r3, #0]
 800bdfa:	b01c      	add	sp, #112	; 0x70
 800bdfc:	f85d eb04 	ldr.w	lr, [sp], #4
 800be00:	b003      	add	sp, #12
 800be02:	4770      	bx	lr
 800be04:	20000070 	.word	0x20000070
 800be08:	ffff0208 	.word	0xffff0208

0800be0c <__sread>:
 800be0c:	b510      	push	{r4, lr}
 800be0e:	460c      	mov	r4, r1
 800be10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be14:	f000 f94a 	bl	800c0ac <_read_r>
 800be18:	2800      	cmp	r0, #0
 800be1a:	bfab      	itete	ge
 800be1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800be1e:	89a3      	ldrhlt	r3, [r4, #12]
 800be20:	181b      	addge	r3, r3, r0
 800be22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800be26:	bfac      	ite	ge
 800be28:	6563      	strge	r3, [r4, #84]	; 0x54
 800be2a:	81a3      	strhlt	r3, [r4, #12]
 800be2c:	bd10      	pop	{r4, pc}

0800be2e <__swrite>:
 800be2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be32:	461f      	mov	r7, r3
 800be34:	898b      	ldrh	r3, [r1, #12]
 800be36:	05db      	lsls	r3, r3, #23
 800be38:	4605      	mov	r5, r0
 800be3a:	460c      	mov	r4, r1
 800be3c:	4616      	mov	r6, r2
 800be3e:	d505      	bpl.n	800be4c <__swrite+0x1e>
 800be40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be44:	2302      	movs	r3, #2
 800be46:	2200      	movs	r2, #0
 800be48:	f000 f91e 	bl	800c088 <_lseek_r>
 800be4c:	89a3      	ldrh	r3, [r4, #12]
 800be4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800be56:	81a3      	strh	r3, [r4, #12]
 800be58:	4632      	mov	r2, r6
 800be5a:	463b      	mov	r3, r7
 800be5c:	4628      	mov	r0, r5
 800be5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be62:	f000 b959 	b.w	800c118 <_write_r>

0800be66 <__sseek>:
 800be66:	b510      	push	{r4, lr}
 800be68:	460c      	mov	r4, r1
 800be6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be6e:	f000 f90b 	bl	800c088 <_lseek_r>
 800be72:	1c43      	adds	r3, r0, #1
 800be74:	89a3      	ldrh	r3, [r4, #12]
 800be76:	bf15      	itete	ne
 800be78:	6560      	strne	r0, [r4, #84]	; 0x54
 800be7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800be7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800be82:	81a3      	strheq	r3, [r4, #12]
 800be84:	bf18      	it	ne
 800be86:	81a3      	strhne	r3, [r4, #12]
 800be88:	bd10      	pop	{r4, pc}

0800be8a <__sclose>:
 800be8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be8e:	f000 b8eb 	b.w	800c068 <_close_r>

0800be92 <__swbuf_r>:
 800be92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be94:	460e      	mov	r6, r1
 800be96:	4614      	mov	r4, r2
 800be98:	4605      	mov	r5, r0
 800be9a:	b118      	cbz	r0, 800bea4 <__swbuf_r+0x12>
 800be9c:	6a03      	ldr	r3, [r0, #32]
 800be9e:	b90b      	cbnz	r3, 800bea4 <__swbuf_r+0x12>
 800bea0:	f7ff fef0 	bl	800bc84 <__sinit>
 800bea4:	69a3      	ldr	r3, [r4, #24]
 800bea6:	60a3      	str	r3, [r4, #8]
 800bea8:	89a3      	ldrh	r3, [r4, #12]
 800beaa:	071a      	lsls	r2, r3, #28
 800beac:	d525      	bpl.n	800befa <__swbuf_r+0x68>
 800beae:	6923      	ldr	r3, [r4, #16]
 800beb0:	b31b      	cbz	r3, 800befa <__swbuf_r+0x68>
 800beb2:	6823      	ldr	r3, [r4, #0]
 800beb4:	6922      	ldr	r2, [r4, #16]
 800beb6:	1a98      	subs	r0, r3, r2
 800beb8:	6963      	ldr	r3, [r4, #20]
 800beba:	b2f6      	uxtb	r6, r6
 800bebc:	4283      	cmp	r3, r0
 800bebe:	4637      	mov	r7, r6
 800bec0:	dc04      	bgt.n	800becc <__swbuf_r+0x3a>
 800bec2:	4621      	mov	r1, r4
 800bec4:	4628      	mov	r0, r5
 800bec6:	f001 fed3 	bl	800dc70 <_fflush_r>
 800beca:	b9e0      	cbnz	r0, 800bf06 <__swbuf_r+0x74>
 800becc:	68a3      	ldr	r3, [r4, #8]
 800bece:	3b01      	subs	r3, #1
 800bed0:	60a3      	str	r3, [r4, #8]
 800bed2:	6823      	ldr	r3, [r4, #0]
 800bed4:	1c5a      	adds	r2, r3, #1
 800bed6:	6022      	str	r2, [r4, #0]
 800bed8:	701e      	strb	r6, [r3, #0]
 800beda:	6962      	ldr	r2, [r4, #20]
 800bedc:	1c43      	adds	r3, r0, #1
 800bede:	429a      	cmp	r2, r3
 800bee0:	d004      	beq.n	800beec <__swbuf_r+0x5a>
 800bee2:	89a3      	ldrh	r3, [r4, #12]
 800bee4:	07db      	lsls	r3, r3, #31
 800bee6:	d506      	bpl.n	800bef6 <__swbuf_r+0x64>
 800bee8:	2e0a      	cmp	r6, #10
 800beea:	d104      	bne.n	800bef6 <__swbuf_r+0x64>
 800beec:	4621      	mov	r1, r4
 800beee:	4628      	mov	r0, r5
 800bef0:	f001 febe 	bl	800dc70 <_fflush_r>
 800bef4:	b938      	cbnz	r0, 800bf06 <__swbuf_r+0x74>
 800bef6:	4638      	mov	r0, r7
 800bef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800befa:	4621      	mov	r1, r4
 800befc:	4628      	mov	r0, r5
 800befe:	f000 f805 	bl	800bf0c <__swsetup_r>
 800bf02:	2800      	cmp	r0, #0
 800bf04:	d0d5      	beq.n	800beb2 <__swbuf_r+0x20>
 800bf06:	f04f 37ff 	mov.w	r7, #4294967295
 800bf0a:	e7f4      	b.n	800bef6 <__swbuf_r+0x64>

0800bf0c <__swsetup_r>:
 800bf0c:	b538      	push	{r3, r4, r5, lr}
 800bf0e:	4b2a      	ldr	r3, [pc, #168]	; (800bfb8 <__swsetup_r+0xac>)
 800bf10:	4605      	mov	r5, r0
 800bf12:	6818      	ldr	r0, [r3, #0]
 800bf14:	460c      	mov	r4, r1
 800bf16:	b118      	cbz	r0, 800bf20 <__swsetup_r+0x14>
 800bf18:	6a03      	ldr	r3, [r0, #32]
 800bf1a:	b90b      	cbnz	r3, 800bf20 <__swsetup_r+0x14>
 800bf1c:	f7ff feb2 	bl	800bc84 <__sinit>
 800bf20:	89a3      	ldrh	r3, [r4, #12]
 800bf22:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf26:	0718      	lsls	r0, r3, #28
 800bf28:	d422      	bmi.n	800bf70 <__swsetup_r+0x64>
 800bf2a:	06d9      	lsls	r1, r3, #27
 800bf2c:	d407      	bmi.n	800bf3e <__swsetup_r+0x32>
 800bf2e:	2309      	movs	r3, #9
 800bf30:	602b      	str	r3, [r5, #0]
 800bf32:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bf36:	81a3      	strh	r3, [r4, #12]
 800bf38:	f04f 30ff 	mov.w	r0, #4294967295
 800bf3c:	e034      	b.n	800bfa8 <__swsetup_r+0x9c>
 800bf3e:	0758      	lsls	r0, r3, #29
 800bf40:	d512      	bpl.n	800bf68 <__swsetup_r+0x5c>
 800bf42:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf44:	b141      	cbz	r1, 800bf58 <__swsetup_r+0x4c>
 800bf46:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf4a:	4299      	cmp	r1, r3
 800bf4c:	d002      	beq.n	800bf54 <__swsetup_r+0x48>
 800bf4e:	4628      	mov	r0, r5
 800bf50:	f000 ffa4 	bl	800ce9c <_free_r>
 800bf54:	2300      	movs	r3, #0
 800bf56:	6363      	str	r3, [r4, #52]	; 0x34
 800bf58:	89a3      	ldrh	r3, [r4, #12]
 800bf5a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bf5e:	81a3      	strh	r3, [r4, #12]
 800bf60:	2300      	movs	r3, #0
 800bf62:	6063      	str	r3, [r4, #4]
 800bf64:	6923      	ldr	r3, [r4, #16]
 800bf66:	6023      	str	r3, [r4, #0]
 800bf68:	89a3      	ldrh	r3, [r4, #12]
 800bf6a:	f043 0308 	orr.w	r3, r3, #8
 800bf6e:	81a3      	strh	r3, [r4, #12]
 800bf70:	6923      	ldr	r3, [r4, #16]
 800bf72:	b94b      	cbnz	r3, 800bf88 <__swsetup_r+0x7c>
 800bf74:	89a3      	ldrh	r3, [r4, #12]
 800bf76:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bf7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf7e:	d003      	beq.n	800bf88 <__swsetup_r+0x7c>
 800bf80:	4621      	mov	r1, r4
 800bf82:	4628      	mov	r0, r5
 800bf84:	f001 fec2 	bl	800dd0c <__smakebuf_r>
 800bf88:	89a0      	ldrh	r0, [r4, #12]
 800bf8a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf8e:	f010 0301 	ands.w	r3, r0, #1
 800bf92:	d00a      	beq.n	800bfaa <__swsetup_r+0x9e>
 800bf94:	2300      	movs	r3, #0
 800bf96:	60a3      	str	r3, [r4, #8]
 800bf98:	6963      	ldr	r3, [r4, #20]
 800bf9a:	425b      	negs	r3, r3
 800bf9c:	61a3      	str	r3, [r4, #24]
 800bf9e:	6923      	ldr	r3, [r4, #16]
 800bfa0:	b943      	cbnz	r3, 800bfb4 <__swsetup_r+0xa8>
 800bfa2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bfa6:	d1c4      	bne.n	800bf32 <__swsetup_r+0x26>
 800bfa8:	bd38      	pop	{r3, r4, r5, pc}
 800bfaa:	0781      	lsls	r1, r0, #30
 800bfac:	bf58      	it	pl
 800bfae:	6963      	ldrpl	r3, [r4, #20]
 800bfb0:	60a3      	str	r3, [r4, #8]
 800bfb2:	e7f4      	b.n	800bf9e <__swsetup_r+0x92>
 800bfb4:	2000      	movs	r0, #0
 800bfb6:	e7f7      	b.n	800bfa8 <__swsetup_r+0x9c>
 800bfb8:	20000070 	.word	0x20000070

0800bfbc <memmove>:
 800bfbc:	4288      	cmp	r0, r1
 800bfbe:	b510      	push	{r4, lr}
 800bfc0:	eb01 0402 	add.w	r4, r1, r2
 800bfc4:	d902      	bls.n	800bfcc <memmove+0x10>
 800bfc6:	4284      	cmp	r4, r0
 800bfc8:	4623      	mov	r3, r4
 800bfca:	d807      	bhi.n	800bfdc <memmove+0x20>
 800bfcc:	1e43      	subs	r3, r0, #1
 800bfce:	42a1      	cmp	r1, r4
 800bfd0:	d008      	beq.n	800bfe4 <memmove+0x28>
 800bfd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bfd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bfda:	e7f8      	b.n	800bfce <memmove+0x12>
 800bfdc:	4402      	add	r2, r0
 800bfde:	4601      	mov	r1, r0
 800bfe0:	428a      	cmp	r2, r1
 800bfe2:	d100      	bne.n	800bfe6 <memmove+0x2a>
 800bfe4:	bd10      	pop	{r4, pc}
 800bfe6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bfea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bfee:	e7f7      	b.n	800bfe0 <memmove+0x24>

0800bff0 <memset>:
 800bff0:	4402      	add	r2, r0
 800bff2:	4603      	mov	r3, r0
 800bff4:	4293      	cmp	r3, r2
 800bff6:	d100      	bne.n	800bffa <memset+0xa>
 800bff8:	4770      	bx	lr
 800bffa:	f803 1b01 	strb.w	r1, [r3], #1
 800bffe:	e7f9      	b.n	800bff4 <memset+0x4>

0800c000 <_raise_r>:
 800c000:	291f      	cmp	r1, #31
 800c002:	b538      	push	{r3, r4, r5, lr}
 800c004:	4604      	mov	r4, r0
 800c006:	460d      	mov	r5, r1
 800c008:	d904      	bls.n	800c014 <_raise_r+0x14>
 800c00a:	2316      	movs	r3, #22
 800c00c:	6003      	str	r3, [r0, #0]
 800c00e:	f04f 30ff 	mov.w	r0, #4294967295
 800c012:	bd38      	pop	{r3, r4, r5, pc}
 800c014:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c016:	b112      	cbz	r2, 800c01e <_raise_r+0x1e>
 800c018:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c01c:	b94b      	cbnz	r3, 800c032 <_raise_r+0x32>
 800c01e:	4620      	mov	r0, r4
 800c020:	f000 f868 	bl	800c0f4 <_getpid_r>
 800c024:	462a      	mov	r2, r5
 800c026:	4601      	mov	r1, r0
 800c028:	4620      	mov	r0, r4
 800c02a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c02e:	f000 b84f 	b.w	800c0d0 <_kill_r>
 800c032:	2b01      	cmp	r3, #1
 800c034:	d00a      	beq.n	800c04c <_raise_r+0x4c>
 800c036:	1c59      	adds	r1, r3, #1
 800c038:	d103      	bne.n	800c042 <_raise_r+0x42>
 800c03a:	2316      	movs	r3, #22
 800c03c:	6003      	str	r3, [r0, #0]
 800c03e:	2001      	movs	r0, #1
 800c040:	e7e7      	b.n	800c012 <_raise_r+0x12>
 800c042:	2400      	movs	r4, #0
 800c044:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c048:	4628      	mov	r0, r5
 800c04a:	4798      	blx	r3
 800c04c:	2000      	movs	r0, #0
 800c04e:	e7e0      	b.n	800c012 <_raise_r+0x12>

0800c050 <raise>:
 800c050:	4b02      	ldr	r3, [pc, #8]	; (800c05c <raise+0xc>)
 800c052:	4601      	mov	r1, r0
 800c054:	6818      	ldr	r0, [r3, #0]
 800c056:	f7ff bfd3 	b.w	800c000 <_raise_r>
 800c05a:	bf00      	nop
 800c05c:	20000070 	.word	0x20000070

0800c060 <_localeconv_r>:
 800c060:	4800      	ldr	r0, [pc, #0]	; (800c064 <_localeconv_r+0x4>)
 800c062:	4770      	bx	lr
 800c064:	20000164 	.word	0x20000164

0800c068 <_close_r>:
 800c068:	b538      	push	{r3, r4, r5, lr}
 800c06a:	4d06      	ldr	r5, [pc, #24]	; (800c084 <_close_r+0x1c>)
 800c06c:	2300      	movs	r3, #0
 800c06e:	4604      	mov	r4, r0
 800c070:	4608      	mov	r0, r1
 800c072:	602b      	str	r3, [r5, #0]
 800c074:	f001 ff44 	bl	800df00 <_close>
 800c078:	1c43      	adds	r3, r0, #1
 800c07a:	d102      	bne.n	800c082 <_close_r+0x1a>
 800c07c:	682b      	ldr	r3, [r5, #0]
 800c07e:	b103      	cbz	r3, 800c082 <_close_r+0x1a>
 800c080:	6023      	str	r3, [r4, #0]
 800c082:	bd38      	pop	{r3, r4, r5, pc}
 800c084:	20002814 	.word	0x20002814

0800c088 <_lseek_r>:
 800c088:	b538      	push	{r3, r4, r5, lr}
 800c08a:	4d07      	ldr	r5, [pc, #28]	; (800c0a8 <_lseek_r+0x20>)
 800c08c:	4604      	mov	r4, r0
 800c08e:	4608      	mov	r0, r1
 800c090:	4611      	mov	r1, r2
 800c092:	2200      	movs	r2, #0
 800c094:	602a      	str	r2, [r5, #0]
 800c096:	461a      	mov	r2, r3
 800c098:	f001 ff5a 	bl	800df50 <_lseek>
 800c09c:	1c43      	adds	r3, r0, #1
 800c09e:	d102      	bne.n	800c0a6 <_lseek_r+0x1e>
 800c0a0:	682b      	ldr	r3, [r5, #0]
 800c0a2:	b103      	cbz	r3, 800c0a6 <_lseek_r+0x1e>
 800c0a4:	6023      	str	r3, [r4, #0]
 800c0a6:	bd38      	pop	{r3, r4, r5, pc}
 800c0a8:	20002814 	.word	0x20002814

0800c0ac <_read_r>:
 800c0ac:	b538      	push	{r3, r4, r5, lr}
 800c0ae:	4d07      	ldr	r5, [pc, #28]	; (800c0cc <_read_r+0x20>)
 800c0b0:	4604      	mov	r4, r0
 800c0b2:	4608      	mov	r0, r1
 800c0b4:	4611      	mov	r1, r2
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	602a      	str	r2, [r5, #0]
 800c0ba:	461a      	mov	r2, r3
 800c0bc:	f7f7 fea4 	bl	8003e08 <_read>
 800c0c0:	1c43      	adds	r3, r0, #1
 800c0c2:	d102      	bne.n	800c0ca <_read_r+0x1e>
 800c0c4:	682b      	ldr	r3, [r5, #0]
 800c0c6:	b103      	cbz	r3, 800c0ca <_read_r+0x1e>
 800c0c8:	6023      	str	r3, [r4, #0]
 800c0ca:	bd38      	pop	{r3, r4, r5, pc}
 800c0cc:	20002814 	.word	0x20002814

0800c0d0 <_kill_r>:
 800c0d0:	b538      	push	{r3, r4, r5, lr}
 800c0d2:	4d07      	ldr	r5, [pc, #28]	; (800c0f0 <_kill_r+0x20>)
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	4604      	mov	r4, r0
 800c0d8:	4608      	mov	r0, r1
 800c0da:	4611      	mov	r1, r2
 800c0dc:	602b      	str	r3, [r5, #0]
 800c0de:	f001 ff2f 	bl	800df40 <_kill>
 800c0e2:	1c43      	adds	r3, r0, #1
 800c0e4:	d102      	bne.n	800c0ec <_kill_r+0x1c>
 800c0e6:	682b      	ldr	r3, [r5, #0]
 800c0e8:	b103      	cbz	r3, 800c0ec <_kill_r+0x1c>
 800c0ea:	6023      	str	r3, [r4, #0]
 800c0ec:	bd38      	pop	{r3, r4, r5, pc}
 800c0ee:	bf00      	nop
 800c0f0:	20002814 	.word	0x20002814

0800c0f4 <_getpid_r>:
 800c0f4:	f001 bf14 	b.w	800df20 <_getpid>

0800c0f8 <_sbrk_r>:
 800c0f8:	b538      	push	{r3, r4, r5, lr}
 800c0fa:	4d06      	ldr	r5, [pc, #24]	; (800c114 <_sbrk_r+0x1c>)
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	4604      	mov	r4, r0
 800c100:	4608      	mov	r0, r1
 800c102:	602b      	str	r3, [r5, #0]
 800c104:	f001 ff2c 	bl	800df60 <_sbrk>
 800c108:	1c43      	adds	r3, r0, #1
 800c10a:	d102      	bne.n	800c112 <_sbrk_r+0x1a>
 800c10c:	682b      	ldr	r3, [r5, #0]
 800c10e:	b103      	cbz	r3, 800c112 <_sbrk_r+0x1a>
 800c110:	6023      	str	r3, [r4, #0]
 800c112:	bd38      	pop	{r3, r4, r5, pc}
 800c114:	20002814 	.word	0x20002814

0800c118 <_write_r>:
 800c118:	b538      	push	{r3, r4, r5, lr}
 800c11a:	4d07      	ldr	r5, [pc, #28]	; (800c138 <_write_r+0x20>)
 800c11c:	4604      	mov	r4, r0
 800c11e:	4608      	mov	r0, r1
 800c120:	4611      	mov	r1, r2
 800c122:	2200      	movs	r2, #0
 800c124:	602a      	str	r2, [r5, #0]
 800c126:	461a      	mov	r2, r3
 800c128:	f7f7 fe8a 	bl	8003e40 <_write>
 800c12c:	1c43      	adds	r3, r0, #1
 800c12e:	d102      	bne.n	800c136 <_write_r+0x1e>
 800c130:	682b      	ldr	r3, [r5, #0]
 800c132:	b103      	cbz	r3, 800c136 <_write_r+0x1e>
 800c134:	6023      	str	r3, [r4, #0]
 800c136:	bd38      	pop	{r3, r4, r5, pc}
 800c138:	20002814 	.word	0x20002814

0800c13c <__libc_init_array>:
 800c13c:	b570      	push	{r4, r5, r6, lr}
 800c13e:	4d0d      	ldr	r5, [pc, #52]	; (800c174 <__libc_init_array+0x38>)
 800c140:	4c0d      	ldr	r4, [pc, #52]	; (800c178 <__libc_init_array+0x3c>)
 800c142:	1b64      	subs	r4, r4, r5
 800c144:	10a4      	asrs	r4, r4, #2
 800c146:	2600      	movs	r6, #0
 800c148:	42a6      	cmp	r6, r4
 800c14a:	d109      	bne.n	800c160 <__libc_init_array+0x24>
 800c14c:	4d0b      	ldr	r5, [pc, #44]	; (800c17c <__libc_init_array+0x40>)
 800c14e:	4c0c      	ldr	r4, [pc, #48]	; (800c180 <__libc_init_array+0x44>)
 800c150:	f001 ff16 	bl	800df80 <_init>
 800c154:	1b64      	subs	r4, r4, r5
 800c156:	10a4      	asrs	r4, r4, #2
 800c158:	2600      	movs	r6, #0
 800c15a:	42a6      	cmp	r6, r4
 800c15c:	d105      	bne.n	800c16a <__libc_init_array+0x2e>
 800c15e:	bd70      	pop	{r4, r5, r6, pc}
 800c160:	f855 3b04 	ldr.w	r3, [r5], #4
 800c164:	4798      	blx	r3
 800c166:	3601      	adds	r6, #1
 800c168:	e7ee      	b.n	800c148 <__libc_init_array+0xc>
 800c16a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c16e:	4798      	blx	r3
 800c170:	3601      	adds	r6, #1
 800c172:	e7f2      	b.n	800c15a <__libc_init_array+0x1e>
 800c174:	0800eaf4 	.word	0x0800eaf4
 800c178:	0800eaf4 	.word	0x0800eaf4
 800c17c:	0800eaf4 	.word	0x0800eaf4
 800c180:	0800eafc 	.word	0x0800eafc

0800c184 <__retarget_lock_acquire_recursive>:
 800c184:	4770      	bx	lr

0800c186 <__retarget_lock_release_recursive>:
 800c186:	4770      	bx	lr

0800c188 <memcpy>:
 800c188:	440a      	add	r2, r1
 800c18a:	4291      	cmp	r1, r2
 800c18c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c190:	d100      	bne.n	800c194 <memcpy+0xc>
 800c192:	4770      	bx	lr
 800c194:	b510      	push	{r4, lr}
 800c196:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c19a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c19e:	4291      	cmp	r1, r2
 800c1a0:	d1f9      	bne.n	800c196 <memcpy+0xe>
 800c1a2:	bd10      	pop	{r4, pc}

0800c1a4 <quorem>:
 800c1a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1a8:	6903      	ldr	r3, [r0, #16]
 800c1aa:	690c      	ldr	r4, [r1, #16]
 800c1ac:	42a3      	cmp	r3, r4
 800c1ae:	4607      	mov	r7, r0
 800c1b0:	db7e      	blt.n	800c2b0 <quorem+0x10c>
 800c1b2:	3c01      	subs	r4, #1
 800c1b4:	f101 0814 	add.w	r8, r1, #20
 800c1b8:	f100 0514 	add.w	r5, r0, #20
 800c1bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c1c0:	9301      	str	r3, [sp, #4]
 800c1c2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c1c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c1ca:	3301      	adds	r3, #1
 800c1cc:	429a      	cmp	r2, r3
 800c1ce:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c1d2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c1d6:	fbb2 f6f3 	udiv	r6, r2, r3
 800c1da:	d331      	bcc.n	800c240 <quorem+0x9c>
 800c1dc:	f04f 0e00 	mov.w	lr, #0
 800c1e0:	4640      	mov	r0, r8
 800c1e2:	46ac      	mov	ip, r5
 800c1e4:	46f2      	mov	sl, lr
 800c1e6:	f850 2b04 	ldr.w	r2, [r0], #4
 800c1ea:	b293      	uxth	r3, r2
 800c1ec:	fb06 e303 	mla	r3, r6, r3, lr
 800c1f0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c1f4:	0c1a      	lsrs	r2, r3, #16
 800c1f6:	b29b      	uxth	r3, r3
 800c1f8:	ebaa 0303 	sub.w	r3, sl, r3
 800c1fc:	f8dc a000 	ldr.w	sl, [ip]
 800c200:	fa13 f38a 	uxtah	r3, r3, sl
 800c204:	fb06 220e 	mla	r2, r6, lr, r2
 800c208:	9300      	str	r3, [sp, #0]
 800c20a:	9b00      	ldr	r3, [sp, #0]
 800c20c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c210:	b292      	uxth	r2, r2
 800c212:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c216:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c21a:	f8bd 3000 	ldrh.w	r3, [sp]
 800c21e:	4581      	cmp	r9, r0
 800c220:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c224:	f84c 3b04 	str.w	r3, [ip], #4
 800c228:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c22c:	d2db      	bcs.n	800c1e6 <quorem+0x42>
 800c22e:	f855 300b 	ldr.w	r3, [r5, fp]
 800c232:	b92b      	cbnz	r3, 800c240 <quorem+0x9c>
 800c234:	9b01      	ldr	r3, [sp, #4]
 800c236:	3b04      	subs	r3, #4
 800c238:	429d      	cmp	r5, r3
 800c23a:	461a      	mov	r2, r3
 800c23c:	d32c      	bcc.n	800c298 <quorem+0xf4>
 800c23e:	613c      	str	r4, [r7, #16]
 800c240:	4638      	mov	r0, r7
 800c242:	f001 f8f3 	bl	800d42c <__mcmp>
 800c246:	2800      	cmp	r0, #0
 800c248:	db22      	blt.n	800c290 <quorem+0xec>
 800c24a:	3601      	adds	r6, #1
 800c24c:	4629      	mov	r1, r5
 800c24e:	2000      	movs	r0, #0
 800c250:	f858 2b04 	ldr.w	r2, [r8], #4
 800c254:	f8d1 c000 	ldr.w	ip, [r1]
 800c258:	b293      	uxth	r3, r2
 800c25a:	1ac3      	subs	r3, r0, r3
 800c25c:	0c12      	lsrs	r2, r2, #16
 800c25e:	fa13 f38c 	uxtah	r3, r3, ip
 800c262:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c266:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c26a:	b29b      	uxth	r3, r3
 800c26c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c270:	45c1      	cmp	r9, r8
 800c272:	f841 3b04 	str.w	r3, [r1], #4
 800c276:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c27a:	d2e9      	bcs.n	800c250 <quorem+0xac>
 800c27c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c280:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c284:	b922      	cbnz	r2, 800c290 <quorem+0xec>
 800c286:	3b04      	subs	r3, #4
 800c288:	429d      	cmp	r5, r3
 800c28a:	461a      	mov	r2, r3
 800c28c:	d30a      	bcc.n	800c2a4 <quorem+0x100>
 800c28e:	613c      	str	r4, [r7, #16]
 800c290:	4630      	mov	r0, r6
 800c292:	b003      	add	sp, #12
 800c294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c298:	6812      	ldr	r2, [r2, #0]
 800c29a:	3b04      	subs	r3, #4
 800c29c:	2a00      	cmp	r2, #0
 800c29e:	d1ce      	bne.n	800c23e <quorem+0x9a>
 800c2a0:	3c01      	subs	r4, #1
 800c2a2:	e7c9      	b.n	800c238 <quorem+0x94>
 800c2a4:	6812      	ldr	r2, [r2, #0]
 800c2a6:	3b04      	subs	r3, #4
 800c2a8:	2a00      	cmp	r2, #0
 800c2aa:	d1f0      	bne.n	800c28e <quorem+0xea>
 800c2ac:	3c01      	subs	r4, #1
 800c2ae:	e7eb      	b.n	800c288 <quorem+0xe4>
 800c2b0:	2000      	movs	r0, #0
 800c2b2:	e7ee      	b.n	800c292 <quorem+0xee>
 800c2b4:	0000      	movs	r0, r0
	...

0800c2b8 <_dtoa_r>:
 800c2b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2bc:	ed2d 8b04 	vpush	{d8-d9}
 800c2c0:	69c5      	ldr	r5, [r0, #28]
 800c2c2:	b093      	sub	sp, #76	; 0x4c
 800c2c4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c2c8:	ec57 6b10 	vmov	r6, r7, d0
 800c2cc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c2d0:	9107      	str	r1, [sp, #28]
 800c2d2:	4604      	mov	r4, r0
 800c2d4:	920a      	str	r2, [sp, #40]	; 0x28
 800c2d6:	930d      	str	r3, [sp, #52]	; 0x34
 800c2d8:	b975      	cbnz	r5, 800c2f8 <_dtoa_r+0x40>
 800c2da:	2010      	movs	r0, #16
 800c2dc:	f7fe ff36 	bl	800b14c <malloc>
 800c2e0:	4602      	mov	r2, r0
 800c2e2:	61e0      	str	r0, [r4, #28]
 800c2e4:	b920      	cbnz	r0, 800c2f0 <_dtoa_r+0x38>
 800c2e6:	4bae      	ldr	r3, [pc, #696]	; (800c5a0 <_dtoa_r+0x2e8>)
 800c2e8:	21ef      	movs	r1, #239	; 0xef
 800c2ea:	48ae      	ldr	r0, [pc, #696]	; (800c5a4 <_dtoa_r+0x2ec>)
 800c2ec:	f001 fd6c 	bl	800ddc8 <__assert_func>
 800c2f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c2f4:	6005      	str	r5, [r0, #0]
 800c2f6:	60c5      	str	r5, [r0, #12]
 800c2f8:	69e3      	ldr	r3, [r4, #28]
 800c2fa:	6819      	ldr	r1, [r3, #0]
 800c2fc:	b151      	cbz	r1, 800c314 <_dtoa_r+0x5c>
 800c2fe:	685a      	ldr	r2, [r3, #4]
 800c300:	604a      	str	r2, [r1, #4]
 800c302:	2301      	movs	r3, #1
 800c304:	4093      	lsls	r3, r2
 800c306:	608b      	str	r3, [r1, #8]
 800c308:	4620      	mov	r0, r4
 800c30a:	f000 fe53 	bl	800cfb4 <_Bfree>
 800c30e:	69e3      	ldr	r3, [r4, #28]
 800c310:	2200      	movs	r2, #0
 800c312:	601a      	str	r2, [r3, #0]
 800c314:	1e3b      	subs	r3, r7, #0
 800c316:	bfbb      	ittet	lt
 800c318:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c31c:	9303      	strlt	r3, [sp, #12]
 800c31e:	2300      	movge	r3, #0
 800c320:	2201      	movlt	r2, #1
 800c322:	bfac      	ite	ge
 800c324:	f8c8 3000 	strge.w	r3, [r8]
 800c328:	f8c8 2000 	strlt.w	r2, [r8]
 800c32c:	4b9e      	ldr	r3, [pc, #632]	; (800c5a8 <_dtoa_r+0x2f0>)
 800c32e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c332:	ea33 0308 	bics.w	r3, r3, r8
 800c336:	d11b      	bne.n	800c370 <_dtoa_r+0xb8>
 800c338:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c33a:	f242 730f 	movw	r3, #9999	; 0x270f
 800c33e:	6013      	str	r3, [r2, #0]
 800c340:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c344:	4333      	orrs	r3, r6
 800c346:	f000 8593 	beq.w	800ce70 <_dtoa_r+0xbb8>
 800c34a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c34c:	b963      	cbnz	r3, 800c368 <_dtoa_r+0xb0>
 800c34e:	4b97      	ldr	r3, [pc, #604]	; (800c5ac <_dtoa_r+0x2f4>)
 800c350:	e027      	b.n	800c3a2 <_dtoa_r+0xea>
 800c352:	4b97      	ldr	r3, [pc, #604]	; (800c5b0 <_dtoa_r+0x2f8>)
 800c354:	9300      	str	r3, [sp, #0]
 800c356:	3308      	adds	r3, #8
 800c358:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c35a:	6013      	str	r3, [r2, #0]
 800c35c:	9800      	ldr	r0, [sp, #0]
 800c35e:	b013      	add	sp, #76	; 0x4c
 800c360:	ecbd 8b04 	vpop	{d8-d9}
 800c364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c368:	4b90      	ldr	r3, [pc, #576]	; (800c5ac <_dtoa_r+0x2f4>)
 800c36a:	9300      	str	r3, [sp, #0]
 800c36c:	3303      	adds	r3, #3
 800c36e:	e7f3      	b.n	800c358 <_dtoa_r+0xa0>
 800c370:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c374:	2200      	movs	r2, #0
 800c376:	ec51 0b17 	vmov	r0, r1, d7
 800c37a:	eeb0 8a47 	vmov.f32	s16, s14
 800c37e:	eef0 8a67 	vmov.f32	s17, s15
 800c382:	2300      	movs	r3, #0
 800c384:	f7f4 fba0 	bl	8000ac8 <__aeabi_dcmpeq>
 800c388:	4681      	mov	r9, r0
 800c38a:	b160      	cbz	r0, 800c3a6 <_dtoa_r+0xee>
 800c38c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c38e:	2301      	movs	r3, #1
 800c390:	6013      	str	r3, [r2, #0]
 800c392:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c394:	2b00      	cmp	r3, #0
 800c396:	f000 8568 	beq.w	800ce6a <_dtoa_r+0xbb2>
 800c39a:	4b86      	ldr	r3, [pc, #536]	; (800c5b4 <_dtoa_r+0x2fc>)
 800c39c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c39e:	6013      	str	r3, [r2, #0]
 800c3a0:	3b01      	subs	r3, #1
 800c3a2:	9300      	str	r3, [sp, #0]
 800c3a4:	e7da      	b.n	800c35c <_dtoa_r+0xa4>
 800c3a6:	aa10      	add	r2, sp, #64	; 0x40
 800c3a8:	a911      	add	r1, sp, #68	; 0x44
 800c3aa:	4620      	mov	r0, r4
 800c3ac:	eeb0 0a48 	vmov.f32	s0, s16
 800c3b0:	eef0 0a68 	vmov.f32	s1, s17
 800c3b4:	f001 f8e0 	bl	800d578 <__d2b>
 800c3b8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c3bc:	4682      	mov	sl, r0
 800c3be:	2d00      	cmp	r5, #0
 800c3c0:	d07f      	beq.n	800c4c2 <_dtoa_r+0x20a>
 800c3c2:	ee18 3a90 	vmov	r3, s17
 800c3c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c3ca:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c3ce:	ec51 0b18 	vmov	r0, r1, d8
 800c3d2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c3d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c3da:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c3de:	4619      	mov	r1, r3
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	4b75      	ldr	r3, [pc, #468]	; (800c5b8 <_dtoa_r+0x300>)
 800c3e4:	f7f3 ff50 	bl	8000288 <__aeabi_dsub>
 800c3e8:	a367      	add	r3, pc, #412	; (adr r3, 800c588 <_dtoa_r+0x2d0>)
 800c3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ee:	f7f4 f903 	bl	80005f8 <__aeabi_dmul>
 800c3f2:	a367      	add	r3, pc, #412	; (adr r3, 800c590 <_dtoa_r+0x2d8>)
 800c3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3f8:	f7f3 ff48 	bl	800028c <__adddf3>
 800c3fc:	4606      	mov	r6, r0
 800c3fe:	4628      	mov	r0, r5
 800c400:	460f      	mov	r7, r1
 800c402:	f7f4 f88f 	bl	8000524 <__aeabi_i2d>
 800c406:	a364      	add	r3, pc, #400	; (adr r3, 800c598 <_dtoa_r+0x2e0>)
 800c408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c40c:	f7f4 f8f4 	bl	80005f8 <__aeabi_dmul>
 800c410:	4602      	mov	r2, r0
 800c412:	460b      	mov	r3, r1
 800c414:	4630      	mov	r0, r6
 800c416:	4639      	mov	r1, r7
 800c418:	f7f3 ff38 	bl	800028c <__adddf3>
 800c41c:	4606      	mov	r6, r0
 800c41e:	460f      	mov	r7, r1
 800c420:	f7f4 fb9a 	bl	8000b58 <__aeabi_d2iz>
 800c424:	2200      	movs	r2, #0
 800c426:	4683      	mov	fp, r0
 800c428:	2300      	movs	r3, #0
 800c42a:	4630      	mov	r0, r6
 800c42c:	4639      	mov	r1, r7
 800c42e:	f7f4 fb55 	bl	8000adc <__aeabi_dcmplt>
 800c432:	b148      	cbz	r0, 800c448 <_dtoa_r+0x190>
 800c434:	4658      	mov	r0, fp
 800c436:	f7f4 f875 	bl	8000524 <__aeabi_i2d>
 800c43a:	4632      	mov	r2, r6
 800c43c:	463b      	mov	r3, r7
 800c43e:	f7f4 fb43 	bl	8000ac8 <__aeabi_dcmpeq>
 800c442:	b908      	cbnz	r0, 800c448 <_dtoa_r+0x190>
 800c444:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c448:	f1bb 0f16 	cmp.w	fp, #22
 800c44c:	d857      	bhi.n	800c4fe <_dtoa_r+0x246>
 800c44e:	4b5b      	ldr	r3, [pc, #364]	; (800c5bc <_dtoa_r+0x304>)
 800c450:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c454:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c458:	ec51 0b18 	vmov	r0, r1, d8
 800c45c:	f7f4 fb3e 	bl	8000adc <__aeabi_dcmplt>
 800c460:	2800      	cmp	r0, #0
 800c462:	d04e      	beq.n	800c502 <_dtoa_r+0x24a>
 800c464:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c468:	2300      	movs	r3, #0
 800c46a:	930c      	str	r3, [sp, #48]	; 0x30
 800c46c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c46e:	1b5b      	subs	r3, r3, r5
 800c470:	1e5a      	subs	r2, r3, #1
 800c472:	bf45      	ittet	mi
 800c474:	f1c3 0301 	rsbmi	r3, r3, #1
 800c478:	9305      	strmi	r3, [sp, #20]
 800c47a:	2300      	movpl	r3, #0
 800c47c:	2300      	movmi	r3, #0
 800c47e:	9206      	str	r2, [sp, #24]
 800c480:	bf54      	ite	pl
 800c482:	9305      	strpl	r3, [sp, #20]
 800c484:	9306      	strmi	r3, [sp, #24]
 800c486:	f1bb 0f00 	cmp.w	fp, #0
 800c48a:	db3c      	blt.n	800c506 <_dtoa_r+0x24e>
 800c48c:	9b06      	ldr	r3, [sp, #24]
 800c48e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c492:	445b      	add	r3, fp
 800c494:	9306      	str	r3, [sp, #24]
 800c496:	2300      	movs	r3, #0
 800c498:	9308      	str	r3, [sp, #32]
 800c49a:	9b07      	ldr	r3, [sp, #28]
 800c49c:	2b09      	cmp	r3, #9
 800c49e:	d868      	bhi.n	800c572 <_dtoa_r+0x2ba>
 800c4a0:	2b05      	cmp	r3, #5
 800c4a2:	bfc4      	itt	gt
 800c4a4:	3b04      	subgt	r3, #4
 800c4a6:	9307      	strgt	r3, [sp, #28]
 800c4a8:	9b07      	ldr	r3, [sp, #28]
 800c4aa:	f1a3 0302 	sub.w	r3, r3, #2
 800c4ae:	bfcc      	ite	gt
 800c4b0:	2500      	movgt	r5, #0
 800c4b2:	2501      	movle	r5, #1
 800c4b4:	2b03      	cmp	r3, #3
 800c4b6:	f200 8085 	bhi.w	800c5c4 <_dtoa_r+0x30c>
 800c4ba:	e8df f003 	tbb	[pc, r3]
 800c4be:	3b2e      	.short	0x3b2e
 800c4c0:	5839      	.short	0x5839
 800c4c2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c4c6:	441d      	add	r5, r3
 800c4c8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c4cc:	2b20      	cmp	r3, #32
 800c4ce:	bfc1      	itttt	gt
 800c4d0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c4d4:	fa08 f803 	lslgt.w	r8, r8, r3
 800c4d8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800c4dc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c4e0:	bfd6      	itet	le
 800c4e2:	f1c3 0320 	rsble	r3, r3, #32
 800c4e6:	ea48 0003 	orrgt.w	r0, r8, r3
 800c4ea:	fa06 f003 	lslle.w	r0, r6, r3
 800c4ee:	f7f4 f809 	bl	8000504 <__aeabi_ui2d>
 800c4f2:	2201      	movs	r2, #1
 800c4f4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800c4f8:	3d01      	subs	r5, #1
 800c4fa:	920e      	str	r2, [sp, #56]	; 0x38
 800c4fc:	e76f      	b.n	800c3de <_dtoa_r+0x126>
 800c4fe:	2301      	movs	r3, #1
 800c500:	e7b3      	b.n	800c46a <_dtoa_r+0x1b2>
 800c502:	900c      	str	r0, [sp, #48]	; 0x30
 800c504:	e7b2      	b.n	800c46c <_dtoa_r+0x1b4>
 800c506:	9b05      	ldr	r3, [sp, #20]
 800c508:	eba3 030b 	sub.w	r3, r3, fp
 800c50c:	9305      	str	r3, [sp, #20]
 800c50e:	f1cb 0300 	rsb	r3, fp, #0
 800c512:	9308      	str	r3, [sp, #32]
 800c514:	2300      	movs	r3, #0
 800c516:	930b      	str	r3, [sp, #44]	; 0x2c
 800c518:	e7bf      	b.n	800c49a <_dtoa_r+0x1e2>
 800c51a:	2300      	movs	r3, #0
 800c51c:	9309      	str	r3, [sp, #36]	; 0x24
 800c51e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c520:	2b00      	cmp	r3, #0
 800c522:	dc52      	bgt.n	800c5ca <_dtoa_r+0x312>
 800c524:	2301      	movs	r3, #1
 800c526:	9301      	str	r3, [sp, #4]
 800c528:	9304      	str	r3, [sp, #16]
 800c52a:	461a      	mov	r2, r3
 800c52c:	920a      	str	r2, [sp, #40]	; 0x28
 800c52e:	e00b      	b.n	800c548 <_dtoa_r+0x290>
 800c530:	2301      	movs	r3, #1
 800c532:	e7f3      	b.n	800c51c <_dtoa_r+0x264>
 800c534:	2300      	movs	r3, #0
 800c536:	9309      	str	r3, [sp, #36]	; 0x24
 800c538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c53a:	445b      	add	r3, fp
 800c53c:	9301      	str	r3, [sp, #4]
 800c53e:	3301      	adds	r3, #1
 800c540:	2b01      	cmp	r3, #1
 800c542:	9304      	str	r3, [sp, #16]
 800c544:	bfb8      	it	lt
 800c546:	2301      	movlt	r3, #1
 800c548:	69e0      	ldr	r0, [r4, #28]
 800c54a:	2100      	movs	r1, #0
 800c54c:	2204      	movs	r2, #4
 800c54e:	f102 0614 	add.w	r6, r2, #20
 800c552:	429e      	cmp	r6, r3
 800c554:	d93d      	bls.n	800c5d2 <_dtoa_r+0x31a>
 800c556:	6041      	str	r1, [r0, #4]
 800c558:	4620      	mov	r0, r4
 800c55a:	f000 fceb 	bl	800cf34 <_Balloc>
 800c55e:	9000      	str	r0, [sp, #0]
 800c560:	2800      	cmp	r0, #0
 800c562:	d139      	bne.n	800c5d8 <_dtoa_r+0x320>
 800c564:	4b16      	ldr	r3, [pc, #88]	; (800c5c0 <_dtoa_r+0x308>)
 800c566:	4602      	mov	r2, r0
 800c568:	f240 11af 	movw	r1, #431	; 0x1af
 800c56c:	e6bd      	b.n	800c2ea <_dtoa_r+0x32>
 800c56e:	2301      	movs	r3, #1
 800c570:	e7e1      	b.n	800c536 <_dtoa_r+0x27e>
 800c572:	2501      	movs	r5, #1
 800c574:	2300      	movs	r3, #0
 800c576:	9307      	str	r3, [sp, #28]
 800c578:	9509      	str	r5, [sp, #36]	; 0x24
 800c57a:	f04f 33ff 	mov.w	r3, #4294967295
 800c57e:	9301      	str	r3, [sp, #4]
 800c580:	9304      	str	r3, [sp, #16]
 800c582:	2200      	movs	r2, #0
 800c584:	2312      	movs	r3, #18
 800c586:	e7d1      	b.n	800c52c <_dtoa_r+0x274>
 800c588:	636f4361 	.word	0x636f4361
 800c58c:	3fd287a7 	.word	0x3fd287a7
 800c590:	8b60c8b3 	.word	0x8b60c8b3
 800c594:	3fc68a28 	.word	0x3fc68a28
 800c598:	509f79fb 	.word	0x509f79fb
 800c59c:	3fd34413 	.word	0x3fd34413
 800c5a0:	0800e7b8 	.word	0x0800e7b8
 800c5a4:	0800e7cf 	.word	0x0800e7cf
 800c5a8:	7ff00000 	.word	0x7ff00000
 800c5ac:	0800e7b4 	.word	0x0800e7b4
 800c5b0:	0800e7ab 	.word	0x0800e7ab
 800c5b4:	0800e788 	.word	0x0800e788
 800c5b8:	3ff80000 	.word	0x3ff80000
 800c5bc:	0800e8c0 	.word	0x0800e8c0
 800c5c0:	0800e827 	.word	0x0800e827
 800c5c4:	2301      	movs	r3, #1
 800c5c6:	9309      	str	r3, [sp, #36]	; 0x24
 800c5c8:	e7d7      	b.n	800c57a <_dtoa_r+0x2c2>
 800c5ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5cc:	9301      	str	r3, [sp, #4]
 800c5ce:	9304      	str	r3, [sp, #16]
 800c5d0:	e7ba      	b.n	800c548 <_dtoa_r+0x290>
 800c5d2:	3101      	adds	r1, #1
 800c5d4:	0052      	lsls	r2, r2, #1
 800c5d6:	e7ba      	b.n	800c54e <_dtoa_r+0x296>
 800c5d8:	69e3      	ldr	r3, [r4, #28]
 800c5da:	9a00      	ldr	r2, [sp, #0]
 800c5dc:	601a      	str	r2, [r3, #0]
 800c5de:	9b04      	ldr	r3, [sp, #16]
 800c5e0:	2b0e      	cmp	r3, #14
 800c5e2:	f200 80a8 	bhi.w	800c736 <_dtoa_r+0x47e>
 800c5e6:	2d00      	cmp	r5, #0
 800c5e8:	f000 80a5 	beq.w	800c736 <_dtoa_r+0x47e>
 800c5ec:	f1bb 0f00 	cmp.w	fp, #0
 800c5f0:	dd38      	ble.n	800c664 <_dtoa_r+0x3ac>
 800c5f2:	4bc0      	ldr	r3, [pc, #768]	; (800c8f4 <_dtoa_r+0x63c>)
 800c5f4:	f00b 020f 	and.w	r2, fp, #15
 800c5f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c5fc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c600:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c604:	ea4f 182b 	mov.w	r8, fp, asr #4
 800c608:	d019      	beq.n	800c63e <_dtoa_r+0x386>
 800c60a:	4bbb      	ldr	r3, [pc, #748]	; (800c8f8 <_dtoa_r+0x640>)
 800c60c:	ec51 0b18 	vmov	r0, r1, d8
 800c610:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c614:	f7f4 f91a 	bl	800084c <__aeabi_ddiv>
 800c618:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c61c:	f008 080f 	and.w	r8, r8, #15
 800c620:	2503      	movs	r5, #3
 800c622:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800c8f8 <_dtoa_r+0x640>
 800c626:	f1b8 0f00 	cmp.w	r8, #0
 800c62a:	d10a      	bne.n	800c642 <_dtoa_r+0x38a>
 800c62c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c630:	4632      	mov	r2, r6
 800c632:	463b      	mov	r3, r7
 800c634:	f7f4 f90a 	bl	800084c <__aeabi_ddiv>
 800c638:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c63c:	e02b      	b.n	800c696 <_dtoa_r+0x3de>
 800c63e:	2502      	movs	r5, #2
 800c640:	e7ef      	b.n	800c622 <_dtoa_r+0x36a>
 800c642:	f018 0f01 	tst.w	r8, #1
 800c646:	d008      	beq.n	800c65a <_dtoa_r+0x3a2>
 800c648:	4630      	mov	r0, r6
 800c64a:	4639      	mov	r1, r7
 800c64c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c650:	f7f3 ffd2 	bl	80005f8 <__aeabi_dmul>
 800c654:	3501      	adds	r5, #1
 800c656:	4606      	mov	r6, r0
 800c658:	460f      	mov	r7, r1
 800c65a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c65e:	f109 0908 	add.w	r9, r9, #8
 800c662:	e7e0      	b.n	800c626 <_dtoa_r+0x36e>
 800c664:	f000 809f 	beq.w	800c7a6 <_dtoa_r+0x4ee>
 800c668:	f1cb 0600 	rsb	r6, fp, #0
 800c66c:	4ba1      	ldr	r3, [pc, #644]	; (800c8f4 <_dtoa_r+0x63c>)
 800c66e:	4fa2      	ldr	r7, [pc, #648]	; (800c8f8 <_dtoa_r+0x640>)
 800c670:	f006 020f 	and.w	r2, r6, #15
 800c674:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c67c:	ec51 0b18 	vmov	r0, r1, d8
 800c680:	f7f3 ffba 	bl	80005f8 <__aeabi_dmul>
 800c684:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c688:	1136      	asrs	r6, r6, #4
 800c68a:	2300      	movs	r3, #0
 800c68c:	2502      	movs	r5, #2
 800c68e:	2e00      	cmp	r6, #0
 800c690:	d17e      	bne.n	800c790 <_dtoa_r+0x4d8>
 800c692:	2b00      	cmp	r3, #0
 800c694:	d1d0      	bne.n	800c638 <_dtoa_r+0x380>
 800c696:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c698:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	f000 8084 	beq.w	800c7aa <_dtoa_r+0x4f2>
 800c6a2:	4b96      	ldr	r3, [pc, #600]	; (800c8fc <_dtoa_r+0x644>)
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	4640      	mov	r0, r8
 800c6a8:	4649      	mov	r1, r9
 800c6aa:	f7f4 fa17 	bl	8000adc <__aeabi_dcmplt>
 800c6ae:	2800      	cmp	r0, #0
 800c6b0:	d07b      	beq.n	800c7aa <_dtoa_r+0x4f2>
 800c6b2:	9b04      	ldr	r3, [sp, #16]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d078      	beq.n	800c7aa <_dtoa_r+0x4f2>
 800c6b8:	9b01      	ldr	r3, [sp, #4]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	dd39      	ble.n	800c732 <_dtoa_r+0x47a>
 800c6be:	4b90      	ldr	r3, [pc, #576]	; (800c900 <_dtoa_r+0x648>)
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	4640      	mov	r0, r8
 800c6c4:	4649      	mov	r1, r9
 800c6c6:	f7f3 ff97 	bl	80005f8 <__aeabi_dmul>
 800c6ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c6ce:	9e01      	ldr	r6, [sp, #4]
 800c6d0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800c6d4:	3501      	adds	r5, #1
 800c6d6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c6da:	4628      	mov	r0, r5
 800c6dc:	f7f3 ff22 	bl	8000524 <__aeabi_i2d>
 800c6e0:	4642      	mov	r2, r8
 800c6e2:	464b      	mov	r3, r9
 800c6e4:	f7f3 ff88 	bl	80005f8 <__aeabi_dmul>
 800c6e8:	4b86      	ldr	r3, [pc, #536]	; (800c904 <_dtoa_r+0x64c>)
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	f7f3 fdce 	bl	800028c <__adddf3>
 800c6f0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c6f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c6f8:	9303      	str	r3, [sp, #12]
 800c6fa:	2e00      	cmp	r6, #0
 800c6fc:	d158      	bne.n	800c7b0 <_dtoa_r+0x4f8>
 800c6fe:	4b82      	ldr	r3, [pc, #520]	; (800c908 <_dtoa_r+0x650>)
 800c700:	2200      	movs	r2, #0
 800c702:	4640      	mov	r0, r8
 800c704:	4649      	mov	r1, r9
 800c706:	f7f3 fdbf 	bl	8000288 <__aeabi_dsub>
 800c70a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c70e:	4680      	mov	r8, r0
 800c710:	4689      	mov	r9, r1
 800c712:	f7f4 fa01 	bl	8000b18 <__aeabi_dcmpgt>
 800c716:	2800      	cmp	r0, #0
 800c718:	f040 8296 	bne.w	800cc48 <_dtoa_r+0x990>
 800c71c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c720:	4640      	mov	r0, r8
 800c722:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c726:	4649      	mov	r1, r9
 800c728:	f7f4 f9d8 	bl	8000adc <__aeabi_dcmplt>
 800c72c:	2800      	cmp	r0, #0
 800c72e:	f040 8289 	bne.w	800cc44 <_dtoa_r+0x98c>
 800c732:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c736:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c738:	2b00      	cmp	r3, #0
 800c73a:	f2c0 814e 	blt.w	800c9da <_dtoa_r+0x722>
 800c73e:	f1bb 0f0e 	cmp.w	fp, #14
 800c742:	f300 814a 	bgt.w	800c9da <_dtoa_r+0x722>
 800c746:	4b6b      	ldr	r3, [pc, #428]	; (800c8f4 <_dtoa_r+0x63c>)
 800c748:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c74c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c750:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c752:	2b00      	cmp	r3, #0
 800c754:	f280 80dc 	bge.w	800c910 <_dtoa_r+0x658>
 800c758:	9b04      	ldr	r3, [sp, #16]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	f300 80d8 	bgt.w	800c910 <_dtoa_r+0x658>
 800c760:	f040 826f 	bne.w	800cc42 <_dtoa_r+0x98a>
 800c764:	4b68      	ldr	r3, [pc, #416]	; (800c908 <_dtoa_r+0x650>)
 800c766:	2200      	movs	r2, #0
 800c768:	4640      	mov	r0, r8
 800c76a:	4649      	mov	r1, r9
 800c76c:	f7f3 ff44 	bl	80005f8 <__aeabi_dmul>
 800c770:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c774:	f7f4 f9c6 	bl	8000b04 <__aeabi_dcmpge>
 800c778:	9e04      	ldr	r6, [sp, #16]
 800c77a:	4637      	mov	r7, r6
 800c77c:	2800      	cmp	r0, #0
 800c77e:	f040 8245 	bne.w	800cc0c <_dtoa_r+0x954>
 800c782:	9d00      	ldr	r5, [sp, #0]
 800c784:	2331      	movs	r3, #49	; 0x31
 800c786:	f805 3b01 	strb.w	r3, [r5], #1
 800c78a:	f10b 0b01 	add.w	fp, fp, #1
 800c78e:	e241      	b.n	800cc14 <_dtoa_r+0x95c>
 800c790:	07f2      	lsls	r2, r6, #31
 800c792:	d505      	bpl.n	800c7a0 <_dtoa_r+0x4e8>
 800c794:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c798:	f7f3 ff2e 	bl	80005f8 <__aeabi_dmul>
 800c79c:	3501      	adds	r5, #1
 800c79e:	2301      	movs	r3, #1
 800c7a0:	1076      	asrs	r6, r6, #1
 800c7a2:	3708      	adds	r7, #8
 800c7a4:	e773      	b.n	800c68e <_dtoa_r+0x3d6>
 800c7a6:	2502      	movs	r5, #2
 800c7a8:	e775      	b.n	800c696 <_dtoa_r+0x3de>
 800c7aa:	9e04      	ldr	r6, [sp, #16]
 800c7ac:	465f      	mov	r7, fp
 800c7ae:	e792      	b.n	800c6d6 <_dtoa_r+0x41e>
 800c7b0:	9900      	ldr	r1, [sp, #0]
 800c7b2:	4b50      	ldr	r3, [pc, #320]	; (800c8f4 <_dtoa_r+0x63c>)
 800c7b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c7b8:	4431      	add	r1, r6
 800c7ba:	9102      	str	r1, [sp, #8]
 800c7bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c7be:	eeb0 9a47 	vmov.f32	s18, s14
 800c7c2:	eef0 9a67 	vmov.f32	s19, s15
 800c7c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c7ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c7ce:	2900      	cmp	r1, #0
 800c7d0:	d044      	beq.n	800c85c <_dtoa_r+0x5a4>
 800c7d2:	494e      	ldr	r1, [pc, #312]	; (800c90c <_dtoa_r+0x654>)
 800c7d4:	2000      	movs	r0, #0
 800c7d6:	f7f4 f839 	bl	800084c <__aeabi_ddiv>
 800c7da:	ec53 2b19 	vmov	r2, r3, d9
 800c7de:	f7f3 fd53 	bl	8000288 <__aeabi_dsub>
 800c7e2:	9d00      	ldr	r5, [sp, #0]
 800c7e4:	ec41 0b19 	vmov	d9, r0, r1
 800c7e8:	4649      	mov	r1, r9
 800c7ea:	4640      	mov	r0, r8
 800c7ec:	f7f4 f9b4 	bl	8000b58 <__aeabi_d2iz>
 800c7f0:	4606      	mov	r6, r0
 800c7f2:	f7f3 fe97 	bl	8000524 <__aeabi_i2d>
 800c7f6:	4602      	mov	r2, r0
 800c7f8:	460b      	mov	r3, r1
 800c7fa:	4640      	mov	r0, r8
 800c7fc:	4649      	mov	r1, r9
 800c7fe:	f7f3 fd43 	bl	8000288 <__aeabi_dsub>
 800c802:	3630      	adds	r6, #48	; 0x30
 800c804:	f805 6b01 	strb.w	r6, [r5], #1
 800c808:	ec53 2b19 	vmov	r2, r3, d9
 800c80c:	4680      	mov	r8, r0
 800c80e:	4689      	mov	r9, r1
 800c810:	f7f4 f964 	bl	8000adc <__aeabi_dcmplt>
 800c814:	2800      	cmp	r0, #0
 800c816:	d164      	bne.n	800c8e2 <_dtoa_r+0x62a>
 800c818:	4642      	mov	r2, r8
 800c81a:	464b      	mov	r3, r9
 800c81c:	4937      	ldr	r1, [pc, #220]	; (800c8fc <_dtoa_r+0x644>)
 800c81e:	2000      	movs	r0, #0
 800c820:	f7f3 fd32 	bl	8000288 <__aeabi_dsub>
 800c824:	ec53 2b19 	vmov	r2, r3, d9
 800c828:	f7f4 f958 	bl	8000adc <__aeabi_dcmplt>
 800c82c:	2800      	cmp	r0, #0
 800c82e:	f040 80b6 	bne.w	800c99e <_dtoa_r+0x6e6>
 800c832:	9b02      	ldr	r3, [sp, #8]
 800c834:	429d      	cmp	r5, r3
 800c836:	f43f af7c 	beq.w	800c732 <_dtoa_r+0x47a>
 800c83a:	4b31      	ldr	r3, [pc, #196]	; (800c900 <_dtoa_r+0x648>)
 800c83c:	ec51 0b19 	vmov	r0, r1, d9
 800c840:	2200      	movs	r2, #0
 800c842:	f7f3 fed9 	bl	80005f8 <__aeabi_dmul>
 800c846:	4b2e      	ldr	r3, [pc, #184]	; (800c900 <_dtoa_r+0x648>)
 800c848:	ec41 0b19 	vmov	d9, r0, r1
 800c84c:	2200      	movs	r2, #0
 800c84e:	4640      	mov	r0, r8
 800c850:	4649      	mov	r1, r9
 800c852:	f7f3 fed1 	bl	80005f8 <__aeabi_dmul>
 800c856:	4680      	mov	r8, r0
 800c858:	4689      	mov	r9, r1
 800c85a:	e7c5      	b.n	800c7e8 <_dtoa_r+0x530>
 800c85c:	ec51 0b17 	vmov	r0, r1, d7
 800c860:	f7f3 feca 	bl	80005f8 <__aeabi_dmul>
 800c864:	9b02      	ldr	r3, [sp, #8]
 800c866:	9d00      	ldr	r5, [sp, #0]
 800c868:	930f      	str	r3, [sp, #60]	; 0x3c
 800c86a:	ec41 0b19 	vmov	d9, r0, r1
 800c86e:	4649      	mov	r1, r9
 800c870:	4640      	mov	r0, r8
 800c872:	f7f4 f971 	bl	8000b58 <__aeabi_d2iz>
 800c876:	4606      	mov	r6, r0
 800c878:	f7f3 fe54 	bl	8000524 <__aeabi_i2d>
 800c87c:	3630      	adds	r6, #48	; 0x30
 800c87e:	4602      	mov	r2, r0
 800c880:	460b      	mov	r3, r1
 800c882:	4640      	mov	r0, r8
 800c884:	4649      	mov	r1, r9
 800c886:	f7f3 fcff 	bl	8000288 <__aeabi_dsub>
 800c88a:	f805 6b01 	strb.w	r6, [r5], #1
 800c88e:	9b02      	ldr	r3, [sp, #8]
 800c890:	429d      	cmp	r5, r3
 800c892:	4680      	mov	r8, r0
 800c894:	4689      	mov	r9, r1
 800c896:	f04f 0200 	mov.w	r2, #0
 800c89a:	d124      	bne.n	800c8e6 <_dtoa_r+0x62e>
 800c89c:	4b1b      	ldr	r3, [pc, #108]	; (800c90c <_dtoa_r+0x654>)
 800c89e:	ec51 0b19 	vmov	r0, r1, d9
 800c8a2:	f7f3 fcf3 	bl	800028c <__adddf3>
 800c8a6:	4602      	mov	r2, r0
 800c8a8:	460b      	mov	r3, r1
 800c8aa:	4640      	mov	r0, r8
 800c8ac:	4649      	mov	r1, r9
 800c8ae:	f7f4 f933 	bl	8000b18 <__aeabi_dcmpgt>
 800c8b2:	2800      	cmp	r0, #0
 800c8b4:	d173      	bne.n	800c99e <_dtoa_r+0x6e6>
 800c8b6:	ec53 2b19 	vmov	r2, r3, d9
 800c8ba:	4914      	ldr	r1, [pc, #80]	; (800c90c <_dtoa_r+0x654>)
 800c8bc:	2000      	movs	r0, #0
 800c8be:	f7f3 fce3 	bl	8000288 <__aeabi_dsub>
 800c8c2:	4602      	mov	r2, r0
 800c8c4:	460b      	mov	r3, r1
 800c8c6:	4640      	mov	r0, r8
 800c8c8:	4649      	mov	r1, r9
 800c8ca:	f7f4 f907 	bl	8000adc <__aeabi_dcmplt>
 800c8ce:	2800      	cmp	r0, #0
 800c8d0:	f43f af2f 	beq.w	800c732 <_dtoa_r+0x47a>
 800c8d4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c8d6:	1e6b      	subs	r3, r5, #1
 800c8d8:	930f      	str	r3, [sp, #60]	; 0x3c
 800c8da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c8de:	2b30      	cmp	r3, #48	; 0x30
 800c8e0:	d0f8      	beq.n	800c8d4 <_dtoa_r+0x61c>
 800c8e2:	46bb      	mov	fp, r7
 800c8e4:	e04a      	b.n	800c97c <_dtoa_r+0x6c4>
 800c8e6:	4b06      	ldr	r3, [pc, #24]	; (800c900 <_dtoa_r+0x648>)
 800c8e8:	f7f3 fe86 	bl	80005f8 <__aeabi_dmul>
 800c8ec:	4680      	mov	r8, r0
 800c8ee:	4689      	mov	r9, r1
 800c8f0:	e7bd      	b.n	800c86e <_dtoa_r+0x5b6>
 800c8f2:	bf00      	nop
 800c8f4:	0800e8c0 	.word	0x0800e8c0
 800c8f8:	0800e898 	.word	0x0800e898
 800c8fc:	3ff00000 	.word	0x3ff00000
 800c900:	40240000 	.word	0x40240000
 800c904:	401c0000 	.word	0x401c0000
 800c908:	40140000 	.word	0x40140000
 800c90c:	3fe00000 	.word	0x3fe00000
 800c910:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c914:	9d00      	ldr	r5, [sp, #0]
 800c916:	4642      	mov	r2, r8
 800c918:	464b      	mov	r3, r9
 800c91a:	4630      	mov	r0, r6
 800c91c:	4639      	mov	r1, r7
 800c91e:	f7f3 ff95 	bl	800084c <__aeabi_ddiv>
 800c922:	f7f4 f919 	bl	8000b58 <__aeabi_d2iz>
 800c926:	9001      	str	r0, [sp, #4]
 800c928:	f7f3 fdfc 	bl	8000524 <__aeabi_i2d>
 800c92c:	4642      	mov	r2, r8
 800c92e:	464b      	mov	r3, r9
 800c930:	f7f3 fe62 	bl	80005f8 <__aeabi_dmul>
 800c934:	4602      	mov	r2, r0
 800c936:	460b      	mov	r3, r1
 800c938:	4630      	mov	r0, r6
 800c93a:	4639      	mov	r1, r7
 800c93c:	f7f3 fca4 	bl	8000288 <__aeabi_dsub>
 800c940:	9e01      	ldr	r6, [sp, #4]
 800c942:	9f04      	ldr	r7, [sp, #16]
 800c944:	3630      	adds	r6, #48	; 0x30
 800c946:	f805 6b01 	strb.w	r6, [r5], #1
 800c94a:	9e00      	ldr	r6, [sp, #0]
 800c94c:	1bae      	subs	r6, r5, r6
 800c94e:	42b7      	cmp	r7, r6
 800c950:	4602      	mov	r2, r0
 800c952:	460b      	mov	r3, r1
 800c954:	d134      	bne.n	800c9c0 <_dtoa_r+0x708>
 800c956:	f7f3 fc99 	bl	800028c <__adddf3>
 800c95a:	4642      	mov	r2, r8
 800c95c:	464b      	mov	r3, r9
 800c95e:	4606      	mov	r6, r0
 800c960:	460f      	mov	r7, r1
 800c962:	f7f4 f8d9 	bl	8000b18 <__aeabi_dcmpgt>
 800c966:	b9c8      	cbnz	r0, 800c99c <_dtoa_r+0x6e4>
 800c968:	4642      	mov	r2, r8
 800c96a:	464b      	mov	r3, r9
 800c96c:	4630      	mov	r0, r6
 800c96e:	4639      	mov	r1, r7
 800c970:	f7f4 f8aa 	bl	8000ac8 <__aeabi_dcmpeq>
 800c974:	b110      	cbz	r0, 800c97c <_dtoa_r+0x6c4>
 800c976:	9b01      	ldr	r3, [sp, #4]
 800c978:	07db      	lsls	r3, r3, #31
 800c97a:	d40f      	bmi.n	800c99c <_dtoa_r+0x6e4>
 800c97c:	4651      	mov	r1, sl
 800c97e:	4620      	mov	r0, r4
 800c980:	f000 fb18 	bl	800cfb4 <_Bfree>
 800c984:	2300      	movs	r3, #0
 800c986:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c988:	702b      	strb	r3, [r5, #0]
 800c98a:	f10b 0301 	add.w	r3, fp, #1
 800c98e:	6013      	str	r3, [r2, #0]
 800c990:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c992:	2b00      	cmp	r3, #0
 800c994:	f43f ace2 	beq.w	800c35c <_dtoa_r+0xa4>
 800c998:	601d      	str	r5, [r3, #0]
 800c99a:	e4df      	b.n	800c35c <_dtoa_r+0xa4>
 800c99c:	465f      	mov	r7, fp
 800c99e:	462b      	mov	r3, r5
 800c9a0:	461d      	mov	r5, r3
 800c9a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c9a6:	2a39      	cmp	r2, #57	; 0x39
 800c9a8:	d106      	bne.n	800c9b8 <_dtoa_r+0x700>
 800c9aa:	9a00      	ldr	r2, [sp, #0]
 800c9ac:	429a      	cmp	r2, r3
 800c9ae:	d1f7      	bne.n	800c9a0 <_dtoa_r+0x6e8>
 800c9b0:	9900      	ldr	r1, [sp, #0]
 800c9b2:	2230      	movs	r2, #48	; 0x30
 800c9b4:	3701      	adds	r7, #1
 800c9b6:	700a      	strb	r2, [r1, #0]
 800c9b8:	781a      	ldrb	r2, [r3, #0]
 800c9ba:	3201      	adds	r2, #1
 800c9bc:	701a      	strb	r2, [r3, #0]
 800c9be:	e790      	b.n	800c8e2 <_dtoa_r+0x62a>
 800c9c0:	4ba3      	ldr	r3, [pc, #652]	; (800cc50 <_dtoa_r+0x998>)
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	f7f3 fe18 	bl	80005f8 <__aeabi_dmul>
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	4606      	mov	r6, r0
 800c9ce:	460f      	mov	r7, r1
 800c9d0:	f7f4 f87a 	bl	8000ac8 <__aeabi_dcmpeq>
 800c9d4:	2800      	cmp	r0, #0
 800c9d6:	d09e      	beq.n	800c916 <_dtoa_r+0x65e>
 800c9d8:	e7d0      	b.n	800c97c <_dtoa_r+0x6c4>
 800c9da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c9dc:	2a00      	cmp	r2, #0
 800c9de:	f000 80ca 	beq.w	800cb76 <_dtoa_r+0x8be>
 800c9e2:	9a07      	ldr	r2, [sp, #28]
 800c9e4:	2a01      	cmp	r2, #1
 800c9e6:	f300 80ad 	bgt.w	800cb44 <_dtoa_r+0x88c>
 800c9ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c9ec:	2a00      	cmp	r2, #0
 800c9ee:	f000 80a5 	beq.w	800cb3c <_dtoa_r+0x884>
 800c9f2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c9f6:	9e08      	ldr	r6, [sp, #32]
 800c9f8:	9d05      	ldr	r5, [sp, #20]
 800c9fa:	9a05      	ldr	r2, [sp, #20]
 800c9fc:	441a      	add	r2, r3
 800c9fe:	9205      	str	r2, [sp, #20]
 800ca00:	9a06      	ldr	r2, [sp, #24]
 800ca02:	2101      	movs	r1, #1
 800ca04:	441a      	add	r2, r3
 800ca06:	4620      	mov	r0, r4
 800ca08:	9206      	str	r2, [sp, #24]
 800ca0a:	f000 fb89 	bl	800d120 <__i2b>
 800ca0e:	4607      	mov	r7, r0
 800ca10:	b165      	cbz	r5, 800ca2c <_dtoa_r+0x774>
 800ca12:	9b06      	ldr	r3, [sp, #24]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	dd09      	ble.n	800ca2c <_dtoa_r+0x774>
 800ca18:	42ab      	cmp	r3, r5
 800ca1a:	9a05      	ldr	r2, [sp, #20]
 800ca1c:	bfa8      	it	ge
 800ca1e:	462b      	movge	r3, r5
 800ca20:	1ad2      	subs	r2, r2, r3
 800ca22:	9205      	str	r2, [sp, #20]
 800ca24:	9a06      	ldr	r2, [sp, #24]
 800ca26:	1aed      	subs	r5, r5, r3
 800ca28:	1ad3      	subs	r3, r2, r3
 800ca2a:	9306      	str	r3, [sp, #24]
 800ca2c:	9b08      	ldr	r3, [sp, #32]
 800ca2e:	b1f3      	cbz	r3, 800ca6e <_dtoa_r+0x7b6>
 800ca30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	f000 80a3 	beq.w	800cb7e <_dtoa_r+0x8c6>
 800ca38:	2e00      	cmp	r6, #0
 800ca3a:	dd10      	ble.n	800ca5e <_dtoa_r+0x7a6>
 800ca3c:	4639      	mov	r1, r7
 800ca3e:	4632      	mov	r2, r6
 800ca40:	4620      	mov	r0, r4
 800ca42:	f000 fc2d 	bl	800d2a0 <__pow5mult>
 800ca46:	4652      	mov	r2, sl
 800ca48:	4601      	mov	r1, r0
 800ca4a:	4607      	mov	r7, r0
 800ca4c:	4620      	mov	r0, r4
 800ca4e:	f000 fb7d 	bl	800d14c <__multiply>
 800ca52:	4651      	mov	r1, sl
 800ca54:	4680      	mov	r8, r0
 800ca56:	4620      	mov	r0, r4
 800ca58:	f000 faac 	bl	800cfb4 <_Bfree>
 800ca5c:	46c2      	mov	sl, r8
 800ca5e:	9b08      	ldr	r3, [sp, #32]
 800ca60:	1b9a      	subs	r2, r3, r6
 800ca62:	d004      	beq.n	800ca6e <_dtoa_r+0x7b6>
 800ca64:	4651      	mov	r1, sl
 800ca66:	4620      	mov	r0, r4
 800ca68:	f000 fc1a 	bl	800d2a0 <__pow5mult>
 800ca6c:	4682      	mov	sl, r0
 800ca6e:	2101      	movs	r1, #1
 800ca70:	4620      	mov	r0, r4
 800ca72:	f000 fb55 	bl	800d120 <__i2b>
 800ca76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	4606      	mov	r6, r0
 800ca7c:	f340 8081 	ble.w	800cb82 <_dtoa_r+0x8ca>
 800ca80:	461a      	mov	r2, r3
 800ca82:	4601      	mov	r1, r0
 800ca84:	4620      	mov	r0, r4
 800ca86:	f000 fc0b 	bl	800d2a0 <__pow5mult>
 800ca8a:	9b07      	ldr	r3, [sp, #28]
 800ca8c:	2b01      	cmp	r3, #1
 800ca8e:	4606      	mov	r6, r0
 800ca90:	dd7a      	ble.n	800cb88 <_dtoa_r+0x8d0>
 800ca92:	f04f 0800 	mov.w	r8, #0
 800ca96:	6933      	ldr	r3, [r6, #16]
 800ca98:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ca9c:	6918      	ldr	r0, [r3, #16]
 800ca9e:	f000 faf1 	bl	800d084 <__hi0bits>
 800caa2:	f1c0 0020 	rsb	r0, r0, #32
 800caa6:	9b06      	ldr	r3, [sp, #24]
 800caa8:	4418      	add	r0, r3
 800caaa:	f010 001f 	ands.w	r0, r0, #31
 800caae:	f000 8094 	beq.w	800cbda <_dtoa_r+0x922>
 800cab2:	f1c0 0320 	rsb	r3, r0, #32
 800cab6:	2b04      	cmp	r3, #4
 800cab8:	f340 8085 	ble.w	800cbc6 <_dtoa_r+0x90e>
 800cabc:	9b05      	ldr	r3, [sp, #20]
 800cabe:	f1c0 001c 	rsb	r0, r0, #28
 800cac2:	4403      	add	r3, r0
 800cac4:	9305      	str	r3, [sp, #20]
 800cac6:	9b06      	ldr	r3, [sp, #24]
 800cac8:	4403      	add	r3, r0
 800caca:	4405      	add	r5, r0
 800cacc:	9306      	str	r3, [sp, #24]
 800cace:	9b05      	ldr	r3, [sp, #20]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	dd05      	ble.n	800cae0 <_dtoa_r+0x828>
 800cad4:	4651      	mov	r1, sl
 800cad6:	461a      	mov	r2, r3
 800cad8:	4620      	mov	r0, r4
 800cada:	f000 fc3b 	bl	800d354 <__lshift>
 800cade:	4682      	mov	sl, r0
 800cae0:	9b06      	ldr	r3, [sp, #24]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	dd05      	ble.n	800caf2 <_dtoa_r+0x83a>
 800cae6:	4631      	mov	r1, r6
 800cae8:	461a      	mov	r2, r3
 800caea:	4620      	mov	r0, r4
 800caec:	f000 fc32 	bl	800d354 <__lshift>
 800caf0:	4606      	mov	r6, r0
 800caf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d072      	beq.n	800cbde <_dtoa_r+0x926>
 800caf8:	4631      	mov	r1, r6
 800cafa:	4650      	mov	r0, sl
 800cafc:	f000 fc96 	bl	800d42c <__mcmp>
 800cb00:	2800      	cmp	r0, #0
 800cb02:	da6c      	bge.n	800cbde <_dtoa_r+0x926>
 800cb04:	2300      	movs	r3, #0
 800cb06:	4651      	mov	r1, sl
 800cb08:	220a      	movs	r2, #10
 800cb0a:	4620      	mov	r0, r4
 800cb0c:	f000 fa74 	bl	800cff8 <__multadd>
 800cb10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb12:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cb16:	4682      	mov	sl, r0
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	f000 81b0 	beq.w	800ce7e <_dtoa_r+0xbc6>
 800cb1e:	2300      	movs	r3, #0
 800cb20:	4639      	mov	r1, r7
 800cb22:	220a      	movs	r2, #10
 800cb24:	4620      	mov	r0, r4
 800cb26:	f000 fa67 	bl	800cff8 <__multadd>
 800cb2a:	9b01      	ldr	r3, [sp, #4]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	4607      	mov	r7, r0
 800cb30:	f300 8096 	bgt.w	800cc60 <_dtoa_r+0x9a8>
 800cb34:	9b07      	ldr	r3, [sp, #28]
 800cb36:	2b02      	cmp	r3, #2
 800cb38:	dc59      	bgt.n	800cbee <_dtoa_r+0x936>
 800cb3a:	e091      	b.n	800cc60 <_dtoa_r+0x9a8>
 800cb3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cb3e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cb42:	e758      	b.n	800c9f6 <_dtoa_r+0x73e>
 800cb44:	9b04      	ldr	r3, [sp, #16]
 800cb46:	1e5e      	subs	r6, r3, #1
 800cb48:	9b08      	ldr	r3, [sp, #32]
 800cb4a:	42b3      	cmp	r3, r6
 800cb4c:	bfbf      	itttt	lt
 800cb4e:	9b08      	ldrlt	r3, [sp, #32]
 800cb50:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800cb52:	9608      	strlt	r6, [sp, #32]
 800cb54:	1af3      	sublt	r3, r6, r3
 800cb56:	bfb4      	ite	lt
 800cb58:	18d2      	addlt	r2, r2, r3
 800cb5a:	1b9e      	subge	r6, r3, r6
 800cb5c:	9b04      	ldr	r3, [sp, #16]
 800cb5e:	bfbc      	itt	lt
 800cb60:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800cb62:	2600      	movlt	r6, #0
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	bfb7      	itett	lt
 800cb68:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800cb6c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800cb70:	1a9d      	sublt	r5, r3, r2
 800cb72:	2300      	movlt	r3, #0
 800cb74:	e741      	b.n	800c9fa <_dtoa_r+0x742>
 800cb76:	9e08      	ldr	r6, [sp, #32]
 800cb78:	9d05      	ldr	r5, [sp, #20]
 800cb7a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800cb7c:	e748      	b.n	800ca10 <_dtoa_r+0x758>
 800cb7e:	9a08      	ldr	r2, [sp, #32]
 800cb80:	e770      	b.n	800ca64 <_dtoa_r+0x7ac>
 800cb82:	9b07      	ldr	r3, [sp, #28]
 800cb84:	2b01      	cmp	r3, #1
 800cb86:	dc19      	bgt.n	800cbbc <_dtoa_r+0x904>
 800cb88:	9b02      	ldr	r3, [sp, #8]
 800cb8a:	b9bb      	cbnz	r3, 800cbbc <_dtoa_r+0x904>
 800cb8c:	9b03      	ldr	r3, [sp, #12]
 800cb8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cb92:	b99b      	cbnz	r3, 800cbbc <_dtoa_r+0x904>
 800cb94:	9b03      	ldr	r3, [sp, #12]
 800cb96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cb9a:	0d1b      	lsrs	r3, r3, #20
 800cb9c:	051b      	lsls	r3, r3, #20
 800cb9e:	b183      	cbz	r3, 800cbc2 <_dtoa_r+0x90a>
 800cba0:	9b05      	ldr	r3, [sp, #20]
 800cba2:	3301      	adds	r3, #1
 800cba4:	9305      	str	r3, [sp, #20]
 800cba6:	9b06      	ldr	r3, [sp, #24]
 800cba8:	3301      	adds	r3, #1
 800cbaa:	9306      	str	r3, [sp, #24]
 800cbac:	f04f 0801 	mov.w	r8, #1
 800cbb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	f47f af6f 	bne.w	800ca96 <_dtoa_r+0x7de>
 800cbb8:	2001      	movs	r0, #1
 800cbba:	e774      	b.n	800caa6 <_dtoa_r+0x7ee>
 800cbbc:	f04f 0800 	mov.w	r8, #0
 800cbc0:	e7f6      	b.n	800cbb0 <_dtoa_r+0x8f8>
 800cbc2:	4698      	mov	r8, r3
 800cbc4:	e7f4      	b.n	800cbb0 <_dtoa_r+0x8f8>
 800cbc6:	d082      	beq.n	800cace <_dtoa_r+0x816>
 800cbc8:	9a05      	ldr	r2, [sp, #20]
 800cbca:	331c      	adds	r3, #28
 800cbcc:	441a      	add	r2, r3
 800cbce:	9205      	str	r2, [sp, #20]
 800cbd0:	9a06      	ldr	r2, [sp, #24]
 800cbd2:	441a      	add	r2, r3
 800cbd4:	441d      	add	r5, r3
 800cbd6:	9206      	str	r2, [sp, #24]
 800cbd8:	e779      	b.n	800cace <_dtoa_r+0x816>
 800cbda:	4603      	mov	r3, r0
 800cbdc:	e7f4      	b.n	800cbc8 <_dtoa_r+0x910>
 800cbde:	9b04      	ldr	r3, [sp, #16]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	dc37      	bgt.n	800cc54 <_dtoa_r+0x99c>
 800cbe4:	9b07      	ldr	r3, [sp, #28]
 800cbe6:	2b02      	cmp	r3, #2
 800cbe8:	dd34      	ble.n	800cc54 <_dtoa_r+0x99c>
 800cbea:	9b04      	ldr	r3, [sp, #16]
 800cbec:	9301      	str	r3, [sp, #4]
 800cbee:	9b01      	ldr	r3, [sp, #4]
 800cbf0:	b963      	cbnz	r3, 800cc0c <_dtoa_r+0x954>
 800cbf2:	4631      	mov	r1, r6
 800cbf4:	2205      	movs	r2, #5
 800cbf6:	4620      	mov	r0, r4
 800cbf8:	f000 f9fe 	bl	800cff8 <__multadd>
 800cbfc:	4601      	mov	r1, r0
 800cbfe:	4606      	mov	r6, r0
 800cc00:	4650      	mov	r0, sl
 800cc02:	f000 fc13 	bl	800d42c <__mcmp>
 800cc06:	2800      	cmp	r0, #0
 800cc08:	f73f adbb 	bgt.w	800c782 <_dtoa_r+0x4ca>
 800cc0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc0e:	9d00      	ldr	r5, [sp, #0]
 800cc10:	ea6f 0b03 	mvn.w	fp, r3
 800cc14:	f04f 0800 	mov.w	r8, #0
 800cc18:	4631      	mov	r1, r6
 800cc1a:	4620      	mov	r0, r4
 800cc1c:	f000 f9ca 	bl	800cfb4 <_Bfree>
 800cc20:	2f00      	cmp	r7, #0
 800cc22:	f43f aeab 	beq.w	800c97c <_dtoa_r+0x6c4>
 800cc26:	f1b8 0f00 	cmp.w	r8, #0
 800cc2a:	d005      	beq.n	800cc38 <_dtoa_r+0x980>
 800cc2c:	45b8      	cmp	r8, r7
 800cc2e:	d003      	beq.n	800cc38 <_dtoa_r+0x980>
 800cc30:	4641      	mov	r1, r8
 800cc32:	4620      	mov	r0, r4
 800cc34:	f000 f9be 	bl	800cfb4 <_Bfree>
 800cc38:	4639      	mov	r1, r7
 800cc3a:	4620      	mov	r0, r4
 800cc3c:	f000 f9ba 	bl	800cfb4 <_Bfree>
 800cc40:	e69c      	b.n	800c97c <_dtoa_r+0x6c4>
 800cc42:	2600      	movs	r6, #0
 800cc44:	4637      	mov	r7, r6
 800cc46:	e7e1      	b.n	800cc0c <_dtoa_r+0x954>
 800cc48:	46bb      	mov	fp, r7
 800cc4a:	4637      	mov	r7, r6
 800cc4c:	e599      	b.n	800c782 <_dtoa_r+0x4ca>
 800cc4e:	bf00      	nop
 800cc50:	40240000 	.word	0x40240000
 800cc54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	f000 80c8 	beq.w	800cdec <_dtoa_r+0xb34>
 800cc5c:	9b04      	ldr	r3, [sp, #16]
 800cc5e:	9301      	str	r3, [sp, #4]
 800cc60:	2d00      	cmp	r5, #0
 800cc62:	dd05      	ble.n	800cc70 <_dtoa_r+0x9b8>
 800cc64:	4639      	mov	r1, r7
 800cc66:	462a      	mov	r2, r5
 800cc68:	4620      	mov	r0, r4
 800cc6a:	f000 fb73 	bl	800d354 <__lshift>
 800cc6e:	4607      	mov	r7, r0
 800cc70:	f1b8 0f00 	cmp.w	r8, #0
 800cc74:	d05b      	beq.n	800cd2e <_dtoa_r+0xa76>
 800cc76:	6879      	ldr	r1, [r7, #4]
 800cc78:	4620      	mov	r0, r4
 800cc7a:	f000 f95b 	bl	800cf34 <_Balloc>
 800cc7e:	4605      	mov	r5, r0
 800cc80:	b928      	cbnz	r0, 800cc8e <_dtoa_r+0x9d6>
 800cc82:	4b83      	ldr	r3, [pc, #524]	; (800ce90 <_dtoa_r+0xbd8>)
 800cc84:	4602      	mov	r2, r0
 800cc86:	f240 21ef 	movw	r1, #751	; 0x2ef
 800cc8a:	f7ff bb2e 	b.w	800c2ea <_dtoa_r+0x32>
 800cc8e:	693a      	ldr	r2, [r7, #16]
 800cc90:	3202      	adds	r2, #2
 800cc92:	0092      	lsls	r2, r2, #2
 800cc94:	f107 010c 	add.w	r1, r7, #12
 800cc98:	300c      	adds	r0, #12
 800cc9a:	f7ff fa75 	bl	800c188 <memcpy>
 800cc9e:	2201      	movs	r2, #1
 800cca0:	4629      	mov	r1, r5
 800cca2:	4620      	mov	r0, r4
 800cca4:	f000 fb56 	bl	800d354 <__lshift>
 800cca8:	9b00      	ldr	r3, [sp, #0]
 800ccaa:	3301      	adds	r3, #1
 800ccac:	9304      	str	r3, [sp, #16]
 800ccae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ccb2:	4413      	add	r3, r2
 800ccb4:	9308      	str	r3, [sp, #32]
 800ccb6:	9b02      	ldr	r3, [sp, #8]
 800ccb8:	f003 0301 	and.w	r3, r3, #1
 800ccbc:	46b8      	mov	r8, r7
 800ccbe:	9306      	str	r3, [sp, #24]
 800ccc0:	4607      	mov	r7, r0
 800ccc2:	9b04      	ldr	r3, [sp, #16]
 800ccc4:	4631      	mov	r1, r6
 800ccc6:	3b01      	subs	r3, #1
 800ccc8:	4650      	mov	r0, sl
 800ccca:	9301      	str	r3, [sp, #4]
 800cccc:	f7ff fa6a 	bl	800c1a4 <quorem>
 800ccd0:	4641      	mov	r1, r8
 800ccd2:	9002      	str	r0, [sp, #8]
 800ccd4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ccd8:	4650      	mov	r0, sl
 800ccda:	f000 fba7 	bl	800d42c <__mcmp>
 800ccde:	463a      	mov	r2, r7
 800cce0:	9005      	str	r0, [sp, #20]
 800cce2:	4631      	mov	r1, r6
 800cce4:	4620      	mov	r0, r4
 800cce6:	f000 fbbd 	bl	800d464 <__mdiff>
 800ccea:	68c2      	ldr	r2, [r0, #12]
 800ccec:	4605      	mov	r5, r0
 800ccee:	bb02      	cbnz	r2, 800cd32 <_dtoa_r+0xa7a>
 800ccf0:	4601      	mov	r1, r0
 800ccf2:	4650      	mov	r0, sl
 800ccf4:	f000 fb9a 	bl	800d42c <__mcmp>
 800ccf8:	4602      	mov	r2, r0
 800ccfa:	4629      	mov	r1, r5
 800ccfc:	4620      	mov	r0, r4
 800ccfe:	9209      	str	r2, [sp, #36]	; 0x24
 800cd00:	f000 f958 	bl	800cfb4 <_Bfree>
 800cd04:	9b07      	ldr	r3, [sp, #28]
 800cd06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd08:	9d04      	ldr	r5, [sp, #16]
 800cd0a:	ea43 0102 	orr.w	r1, r3, r2
 800cd0e:	9b06      	ldr	r3, [sp, #24]
 800cd10:	4319      	orrs	r1, r3
 800cd12:	d110      	bne.n	800cd36 <_dtoa_r+0xa7e>
 800cd14:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cd18:	d029      	beq.n	800cd6e <_dtoa_r+0xab6>
 800cd1a:	9b05      	ldr	r3, [sp, #20]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	dd02      	ble.n	800cd26 <_dtoa_r+0xa6e>
 800cd20:	9b02      	ldr	r3, [sp, #8]
 800cd22:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800cd26:	9b01      	ldr	r3, [sp, #4]
 800cd28:	f883 9000 	strb.w	r9, [r3]
 800cd2c:	e774      	b.n	800cc18 <_dtoa_r+0x960>
 800cd2e:	4638      	mov	r0, r7
 800cd30:	e7ba      	b.n	800cca8 <_dtoa_r+0x9f0>
 800cd32:	2201      	movs	r2, #1
 800cd34:	e7e1      	b.n	800ccfa <_dtoa_r+0xa42>
 800cd36:	9b05      	ldr	r3, [sp, #20]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	db04      	blt.n	800cd46 <_dtoa_r+0xa8e>
 800cd3c:	9907      	ldr	r1, [sp, #28]
 800cd3e:	430b      	orrs	r3, r1
 800cd40:	9906      	ldr	r1, [sp, #24]
 800cd42:	430b      	orrs	r3, r1
 800cd44:	d120      	bne.n	800cd88 <_dtoa_r+0xad0>
 800cd46:	2a00      	cmp	r2, #0
 800cd48:	dded      	ble.n	800cd26 <_dtoa_r+0xa6e>
 800cd4a:	4651      	mov	r1, sl
 800cd4c:	2201      	movs	r2, #1
 800cd4e:	4620      	mov	r0, r4
 800cd50:	f000 fb00 	bl	800d354 <__lshift>
 800cd54:	4631      	mov	r1, r6
 800cd56:	4682      	mov	sl, r0
 800cd58:	f000 fb68 	bl	800d42c <__mcmp>
 800cd5c:	2800      	cmp	r0, #0
 800cd5e:	dc03      	bgt.n	800cd68 <_dtoa_r+0xab0>
 800cd60:	d1e1      	bne.n	800cd26 <_dtoa_r+0xa6e>
 800cd62:	f019 0f01 	tst.w	r9, #1
 800cd66:	d0de      	beq.n	800cd26 <_dtoa_r+0xa6e>
 800cd68:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cd6c:	d1d8      	bne.n	800cd20 <_dtoa_r+0xa68>
 800cd6e:	9a01      	ldr	r2, [sp, #4]
 800cd70:	2339      	movs	r3, #57	; 0x39
 800cd72:	7013      	strb	r3, [r2, #0]
 800cd74:	462b      	mov	r3, r5
 800cd76:	461d      	mov	r5, r3
 800cd78:	3b01      	subs	r3, #1
 800cd7a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cd7e:	2a39      	cmp	r2, #57	; 0x39
 800cd80:	d06c      	beq.n	800ce5c <_dtoa_r+0xba4>
 800cd82:	3201      	adds	r2, #1
 800cd84:	701a      	strb	r2, [r3, #0]
 800cd86:	e747      	b.n	800cc18 <_dtoa_r+0x960>
 800cd88:	2a00      	cmp	r2, #0
 800cd8a:	dd07      	ble.n	800cd9c <_dtoa_r+0xae4>
 800cd8c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cd90:	d0ed      	beq.n	800cd6e <_dtoa_r+0xab6>
 800cd92:	9a01      	ldr	r2, [sp, #4]
 800cd94:	f109 0301 	add.w	r3, r9, #1
 800cd98:	7013      	strb	r3, [r2, #0]
 800cd9a:	e73d      	b.n	800cc18 <_dtoa_r+0x960>
 800cd9c:	9b04      	ldr	r3, [sp, #16]
 800cd9e:	9a08      	ldr	r2, [sp, #32]
 800cda0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800cda4:	4293      	cmp	r3, r2
 800cda6:	d043      	beq.n	800ce30 <_dtoa_r+0xb78>
 800cda8:	4651      	mov	r1, sl
 800cdaa:	2300      	movs	r3, #0
 800cdac:	220a      	movs	r2, #10
 800cdae:	4620      	mov	r0, r4
 800cdb0:	f000 f922 	bl	800cff8 <__multadd>
 800cdb4:	45b8      	cmp	r8, r7
 800cdb6:	4682      	mov	sl, r0
 800cdb8:	f04f 0300 	mov.w	r3, #0
 800cdbc:	f04f 020a 	mov.w	r2, #10
 800cdc0:	4641      	mov	r1, r8
 800cdc2:	4620      	mov	r0, r4
 800cdc4:	d107      	bne.n	800cdd6 <_dtoa_r+0xb1e>
 800cdc6:	f000 f917 	bl	800cff8 <__multadd>
 800cdca:	4680      	mov	r8, r0
 800cdcc:	4607      	mov	r7, r0
 800cdce:	9b04      	ldr	r3, [sp, #16]
 800cdd0:	3301      	adds	r3, #1
 800cdd2:	9304      	str	r3, [sp, #16]
 800cdd4:	e775      	b.n	800ccc2 <_dtoa_r+0xa0a>
 800cdd6:	f000 f90f 	bl	800cff8 <__multadd>
 800cdda:	4639      	mov	r1, r7
 800cddc:	4680      	mov	r8, r0
 800cdde:	2300      	movs	r3, #0
 800cde0:	220a      	movs	r2, #10
 800cde2:	4620      	mov	r0, r4
 800cde4:	f000 f908 	bl	800cff8 <__multadd>
 800cde8:	4607      	mov	r7, r0
 800cdea:	e7f0      	b.n	800cdce <_dtoa_r+0xb16>
 800cdec:	9b04      	ldr	r3, [sp, #16]
 800cdee:	9301      	str	r3, [sp, #4]
 800cdf0:	9d00      	ldr	r5, [sp, #0]
 800cdf2:	4631      	mov	r1, r6
 800cdf4:	4650      	mov	r0, sl
 800cdf6:	f7ff f9d5 	bl	800c1a4 <quorem>
 800cdfa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800cdfe:	9b00      	ldr	r3, [sp, #0]
 800ce00:	f805 9b01 	strb.w	r9, [r5], #1
 800ce04:	1aea      	subs	r2, r5, r3
 800ce06:	9b01      	ldr	r3, [sp, #4]
 800ce08:	4293      	cmp	r3, r2
 800ce0a:	dd07      	ble.n	800ce1c <_dtoa_r+0xb64>
 800ce0c:	4651      	mov	r1, sl
 800ce0e:	2300      	movs	r3, #0
 800ce10:	220a      	movs	r2, #10
 800ce12:	4620      	mov	r0, r4
 800ce14:	f000 f8f0 	bl	800cff8 <__multadd>
 800ce18:	4682      	mov	sl, r0
 800ce1a:	e7ea      	b.n	800cdf2 <_dtoa_r+0xb3a>
 800ce1c:	9b01      	ldr	r3, [sp, #4]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	bfc8      	it	gt
 800ce22:	461d      	movgt	r5, r3
 800ce24:	9b00      	ldr	r3, [sp, #0]
 800ce26:	bfd8      	it	le
 800ce28:	2501      	movle	r5, #1
 800ce2a:	441d      	add	r5, r3
 800ce2c:	f04f 0800 	mov.w	r8, #0
 800ce30:	4651      	mov	r1, sl
 800ce32:	2201      	movs	r2, #1
 800ce34:	4620      	mov	r0, r4
 800ce36:	f000 fa8d 	bl	800d354 <__lshift>
 800ce3a:	4631      	mov	r1, r6
 800ce3c:	4682      	mov	sl, r0
 800ce3e:	f000 faf5 	bl	800d42c <__mcmp>
 800ce42:	2800      	cmp	r0, #0
 800ce44:	dc96      	bgt.n	800cd74 <_dtoa_r+0xabc>
 800ce46:	d102      	bne.n	800ce4e <_dtoa_r+0xb96>
 800ce48:	f019 0f01 	tst.w	r9, #1
 800ce4c:	d192      	bne.n	800cd74 <_dtoa_r+0xabc>
 800ce4e:	462b      	mov	r3, r5
 800ce50:	461d      	mov	r5, r3
 800ce52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ce56:	2a30      	cmp	r2, #48	; 0x30
 800ce58:	d0fa      	beq.n	800ce50 <_dtoa_r+0xb98>
 800ce5a:	e6dd      	b.n	800cc18 <_dtoa_r+0x960>
 800ce5c:	9a00      	ldr	r2, [sp, #0]
 800ce5e:	429a      	cmp	r2, r3
 800ce60:	d189      	bne.n	800cd76 <_dtoa_r+0xabe>
 800ce62:	f10b 0b01 	add.w	fp, fp, #1
 800ce66:	2331      	movs	r3, #49	; 0x31
 800ce68:	e796      	b.n	800cd98 <_dtoa_r+0xae0>
 800ce6a:	4b0a      	ldr	r3, [pc, #40]	; (800ce94 <_dtoa_r+0xbdc>)
 800ce6c:	f7ff ba99 	b.w	800c3a2 <_dtoa_r+0xea>
 800ce70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	f47f aa6d 	bne.w	800c352 <_dtoa_r+0x9a>
 800ce78:	4b07      	ldr	r3, [pc, #28]	; (800ce98 <_dtoa_r+0xbe0>)
 800ce7a:	f7ff ba92 	b.w	800c3a2 <_dtoa_r+0xea>
 800ce7e:	9b01      	ldr	r3, [sp, #4]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	dcb5      	bgt.n	800cdf0 <_dtoa_r+0xb38>
 800ce84:	9b07      	ldr	r3, [sp, #28]
 800ce86:	2b02      	cmp	r3, #2
 800ce88:	f73f aeb1 	bgt.w	800cbee <_dtoa_r+0x936>
 800ce8c:	e7b0      	b.n	800cdf0 <_dtoa_r+0xb38>
 800ce8e:	bf00      	nop
 800ce90:	0800e827 	.word	0x0800e827
 800ce94:	0800e787 	.word	0x0800e787
 800ce98:	0800e7ab 	.word	0x0800e7ab

0800ce9c <_free_r>:
 800ce9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ce9e:	2900      	cmp	r1, #0
 800cea0:	d044      	beq.n	800cf2c <_free_r+0x90>
 800cea2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cea6:	9001      	str	r0, [sp, #4]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	f1a1 0404 	sub.w	r4, r1, #4
 800ceae:	bfb8      	it	lt
 800ceb0:	18e4      	addlt	r4, r4, r3
 800ceb2:	f7fe f9fb 	bl	800b2ac <__malloc_lock>
 800ceb6:	4a1e      	ldr	r2, [pc, #120]	; (800cf30 <_free_r+0x94>)
 800ceb8:	9801      	ldr	r0, [sp, #4]
 800ceba:	6813      	ldr	r3, [r2, #0]
 800cebc:	b933      	cbnz	r3, 800cecc <_free_r+0x30>
 800cebe:	6063      	str	r3, [r4, #4]
 800cec0:	6014      	str	r4, [r2, #0]
 800cec2:	b003      	add	sp, #12
 800cec4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cec8:	f7fe b9f6 	b.w	800b2b8 <__malloc_unlock>
 800cecc:	42a3      	cmp	r3, r4
 800cece:	d908      	bls.n	800cee2 <_free_r+0x46>
 800ced0:	6825      	ldr	r5, [r4, #0]
 800ced2:	1961      	adds	r1, r4, r5
 800ced4:	428b      	cmp	r3, r1
 800ced6:	bf01      	itttt	eq
 800ced8:	6819      	ldreq	r1, [r3, #0]
 800ceda:	685b      	ldreq	r3, [r3, #4]
 800cedc:	1949      	addeq	r1, r1, r5
 800cede:	6021      	streq	r1, [r4, #0]
 800cee0:	e7ed      	b.n	800cebe <_free_r+0x22>
 800cee2:	461a      	mov	r2, r3
 800cee4:	685b      	ldr	r3, [r3, #4]
 800cee6:	b10b      	cbz	r3, 800ceec <_free_r+0x50>
 800cee8:	42a3      	cmp	r3, r4
 800ceea:	d9fa      	bls.n	800cee2 <_free_r+0x46>
 800ceec:	6811      	ldr	r1, [r2, #0]
 800ceee:	1855      	adds	r5, r2, r1
 800cef0:	42a5      	cmp	r5, r4
 800cef2:	d10b      	bne.n	800cf0c <_free_r+0x70>
 800cef4:	6824      	ldr	r4, [r4, #0]
 800cef6:	4421      	add	r1, r4
 800cef8:	1854      	adds	r4, r2, r1
 800cefa:	42a3      	cmp	r3, r4
 800cefc:	6011      	str	r1, [r2, #0]
 800cefe:	d1e0      	bne.n	800cec2 <_free_r+0x26>
 800cf00:	681c      	ldr	r4, [r3, #0]
 800cf02:	685b      	ldr	r3, [r3, #4]
 800cf04:	6053      	str	r3, [r2, #4]
 800cf06:	440c      	add	r4, r1
 800cf08:	6014      	str	r4, [r2, #0]
 800cf0a:	e7da      	b.n	800cec2 <_free_r+0x26>
 800cf0c:	d902      	bls.n	800cf14 <_free_r+0x78>
 800cf0e:	230c      	movs	r3, #12
 800cf10:	6003      	str	r3, [r0, #0]
 800cf12:	e7d6      	b.n	800cec2 <_free_r+0x26>
 800cf14:	6825      	ldr	r5, [r4, #0]
 800cf16:	1961      	adds	r1, r4, r5
 800cf18:	428b      	cmp	r3, r1
 800cf1a:	bf04      	itt	eq
 800cf1c:	6819      	ldreq	r1, [r3, #0]
 800cf1e:	685b      	ldreq	r3, [r3, #4]
 800cf20:	6063      	str	r3, [r4, #4]
 800cf22:	bf04      	itt	eq
 800cf24:	1949      	addeq	r1, r1, r5
 800cf26:	6021      	streq	r1, [r4, #0]
 800cf28:	6054      	str	r4, [r2, #4]
 800cf2a:	e7ca      	b.n	800cec2 <_free_r+0x26>
 800cf2c:	b003      	add	sp, #12
 800cf2e:	bd30      	pop	{r4, r5, pc}
 800cf30:	200026d0 	.word	0x200026d0

0800cf34 <_Balloc>:
 800cf34:	b570      	push	{r4, r5, r6, lr}
 800cf36:	69c6      	ldr	r6, [r0, #28]
 800cf38:	4604      	mov	r4, r0
 800cf3a:	460d      	mov	r5, r1
 800cf3c:	b976      	cbnz	r6, 800cf5c <_Balloc+0x28>
 800cf3e:	2010      	movs	r0, #16
 800cf40:	f7fe f904 	bl	800b14c <malloc>
 800cf44:	4602      	mov	r2, r0
 800cf46:	61e0      	str	r0, [r4, #28]
 800cf48:	b920      	cbnz	r0, 800cf54 <_Balloc+0x20>
 800cf4a:	4b18      	ldr	r3, [pc, #96]	; (800cfac <_Balloc+0x78>)
 800cf4c:	4818      	ldr	r0, [pc, #96]	; (800cfb0 <_Balloc+0x7c>)
 800cf4e:	216b      	movs	r1, #107	; 0x6b
 800cf50:	f000 ff3a 	bl	800ddc8 <__assert_func>
 800cf54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cf58:	6006      	str	r6, [r0, #0]
 800cf5a:	60c6      	str	r6, [r0, #12]
 800cf5c:	69e6      	ldr	r6, [r4, #28]
 800cf5e:	68f3      	ldr	r3, [r6, #12]
 800cf60:	b183      	cbz	r3, 800cf84 <_Balloc+0x50>
 800cf62:	69e3      	ldr	r3, [r4, #28]
 800cf64:	68db      	ldr	r3, [r3, #12]
 800cf66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cf6a:	b9b8      	cbnz	r0, 800cf9c <_Balloc+0x68>
 800cf6c:	2101      	movs	r1, #1
 800cf6e:	fa01 f605 	lsl.w	r6, r1, r5
 800cf72:	1d72      	adds	r2, r6, #5
 800cf74:	0092      	lsls	r2, r2, #2
 800cf76:	4620      	mov	r0, r4
 800cf78:	f000 ff44 	bl	800de04 <_calloc_r>
 800cf7c:	b160      	cbz	r0, 800cf98 <_Balloc+0x64>
 800cf7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cf82:	e00e      	b.n	800cfa2 <_Balloc+0x6e>
 800cf84:	2221      	movs	r2, #33	; 0x21
 800cf86:	2104      	movs	r1, #4
 800cf88:	4620      	mov	r0, r4
 800cf8a:	f000 ff3b 	bl	800de04 <_calloc_r>
 800cf8e:	69e3      	ldr	r3, [r4, #28]
 800cf90:	60f0      	str	r0, [r6, #12]
 800cf92:	68db      	ldr	r3, [r3, #12]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d1e4      	bne.n	800cf62 <_Balloc+0x2e>
 800cf98:	2000      	movs	r0, #0
 800cf9a:	bd70      	pop	{r4, r5, r6, pc}
 800cf9c:	6802      	ldr	r2, [r0, #0]
 800cf9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cfa8:	e7f7      	b.n	800cf9a <_Balloc+0x66>
 800cfaa:	bf00      	nop
 800cfac:	0800e7b8 	.word	0x0800e7b8
 800cfb0:	0800e838 	.word	0x0800e838

0800cfb4 <_Bfree>:
 800cfb4:	b570      	push	{r4, r5, r6, lr}
 800cfb6:	69c6      	ldr	r6, [r0, #28]
 800cfb8:	4605      	mov	r5, r0
 800cfba:	460c      	mov	r4, r1
 800cfbc:	b976      	cbnz	r6, 800cfdc <_Bfree+0x28>
 800cfbe:	2010      	movs	r0, #16
 800cfc0:	f7fe f8c4 	bl	800b14c <malloc>
 800cfc4:	4602      	mov	r2, r0
 800cfc6:	61e8      	str	r0, [r5, #28]
 800cfc8:	b920      	cbnz	r0, 800cfd4 <_Bfree+0x20>
 800cfca:	4b09      	ldr	r3, [pc, #36]	; (800cff0 <_Bfree+0x3c>)
 800cfcc:	4809      	ldr	r0, [pc, #36]	; (800cff4 <_Bfree+0x40>)
 800cfce:	218f      	movs	r1, #143	; 0x8f
 800cfd0:	f000 fefa 	bl	800ddc8 <__assert_func>
 800cfd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cfd8:	6006      	str	r6, [r0, #0]
 800cfda:	60c6      	str	r6, [r0, #12]
 800cfdc:	b13c      	cbz	r4, 800cfee <_Bfree+0x3a>
 800cfde:	69eb      	ldr	r3, [r5, #28]
 800cfe0:	6862      	ldr	r2, [r4, #4]
 800cfe2:	68db      	ldr	r3, [r3, #12]
 800cfe4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cfe8:	6021      	str	r1, [r4, #0]
 800cfea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cfee:	bd70      	pop	{r4, r5, r6, pc}
 800cff0:	0800e7b8 	.word	0x0800e7b8
 800cff4:	0800e838 	.word	0x0800e838

0800cff8 <__multadd>:
 800cff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cffc:	690d      	ldr	r5, [r1, #16]
 800cffe:	4607      	mov	r7, r0
 800d000:	460c      	mov	r4, r1
 800d002:	461e      	mov	r6, r3
 800d004:	f101 0c14 	add.w	ip, r1, #20
 800d008:	2000      	movs	r0, #0
 800d00a:	f8dc 3000 	ldr.w	r3, [ip]
 800d00e:	b299      	uxth	r1, r3
 800d010:	fb02 6101 	mla	r1, r2, r1, r6
 800d014:	0c1e      	lsrs	r6, r3, #16
 800d016:	0c0b      	lsrs	r3, r1, #16
 800d018:	fb02 3306 	mla	r3, r2, r6, r3
 800d01c:	b289      	uxth	r1, r1
 800d01e:	3001      	adds	r0, #1
 800d020:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d024:	4285      	cmp	r5, r0
 800d026:	f84c 1b04 	str.w	r1, [ip], #4
 800d02a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d02e:	dcec      	bgt.n	800d00a <__multadd+0x12>
 800d030:	b30e      	cbz	r6, 800d076 <__multadd+0x7e>
 800d032:	68a3      	ldr	r3, [r4, #8]
 800d034:	42ab      	cmp	r3, r5
 800d036:	dc19      	bgt.n	800d06c <__multadd+0x74>
 800d038:	6861      	ldr	r1, [r4, #4]
 800d03a:	4638      	mov	r0, r7
 800d03c:	3101      	adds	r1, #1
 800d03e:	f7ff ff79 	bl	800cf34 <_Balloc>
 800d042:	4680      	mov	r8, r0
 800d044:	b928      	cbnz	r0, 800d052 <__multadd+0x5a>
 800d046:	4602      	mov	r2, r0
 800d048:	4b0c      	ldr	r3, [pc, #48]	; (800d07c <__multadd+0x84>)
 800d04a:	480d      	ldr	r0, [pc, #52]	; (800d080 <__multadd+0x88>)
 800d04c:	21ba      	movs	r1, #186	; 0xba
 800d04e:	f000 febb 	bl	800ddc8 <__assert_func>
 800d052:	6922      	ldr	r2, [r4, #16]
 800d054:	3202      	adds	r2, #2
 800d056:	f104 010c 	add.w	r1, r4, #12
 800d05a:	0092      	lsls	r2, r2, #2
 800d05c:	300c      	adds	r0, #12
 800d05e:	f7ff f893 	bl	800c188 <memcpy>
 800d062:	4621      	mov	r1, r4
 800d064:	4638      	mov	r0, r7
 800d066:	f7ff ffa5 	bl	800cfb4 <_Bfree>
 800d06a:	4644      	mov	r4, r8
 800d06c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d070:	3501      	adds	r5, #1
 800d072:	615e      	str	r6, [r3, #20]
 800d074:	6125      	str	r5, [r4, #16]
 800d076:	4620      	mov	r0, r4
 800d078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d07c:	0800e827 	.word	0x0800e827
 800d080:	0800e838 	.word	0x0800e838

0800d084 <__hi0bits>:
 800d084:	0c03      	lsrs	r3, r0, #16
 800d086:	041b      	lsls	r3, r3, #16
 800d088:	b9d3      	cbnz	r3, 800d0c0 <__hi0bits+0x3c>
 800d08a:	0400      	lsls	r0, r0, #16
 800d08c:	2310      	movs	r3, #16
 800d08e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d092:	bf04      	itt	eq
 800d094:	0200      	lsleq	r0, r0, #8
 800d096:	3308      	addeq	r3, #8
 800d098:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d09c:	bf04      	itt	eq
 800d09e:	0100      	lsleq	r0, r0, #4
 800d0a0:	3304      	addeq	r3, #4
 800d0a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d0a6:	bf04      	itt	eq
 800d0a8:	0080      	lsleq	r0, r0, #2
 800d0aa:	3302      	addeq	r3, #2
 800d0ac:	2800      	cmp	r0, #0
 800d0ae:	db05      	blt.n	800d0bc <__hi0bits+0x38>
 800d0b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d0b4:	f103 0301 	add.w	r3, r3, #1
 800d0b8:	bf08      	it	eq
 800d0ba:	2320      	moveq	r3, #32
 800d0bc:	4618      	mov	r0, r3
 800d0be:	4770      	bx	lr
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	e7e4      	b.n	800d08e <__hi0bits+0xa>

0800d0c4 <__lo0bits>:
 800d0c4:	6803      	ldr	r3, [r0, #0]
 800d0c6:	f013 0207 	ands.w	r2, r3, #7
 800d0ca:	d00c      	beq.n	800d0e6 <__lo0bits+0x22>
 800d0cc:	07d9      	lsls	r1, r3, #31
 800d0ce:	d422      	bmi.n	800d116 <__lo0bits+0x52>
 800d0d0:	079a      	lsls	r2, r3, #30
 800d0d2:	bf49      	itett	mi
 800d0d4:	085b      	lsrmi	r3, r3, #1
 800d0d6:	089b      	lsrpl	r3, r3, #2
 800d0d8:	6003      	strmi	r3, [r0, #0]
 800d0da:	2201      	movmi	r2, #1
 800d0dc:	bf5c      	itt	pl
 800d0de:	6003      	strpl	r3, [r0, #0]
 800d0e0:	2202      	movpl	r2, #2
 800d0e2:	4610      	mov	r0, r2
 800d0e4:	4770      	bx	lr
 800d0e6:	b299      	uxth	r1, r3
 800d0e8:	b909      	cbnz	r1, 800d0ee <__lo0bits+0x2a>
 800d0ea:	0c1b      	lsrs	r3, r3, #16
 800d0ec:	2210      	movs	r2, #16
 800d0ee:	b2d9      	uxtb	r1, r3
 800d0f0:	b909      	cbnz	r1, 800d0f6 <__lo0bits+0x32>
 800d0f2:	3208      	adds	r2, #8
 800d0f4:	0a1b      	lsrs	r3, r3, #8
 800d0f6:	0719      	lsls	r1, r3, #28
 800d0f8:	bf04      	itt	eq
 800d0fa:	091b      	lsreq	r3, r3, #4
 800d0fc:	3204      	addeq	r2, #4
 800d0fe:	0799      	lsls	r1, r3, #30
 800d100:	bf04      	itt	eq
 800d102:	089b      	lsreq	r3, r3, #2
 800d104:	3202      	addeq	r2, #2
 800d106:	07d9      	lsls	r1, r3, #31
 800d108:	d403      	bmi.n	800d112 <__lo0bits+0x4e>
 800d10a:	085b      	lsrs	r3, r3, #1
 800d10c:	f102 0201 	add.w	r2, r2, #1
 800d110:	d003      	beq.n	800d11a <__lo0bits+0x56>
 800d112:	6003      	str	r3, [r0, #0]
 800d114:	e7e5      	b.n	800d0e2 <__lo0bits+0x1e>
 800d116:	2200      	movs	r2, #0
 800d118:	e7e3      	b.n	800d0e2 <__lo0bits+0x1e>
 800d11a:	2220      	movs	r2, #32
 800d11c:	e7e1      	b.n	800d0e2 <__lo0bits+0x1e>
	...

0800d120 <__i2b>:
 800d120:	b510      	push	{r4, lr}
 800d122:	460c      	mov	r4, r1
 800d124:	2101      	movs	r1, #1
 800d126:	f7ff ff05 	bl	800cf34 <_Balloc>
 800d12a:	4602      	mov	r2, r0
 800d12c:	b928      	cbnz	r0, 800d13a <__i2b+0x1a>
 800d12e:	4b05      	ldr	r3, [pc, #20]	; (800d144 <__i2b+0x24>)
 800d130:	4805      	ldr	r0, [pc, #20]	; (800d148 <__i2b+0x28>)
 800d132:	f240 1145 	movw	r1, #325	; 0x145
 800d136:	f000 fe47 	bl	800ddc8 <__assert_func>
 800d13a:	2301      	movs	r3, #1
 800d13c:	6144      	str	r4, [r0, #20]
 800d13e:	6103      	str	r3, [r0, #16]
 800d140:	bd10      	pop	{r4, pc}
 800d142:	bf00      	nop
 800d144:	0800e827 	.word	0x0800e827
 800d148:	0800e838 	.word	0x0800e838

0800d14c <__multiply>:
 800d14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d150:	4691      	mov	r9, r2
 800d152:	690a      	ldr	r2, [r1, #16]
 800d154:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d158:	429a      	cmp	r2, r3
 800d15a:	bfb8      	it	lt
 800d15c:	460b      	movlt	r3, r1
 800d15e:	460c      	mov	r4, r1
 800d160:	bfbc      	itt	lt
 800d162:	464c      	movlt	r4, r9
 800d164:	4699      	movlt	r9, r3
 800d166:	6927      	ldr	r7, [r4, #16]
 800d168:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d16c:	68a3      	ldr	r3, [r4, #8]
 800d16e:	6861      	ldr	r1, [r4, #4]
 800d170:	eb07 060a 	add.w	r6, r7, sl
 800d174:	42b3      	cmp	r3, r6
 800d176:	b085      	sub	sp, #20
 800d178:	bfb8      	it	lt
 800d17a:	3101      	addlt	r1, #1
 800d17c:	f7ff feda 	bl	800cf34 <_Balloc>
 800d180:	b930      	cbnz	r0, 800d190 <__multiply+0x44>
 800d182:	4602      	mov	r2, r0
 800d184:	4b44      	ldr	r3, [pc, #272]	; (800d298 <__multiply+0x14c>)
 800d186:	4845      	ldr	r0, [pc, #276]	; (800d29c <__multiply+0x150>)
 800d188:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d18c:	f000 fe1c 	bl	800ddc8 <__assert_func>
 800d190:	f100 0514 	add.w	r5, r0, #20
 800d194:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d198:	462b      	mov	r3, r5
 800d19a:	2200      	movs	r2, #0
 800d19c:	4543      	cmp	r3, r8
 800d19e:	d321      	bcc.n	800d1e4 <__multiply+0x98>
 800d1a0:	f104 0314 	add.w	r3, r4, #20
 800d1a4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d1a8:	f109 0314 	add.w	r3, r9, #20
 800d1ac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d1b0:	9202      	str	r2, [sp, #8]
 800d1b2:	1b3a      	subs	r2, r7, r4
 800d1b4:	3a15      	subs	r2, #21
 800d1b6:	f022 0203 	bic.w	r2, r2, #3
 800d1ba:	3204      	adds	r2, #4
 800d1bc:	f104 0115 	add.w	r1, r4, #21
 800d1c0:	428f      	cmp	r7, r1
 800d1c2:	bf38      	it	cc
 800d1c4:	2204      	movcc	r2, #4
 800d1c6:	9201      	str	r2, [sp, #4]
 800d1c8:	9a02      	ldr	r2, [sp, #8]
 800d1ca:	9303      	str	r3, [sp, #12]
 800d1cc:	429a      	cmp	r2, r3
 800d1ce:	d80c      	bhi.n	800d1ea <__multiply+0x9e>
 800d1d0:	2e00      	cmp	r6, #0
 800d1d2:	dd03      	ble.n	800d1dc <__multiply+0x90>
 800d1d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d05b      	beq.n	800d294 <__multiply+0x148>
 800d1dc:	6106      	str	r6, [r0, #16]
 800d1de:	b005      	add	sp, #20
 800d1e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1e4:	f843 2b04 	str.w	r2, [r3], #4
 800d1e8:	e7d8      	b.n	800d19c <__multiply+0x50>
 800d1ea:	f8b3 a000 	ldrh.w	sl, [r3]
 800d1ee:	f1ba 0f00 	cmp.w	sl, #0
 800d1f2:	d024      	beq.n	800d23e <__multiply+0xf2>
 800d1f4:	f104 0e14 	add.w	lr, r4, #20
 800d1f8:	46a9      	mov	r9, r5
 800d1fa:	f04f 0c00 	mov.w	ip, #0
 800d1fe:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d202:	f8d9 1000 	ldr.w	r1, [r9]
 800d206:	fa1f fb82 	uxth.w	fp, r2
 800d20a:	b289      	uxth	r1, r1
 800d20c:	fb0a 110b 	mla	r1, sl, fp, r1
 800d210:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d214:	f8d9 2000 	ldr.w	r2, [r9]
 800d218:	4461      	add	r1, ip
 800d21a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d21e:	fb0a c20b 	mla	r2, sl, fp, ip
 800d222:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d226:	b289      	uxth	r1, r1
 800d228:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d22c:	4577      	cmp	r7, lr
 800d22e:	f849 1b04 	str.w	r1, [r9], #4
 800d232:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d236:	d8e2      	bhi.n	800d1fe <__multiply+0xb2>
 800d238:	9a01      	ldr	r2, [sp, #4]
 800d23a:	f845 c002 	str.w	ip, [r5, r2]
 800d23e:	9a03      	ldr	r2, [sp, #12]
 800d240:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d244:	3304      	adds	r3, #4
 800d246:	f1b9 0f00 	cmp.w	r9, #0
 800d24a:	d021      	beq.n	800d290 <__multiply+0x144>
 800d24c:	6829      	ldr	r1, [r5, #0]
 800d24e:	f104 0c14 	add.w	ip, r4, #20
 800d252:	46ae      	mov	lr, r5
 800d254:	f04f 0a00 	mov.w	sl, #0
 800d258:	f8bc b000 	ldrh.w	fp, [ip]
 800d25c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d260:	fb09 220b 	mla	r2, r9, fp, r2
 800d264:	4452      	add	r2, sl
 800d266:	b289      	uxth	r1, r1
 800d268:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d26c:	f84e 1b04 	str.w	r1, [lr], #4
 800d270:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d274:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d278:	f8be 1000 	ldrh.w	r1, [lr]
 800d27c:	fb09 110a 	mla	r1, r9, sl, r1
 800d280:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d284:	4567      	cmp	r7, ip
 800d286:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d28a:	d8e5      	bhi.n	800d258 <__multiply+0x10c>
 800d28c:	9a01      	ldr	r2, [sp, #4]
 800d28e:	50a9      	str	r1, [r5, r2]
 800d290:	3504      	adds	r5, #4
 800d292:	e799      	b.n	800d1c8 <__multiply+0x7c>
 800d294:	3e01      	subs	r6, #1
 800d296:	e79b      	b.n	800d1d0 <__multiply+0x84>
 800d298:	0800e827 	.word	0x0800e827
 800d29c:	0800e838 	.word	0x0800e838

0800d2a0 <__pow5mult>:
 800d2a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2a4:	4615      	mov	r5, r2
 800d2a6:	f012 0203 	ands.w	r2, r2, #3
 800d2aa:	4606      	mov	r6, r0
 800d2ac:	460f      	mov	r7, r1
 800d2ae:	d007      	beq.n	800d2c0 <__pow5mult+0x20>
 800d2b0:	4c25      	ldr	r4, [pc, #148]	; (800d348 <__pow5mult+0xa8>)
 800d2b2:	3a01      	subs	r2, #1
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d2ba:	f7ff fe9d 	bl	800cff8 <__multadd>
 800d2be:	4607      	mov	r7, r0
 800d2c0:	10ad      	asrs	r5, r5, #2
 800d2c2:	d03d      	beq.n	800d340 <__pow5mult+0xa0>
 800d2c4:	69f4      	ldr	r4, [r6, #28]
 800d2c6:	b97c      	cbnz	r4, 800d2e8 <__pow5mult+0x48>
 800d2c8:	2010      	movs	r0, #16
 800d2ca:	f7fd ff3f 	bl	800b14c <malloc>
 800d2ce:	4602      	mov	r2, r0
 800d2d0:	61f0      	str	r0, [r6, #28]
 800d2d2:	b928      	cbnz	r0, 800d2e0 <__pow5mult+0x40>
 800d2d4:	4b1d      	ldr	r3, [pc, #116]	; (800d34c <__pow5mult+0xac>)
 800d2d6:	481e      	ldr	r0, [pc, #120]	; (800d350 <__pow5mult+0xb0>)
 800d2d8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d2dc:	f000 fd74 	bl	800ddc8 <__assert_func>
 800d2e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d2e4:	6004      	str	r4, [r0, #0]
 800d2e6:	60c4      	str	r4, [r0, #12]
 800d2e8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d2ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d2f0:	b94c      	cbnz	r4, 800d306 <__pow5mult+0x66>
 800d2f2:	f240 2171 	movw	r1, #625	; 0x271
 800d2f6:	4630      	mov	r0, r6
 800d2f8:	f7ff ff12 	bl	800d120 <__i2b>
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	f8c8 0008 	str.w	r0, [r8, #8]
 800d302:	4604      	mov	r4, r0
 800d304:	6003      	str	r3, [r0, #0]
 800d306:	f04f 0900 	mov.w	r9, #0
 800d30a:	07eb      	lsls	r3, r5, #31
 800d30c:	d50a      	bpl.n	800d324 <__pow5mult+0x84>
 800d30e:	4639      	mov	r1, r7
 800d310:	4622      	mov	r2, r4
 800d312:	4630      	mov	r0, r6
 800d314:	f7ff ff1a 	bl	800d14c <__multiply>
 800d318:	4639      	mov	r1, r7
 800d31a:	4680      	mov	r8, r0
 800d31c:	4630      	mov	r0, r6
 800d31e:	f7ff fe49 	bl	800cfb4 <_Bfree>
 800d322:	4647      	mov	r7, r8
 800d324:	106d      	asrs	r5, r5, #1
 800d326:	d00b      	beq.n	800d340 <__pow5mult+0xa0>
 800d328:	6820      	ldr	r0, [r4, #0]
 800d32a:	b938      	cbnz	r0, 800d33c <__pow5mult+0x9c>
 800d32c:	4622      	mov	r2, r4
 800d32e:	4621      	mov	r1, r4
 800d330:	4630      	mov	r0, r6
 800d332:	f7ff ff0b 	bl	800d14c <__multiply>
 800d336:	6020      	str	r0, [r4, #0]
 800d338:	f8c0 9000 	str.w	r9, [r0]
 800d33c:	4604      	mov	r4, r0
 800d33e:	e7e4      	b.n	800d30a <__pow5mult+0x6a>
 800d340:	4638      	mov	r0, r7
 800d342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d346:	bf00      	nop
 800d348:	0800e988 	.word	0x0800e988
 800d34c:	0800e7b8 	.word	0x0800e7b8
 800d350:	0800e838 	.word	0x0800e838

0800d354 <__lshift>:
 800d354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d358:	460c      	mov	r4, r1
 800d35a:	6849      	ldr	r1, [r1, #4]
 800d35c:	6923      	ldr	r3, [r4, #16]
 800d35e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d362:	68a3      	ldr	r3, [r4, #8]
 800d364:	4607      	mov	r7, r0
 800d366:	4691      	mov	r9, r2
 800d368:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d36c:	f108 0601 	add.w	r6, r8, #1
 800d370:	42b3      	cmp	r3, r6
 800d372:	db0b      	blt.n	800d38c <__lshift+0x38>
 800d374:	4638      	mov	r0, r7
 800d376:	f7ff fddd 	bl	800cf34 <_Balloc>
 800d37a:	4605      	mov	r5, r0
 800d37c:	b948      	cbnz	r0, 800d392 <__lshift+0x3e>
 800d37e:	4602      	mov	r2, r0
 800d380:	4b28      	ldr	r3, [pc, #160]	; (800d424 <__lshift+0xd0>)
 800d382:	4829      	ldr	r0, [pc, #164]	; (800d428 <__lshift+0xd4>)
 800d384:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d388:	f000 fd1e 	bl	800ddc8 <__assert_func>
 800d38c:	3101      	adds	r1, #1
 800d38e:	005b      	lsls	r3, r3, #1
 800d390:	e7ee      	b.n	800d370 <__lshift+0x1c>
 800d392:	2300      	movs	r3, #0
 800d394:	f100 0114 	add.w	r1, r0, #20
 800d398:	f100 0210 	add.w	r2, r0, #16
 800d39c:	4618      	mov	r0, r3
 800d39e:	4553      	cmp	r3, sl
 800d3a0:	db33      	blt.n	800d40a <__lshift+0xb6>
 800d3a2:	6920      	ldr	r0, [r4, #16]
 800d3a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d3a8:	f104 0314 	add.w	r3, r4, #20
 800d3ac:	f019 091f 	ands.w	r9, r9, #31
 800d3b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d3b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d3b8:	d02b      	beq.n	800d412 <__lshift+0xbe>
 800d3ba:	f1c9 0e20 	rsb	lr, r9, #32
 800d3be:	468a      	mov	sl, r1
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	6818      	ldr	r0, [r3, #0]
 800d3c4:	fa00 f009 	lsl.w	r0, r0, r9
 800d3c8:	4310      	orrs	r0, r2
 800d3ca:	f84a 0b04 	str.w	r0, [sl], #4
 800d3ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3d2:	459c      	cmp	ip, r3
 800d3d4:	fa22 f20e 	lsr.w	r2, r2, lr
 800d3d8:	d8f3      	bhi.n	800d3c2 <__lshift+0x6e>
 800d3da:	ebac 0304 	sub.w	r3, ip, r4
 800d3de:	3b15      	subs	r3, #21
 800d3e0:	f023 0303 	bic.w	r3, r3, #3
 800d3e4:	3304      	adds	r3, #4
 800d3e6:	f104 0015 	add.w	r0, r4, #21
 800d3ea:	4584      	cmp	ip, r0
 800d3ec:	bf38      	it	cc
 800d3ee:	2304      	movcc	r3, #4
 800d3f0:	50ca      	str	r2, [r1, r3]
 800d3f2:	b10a      	cbz	r2, 800d3f8 <__lshift+0xa4>
 800d3f4:	f108 0602 	add.w	r6, r8, #2
 800d3f8:	3e01      	subs	r6, #1
 800d3fa:	4638      	mov	r0, r7
 800d3fc:	612e      	str	r6, [r5, #16]
 800d3fe:	4621      	mov	r1, r4
 800d400:	f7ff fdd8 	bl	800cfb4 <_Bfree>
 800d404:	4628      	mov	r0, r5
 800d406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d40a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d40e:	3301      	adds	r3, #1
 800d410:	e7c5      	b.n	800d39e <__lshift+0x4a>
 800d412:	3904      	subs	r1, #4
 800d414:	f853 2b04 	ldr.w	r2, [r3], #4
 800d418:	f841 2f04 	str.w	r2, [r1, #4]!
 800d41c:	459c      	cmp	ip, r3
 800d41e:	d8f9      	bhi.n	800d414 <__lshift+0xc0>
 800d420:	e7ea      	b.n	800d3f8 <__lshift+0xa4>
 800d422:	bf00      	nop
 800d424:	0800e827 	.word	0x0800e827
 800d428:	0800e838 	.word	0x0800e838

0800d42c <__mcmp>:
 800d42c:	b530      	push	{r4, r5, lr}
 800d42e:	6902      	ldr	r2, [r0, #16]
 800d430:	690c      	ldr	r4, [r1, #16]
 800d432:	1b12      	subs	r2, r2, r4
 800d434:	d10e      	bne.n	800d454 <__mcmp+0x28>
 800d436:	f100 0314 	add.w	r3, r0, #20
 800d43a:	3114      	adds	r1, #20
 800d43c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d440:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d444:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d448:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d44c:	42a5      	cmp	r5, r4
 800d44e:	d003      	beq.n	800d458 <__mcmp+0x2c>
 800d450:	d305      	bcc.n	800d45e <__mcmp+0x32>
 800d452:	2201      	movs	r2, #1
 800d454:	4610      	mov	r0, r2
 800d456:	bd30      	pop	{r4, r5, pc}
 800d458:	4283      	cmp	r3, r0
 800d45a:	d3f3      	bcc.n	800d444 <__mcmp+0x18>
 800d45c:	e7fa      	b.n	800d454 <__mcmp+0x28>
 800d45e:	f04f 32ff 	mov.w	r2, #4294967295
 800d462:	e7f7      	b.n	800d454 <__mcmp+0x28>

0800d464 <__mdiff>:
 800d464:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d468:	460c      	mov	r4, r1
 800d46a:	4606      	mov	r6, r0
 800d46c:	4611      	mov	r1, r2
 800d46e:	4620      	mov	r0, r4
 800d470:	4690      	mov	r8, r2
 800d472:	f7ff ffdb 	bl	800d42c <__mcmp>
 800d476:	1e05      	subs	r5, r0, #0
 800d478:	d110      	bne.n	800d49c <__mdiff+0x38>
 800d47a:	4629      	mov	r1, r5
 800d47c:	4630      	mov	r0, r6
 800d47e:	f7ff fd59 	bl	800cf34 <_Balloc>
 800d482:	b930      	cbnz	r0, 800d492 <__mdiff+0x2e>
 800d484:	4b3a      	ldr	r3, [pc, #232]	; (800d570 <__mdiff+0x10c>)
 800d486:	4602      	mov	r2, r0
 800d488:	f240 2137 	movw	r1, #567	; 0x237
 800d48c:	4839      	ldr	r0, [pc, #228]	; (800d574 <__mdiff+0x110>)
 800d48e:	f000 fc9b 	bl	800ddc8 <__assert_func>
 800d492:	2301      	movs	r3, #1
 800d494:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d498:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d49c:	bfa4      	itt	ge
 800d49e:	4643      	movge	r3, r8
 800d4a0:	46a0      	movge	r8, r4
 800d4a2:	4630      	mov	r0, r6
 800d4a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d4a8:	bfa6      	itte	ge
 800d4aa:	461c      	movge	r4, r3
 800d4ac:	2500      	movge	r5, #0
 800d4ae:	2501      	movlt	r5, #1
 800d4b0:	f7ff fd40 	bl	800cf34 <_Balloc>
 800d4b4:	b920      	cbnz	r0, 800d4c0 <__mdiff+0x5c>
 800d4b6:	4b2e      	ldr	r3, [pc, #184]	; (800d570 <__mdiff+0x10c>)
 800d4b8:	4602      	mov	r2, r0
 800d4ba:	f240 2145 	movw	r1, #581	; 0x245
 800d4be:	e7e5      	b.n	800d48c <__mdiff+0x28>
 800d4c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d4c4:	6926      	ldr	r6, [r4, #16]
 800d4c6:	60c5      	str	r5, [r0, #12]
 800d4c8:	f104 0914 	add.w	r9, r4, #20
 800d4cc:	f108 0514 	add.w	r5, r8, #20
 800d4d0:	f100 0e14 	add.w	lr, r0, #20
 800d4d4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d4d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d4dc:	f108 0210 	add.w	r2, r8, #16
 800d4e0:	46f2      	mov	sl, lr
 800d4e2:	2100      	movs	r1, #0
 800d4e4:	f859 3b04 	ldr.w	r3, [r9], #4
 800d4e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d4ec:	fa11 f88b 	uxtah	r8, r1, fp
 800d4f0:	b299      	uxth	r1, r3
 800d4f2:	0c1b      	lsrs	r3, r3, #16
 800d4f4:	eba8 0801 	sub.w	r8, r8, r1
 800d4f8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d4fc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d500:	fa1f f888 	uxth.w	r8, r8
 800d504:	1419      	asrs	r1, r3, #16
 800d506:	454e      	cmp	r6, r9
 800d508:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d50c:	f84a 3b04 	str.w	r3, [sl], #4
 800d510:	d8e8      	bhi.n	800d4e4 <__mdiff+0x80>
 800d512:	1b33      	subs	r3, r6, r4
 800d514:	3b15      	subs	r3, #21
 800d516:	f023 0303 	bic.w	r3, r3, #3
 800d51a:	3304      	adds	r3, #4
 800d51c:	3415      	adds	r4, #21
 800d51e:	42a6      	cmp	r6, r4
 800d520:	bf38      	it	cc
 800d522:	2304      	movcc	r3, #4
 800d524:	441d      	add	r5, r3
 800d526:	4473      	add	r3, lr
 800d528:	469e      	mov	lr, r3
 800d52a:	462e      	mov	r6, r5
 800d52c:	4566      	cmp	r6, ip
 800d52e:	d30e      	bcc.n	800d54e <__mdiff+0xea>
 800d530:	f10c 0203 	add.w	r2, ip, #3
 800d534:	1b52      	subs	r2, r2, r5
 800d536:	f022 0203 	bic.w	r2, r2, #3
 800d53a:	3d03      	subs	r5, #3
 800d53c:	45ac      	cmp	ip, r5
 800d53e:	bf38      	it	cc
 800d540:	2200      	movcc	r2, #0
 800d542:	4413      	add	r3, r2
 800d544:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d548:	b17a      	cbz	r2, 800d56a <__mdiff+0x106>
 800d54a:	6107      	str	r7, [r0, #16]
 800d54c:	e7a4      	b.n	800d498 <__mdiff+0x34>
 800d54e:	f856 8b04 	ldr.w	r8, [r6], #4
 800d552:	fa11 f288 	uxtah	r2, r1, r8
 800d556:	1414      	asrs	r4, r2, #16
 800d558:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d55c:	b292      	uxth	r2, r2
 800d55e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d562:	f84e 2b04 	str.w	r2, [lr], #4
 800d566:	1421      	asrs	r1, r4, #16
 800d568:	e7e0      	b.n	800d52c <__mdiff+0xc8>
 800d56a:	3f01      	subs	r7, #1
 800d56c:	e7ea      	b.n	800d544 <__mdiff+0xe0>
 800d56e:	bf00      	nop
 800d570:	0800e827 	.word	0x0800e827
 800d574:	0800e838 	.word	0x0800e838

0800d578 <__d2b>:
 800d578:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d57c:	460f      	mov	r7, r1
 800d57e:	2101      	movs	r1, #1
 800d580:	ec59 8b10 	vmov	r8, r9, d0
 800d584:	4616      	mov	r6, r2
 800d586:	f7ff fcd5 	bl	800cf34 <_Balloc>
 800d58a:	4604      	mov	r4, r0
 800d58c:	b930      	cbnz	r0, 800d59c <__d2b+0x24>
 800d58e:	4602      	mov	r2, r0
 800d590:	4b24      	ldr	r3, [pc, #144]	; (800d624 <__d2b+0xac>)
 800d592:	4825      	ldr	r0, [pc, #148]	; (800d628 <__d2b+0xb0>)
 800d594:	f240 310f 	movw	r1, #783	; 0x30f
 800d598:	f000 fc16 	bl	800ddc8 <__assert_func>
 800d59c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d5a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d5a4:	bb2d      	cbnz	r5, 800d5f2 <__d2b+0x7a>
 800d5a6:	9301      	str	r3, [sp, #4]
 800d5a8:	f1b8 0300 	subs.w	r3, r8, #0
 800d5ac:	d026      	beq.n	800d5fc <__d2b+0x84>
 800d5ae:	4668      	mov	r0, sp
 800d5b0:	9300      	str	r3, [sp, #0]
 800d5b2:	f7ff fd87 	bl	800d0c4 <__lo0bits>
 800d5b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d5ba:	b1e8      	cbz	r0, 800d5f8 <__d2b+0x80>
 800d5bc:	f1c0 0320 	rsb	r3, r0, #32
 800d5c0:	fa02 f303 	lsl.w	r3, r2, r3
 800d5c4:	430b      	orrs	r3, r1
 800d5c6:	40c2      	lsrs	r2, r0
 800d5c8:	6163      	str	r3, [r4, #20]
 800d5ca:	9201      	str	r2, [sp, #4]
 800d5cc:	9b01      	ldr	r3, [sp, #4]
 800d5ce:	61a3      	str	r3, [r4, #24]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	bf14      	ite	ne
 800d5d4:	2202      	movne	r2, #2
 800d5d6:	2201      	moveq	r2, #1
 800d5d8:	6122      	str	r2, [r4, #16]
 800d5da:	b1bd      	cbz	r5, 800d60c <__d2b+0x94>
 800d5dc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d5e0:	4405      	add	r5, r0
 800d5e2:	603d      	str	r5, [r7, #0]
 800d5e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d5e8:	6030      	str	r0, [r6, #0]
 800d5ea:	4620      	mov	r0, r4
 800d5ec:	b003      	add	sp, #12
 800d5ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d5f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d5f6:	e7d6      	b.n	800d5a6 <__d2b+0x2e>
 800d5f8:	6161      	str	r1, [r4, #20]
 800d5fa:	e7e7      	b.n	800d5cc <__d2b+0x54>
 800d5fc:	a801      	add	r0, sp, #4
 800d5fe:	f7ff fd61 	bl	800d0c4 <__lo0bits>
 800d602:	9b01      	ldr	r3, [sp, #4]
 800d604:	6163      	str	r3, [r4, #20]
 800d606:	3020      	adds	r0, #32
 800d608:	2201      	movs	r2, #1
 800d60a:	e7e5      	b.n	800d5d8 <__d2b+0x60>
 800d60c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d610:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d614:	6038      	str	r0, [r7, #0]
 800d616:	6918      	ldr	r0, [r3, #16]
 800d618:	f7ff fd34 	bl	800d084 <__hi0bits>
 800d61c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d620:	e7e2      	b.n	800d5e8 <__d2b+0x70>
 800d622:	bf00      	nop
 800d624:	0800e827 	.word	0x0800e827
 800d628:	0800e838 	.word	0x0800e838

0800d62c <__ssputs_r>:
 800d62c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d630:	688e      	ldr	r6, [r1, #8]
 800d632:	461f      	mov	r7, r3
 800d634:	42be      	cmp	r6, r7
 800d636:	680b      	ldr	r3, [r1, #0]
 800d638:	4682      	mov	sl, r0
 800d63a:	460c      	mov	r4, r1
 800d63c:	4690      	mov	r8, r2
 800d63e:	d82c      	bhi.n	800d69a <__ssputs_r+0x6e>
 800d640:	898a      	ldrh	r2, [r1, #12]
 800d642:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d646:	d026      	beq.n	800d696 <__ssputs_r+0x6a>
 800d648:	6965      	ldr	r5, [r4, #20]
 800d64a:	6909      	ldr	r1, [r1, #16]
 800d64c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d650:	eba3 0901 	sub.w	r9, r3, r1
 800d654:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d658:	1c7b      	adds	r3, r7, #1
 800d65a:	444b      	add	r3, r9
 800d65c:	106d      	asrs	r5, r5, #1
 800d65e:	429d      	cmp	r5, r3
 800d660:	bf38      	it	cc
 800d662:	461d      	movcc	r5, r3
 800d664:	0553      	lsls	r3, r2, #21
 800d666:	d527      	bpl.n	800d6b8 <__ssputs_r+0x8c>
 800d668:	4629      	mov	r1, r5
 800d66a:	f7fd fd9f 	bl	800b1ac <_malloc_r>
 800d66e:	4606      	mov	r6, r0
 800d670:	b360      	cbz	r0, 800d6cc <__ssputs_r+0xa0>
 800d672:	6921      	ldr	r1, [r4, #16]
 800d674:	464a      	mov	r2, r9
 800d676:	f7fe fd87 	bl	800c188 <memcpy>
 800d67a:	89a3      	ldrh	r3, [r4, #12]
 800d67c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d684:	81a3      	strh	r3, [r4, #12]
 800d686:	6126      	str	r6, [r4, #16]
 800d688:	6165      	str	r5, [r4, #20]
 800d68a:	444e      	add	r6, r9
 800d68c:	eba5 0509 	sub.w	r5, r5, r9
 800d690:	6026      	str	r6, [r4, #0]
 800d692:	60a5      	str	r5, [r4, #8]
 800d694:	463e      	mov	r6, r7
 800d696:	42be      	cmp	r6, r7
 800d698:	d900      	bls.n	800d69c <__ssputs_r+0x70>
 800d69a:	463e      	mov	r6, r7
 800d69c:	6820      	ldr	r0, [r4, #0]
 800d69e:	4632      	mov	r2, r6
 800d6a0:	4641      	mov	r1, r8
 800d6a2:	f7fe fc8b 	bl	800bfbc <memmove>
 800d6a6:	68a3      	ldr	r3, [r4, #8]
 800d6a8:	1b9b      	subs	r3, r3, r6
 800d6aa:	60a3      	str	r3, [r4, #8]
 800d6ac:	6823      	ldr	r3, [r4, #0]
 800d6ae:	4433      	add	r3, r6
 800d6b0:	6023      	str	r3, [r4, #0]
 800d6b2:	2000      	movs	r0, #0
 800d6b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6b8:	462a      	mov	r2, r5
 800d6ba:	f000 fbcb 	bl	800de54 <_realloc_r>
 800d6be:	4606      	mov	r6, r0
 800d6c0:	2800      	cmp	r0, #0
 800d6c2:	d1e0      	bne.n	800d686 <__ssputs_r+0x5a>
 800d6c4:	6921      	ldr	r1, [r4, #16]
 800d6c6:	4650      	mov	r0, sl
 800d6c8:	f7ff fbe8 	bl	800ce9c <_free_r>
 800d6cc:	230c      	movs	r3, #12
 800d6ce:	f8ca 3000 	str.w	r3, [sl]
 800d6d2:	89a3      	ldrh	r3, [r4, #12]
 800d6d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6d8:	81a3      	strh	r3, [r4, #12]
 800d6da:	f04f 30ff 	mov.w	r0, #4294967295
 800d6de:	e7e9      	b.n	800d6b4 <__ssputs_r+0x88>

0800d6e0 <_svfiprintf_r>:
 800d6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6e4:	4698      	mov	r8, r3
 800d6e6:	898b      	ldrh	r3, [r1, #12]
 800d6e8:	061b      	lsls	r3, r3, #24
 800d6ea:	b09d      	sub	sp, #116	; 0x74
 800d6ec:	4607      	mov	r7, r0
 800d6ee:	460d      	mov	r5, r1
 800d6f0:	4614      	mov	r4, r2
 800d6f2:	d50e      	bpl.n	800d712 <_svfiprintf_r+0x32>
 800d6f4:	690b      	ldr	r3, [r1, #16]
 800d6f6:	b963      	cbnz	r3, 800d712 <_svfiprintf_r+0x32>
 800d6f8:	2140      	movs	r1, #64	; 0x40
 800d6fa:	f7fd fd57 	bl	800b1ac <_malloc_r>
 800d6fe:	6028      	str	r0, [r5, #0]
 800d700:	6128      	str	r0, [r5, #16]
 800d702:	b920      	cbnz	r0, 800d70e <_svfiprintf_r+0x2e>
 800d704:	230c      	movs	r3, #12
 800d706:	603b      	str	r3, [r7, #0]
 800d708:	f04f 30ff 	mov.w	r0, #4294967295
 800d70c:	e0d0      	b.n	800d8b0 <_svfiprintf_r+0x1d0>
 800d70e:	2340      	movs	r3, #64	; 0x40
 800d710:	616b      	str	r3, [r5, #20]
 800d712:	2300      	movs	r3, #0
 800d714:	9309      	str	r3, [sp, #36]	; 0x24
 800d716:	2320      	movs	r3, #32
 800d718:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d71c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d720:	2330      	movs	r3, #48	; 0x30
 800d722:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d8c8 <_svfiprintf_r+0x1e8>
 800d726:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d72a:	f04f 0901 	mov.w	r9, #1
 800d72e:	4623      	mov	r3, r4
 800d730:	469a      	mov	sl, r3
 800d732:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d736:	b10a      	cbz	r2, 800d73c <_svfiprintf_r+0x5c>
 800d738:	2a25      	cmp	r2, #37	; 0x25
 800d73a:	d1f9      	bne.n	800d730 <_svfiprintf_r+0x50>
 800d73c:	ebba 0b04 	subs.w	fp, sl, r4
 800d740:	d00b      	beq.n	800d75a <_svfiprintf_r+0x7a>
 800d742:	465b      	mov	r3, fp
 800d744:	4622      	mov	r2, r4
 800d746:	4629      	mov	r1, r5
 800d748:	4638      	mov	r0, r7
 800d74a:	f7ff ff6f 	bl	800d62c <__ssputs_r>
 800d74e:	3001      	adds	r0, #1
 800d750:	f000 80a9 	beq.w	800d8a6 <_svfiprintf_r+0x1c6>
 800d754:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d756:	445a      	add	r2, fp
 800d758:	9209      	str	r2, [sp, #36]	; 0x24
 800d75a:	f89a 3000 	ldrb.w	r3, [sl]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	f000 80a1 	beq.w	800d8a6 <_svfiprintf_r+0x1c6>
 800d764:	2300      	movs	r3, #0
 800d766:	f04f 32ff 	mov.w	r2, #4294967295
 800d76a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d76e:	f10a 0a01 	add.w	sl, sl, #1
 800d772:	9304      	str	r3, [sp, #16]
 800d774:	9307      	str	r3, [sp, #28]
 800d776:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d77a:	931a      	str	r3, [sp, #104]	; 0x68
 800d77c:	4654      	mov	r4, sl
 800d77e:	2205      	movs	r2, #5
 800d780:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d784:	4850      	ldr	r0, [pc, #320]	; (800d8c8 <_svfiprintf_r+0x1e8>)
 800d786:	f7f2 fd23 	bl	80001d0 <memchr>
 800d78a:	9a04      	ldr	r2, [sp, #16]
 800d78c:	b9d8      	cbnz	r0, 800d7c6 <_svfiprintf_r+0xe6>
 800d78e:	06d0      	lsls	r0, r2, #27
 800d790:	bf44      	itt	mi
 800d792:	2320      	movmi	r3, #32
 800d794:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d798:	0711      	lsls	r1, r2, #28
 800d79a:	bf44      	itt	mi
 800d79c:	232b      	movmi	r3, #43	; 0x2b
 800d79e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d7a2:	f89a 3000 	ldrb.w	r3, [sl]
 800d7a6:	2b2a      	cmp	r3, #42	; 0x2a
 800d7a8:	d015      	beq.n	800d7d6 <_svfiprintf_r+0xf6>
 800d7aa:	9a07      	ldr	r2, [sp, #28]
 800d7ac:	4654      	mov	r4, sl
 800d7ae:	2000      	movs	r0, #0
 800d7b0:	f04f 0c0a 	mov.w	ip, #10
 800d7b4:	4621      	mov	r1, r4
 800d7b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d7ba:	3b30      	subs	r3, #48	; 0x30
 800d7bc:	2b09      	cmp	r3, #9
 800d7be:	d94d      	bls.n	800d85c <_svfiprintf_r+0x17c>
 800d7c0:	b1b0      	cbz	r0, 800d7f0 <_svfiprintf_r+0x110>
 800d7c2:	9207      	str	r2, [sp, #28]
 800d7c4:	e014      	b.n	800d7f0 <_svfiprintf_r+0x110>
 800d7c6:	eba0 0308 	sub.w	r3, r0, r8
 800d7ca:	fa09 f303 	lsl.w	r3, r9, r3
 800d7ce:	4313      	orrs	r3, r2
 800d7d0:	9304      	str	r3, [sp, #16]
 800d7d2:	46a2      	mov	sl, r4
 800d7d4:	e7d2      	b.n	800d77c <_svfiprintf_r+0x9c>
 800d7d6:	9b03      	ldr	r3, [sp, #12]
 800d7d8:	1d19      	adds	r1, r3, #4
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	9103      	str	r1, [sp, #12]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	bfbb      	ittet	lt
 800d7e2:	425b      	neglt	r3, r3
 800d7e4:	f042 0202 	orrlt.w	r2, r2, #2
 800d7e8:	9307      	strge	r3, [sp, #28]
 800d7ea:	9307      	strlt	r3, [sp, #28]
 800d7ec:	bfb8      	it	lt
 800d7ee:	9204      	strlt	r2, [sp, #16]
 800d7f0:	7823      	ldrb	r3, [r4, #0]
 800d7f2:	2b2e      	cmp	r3, #46	; 0x2e
 800d7f4:	d10c      	bne.n	800d810 <_svfiprintf_r+0x130>
 800d7f6:	7863      	ldrb	r3, [r4, #1]
 800d7f8:	2b2a      	cmp	r3, #42	; 0x2a
 800d7fa:	d134      	bne.n	800d866 <_svfiprintf_r+0x186>
 800d7fc:	9b03      	ldr	r3, [sp, #12]
 800d7fe:	1d1a      	adds	r2, r3, #4
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	9203      	str	r2, [sp, #12]
 800d804:	2b00      	cmp	r3, #0
 800d806:	bfb8      	it	lt
 800d808:	f04f 33ff 	movlt.w	r3, #4294967295
 800d80c:	3402      	adds	r4, #2
 800d80e:	9305      	str	r3, [sp, #20]
 800d810:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d8d8 <_svfiprintf_r+0x1f8>
 800d814:	7821      	ldrb	r1, [r4, #0]
 800d816:	2203      	movs	r2, #3
 800d818:	4650      	mov	r0, sl
 800d81a:	f7f2 fcd9 	bl	80001d0 <memchr>
 800d81e:	b138      	cbz	r0, 800d830 <_svfiprintf_r+0x150>
 800d820:	9b04      	ldr	r3, [sp, #16]
 800d822:	eba0 000a 	sub.w	r0, r0, sl
 800d826:	2240      	movs	r2, #64	; 0x40
 800d828:	4082      	lsls	r2, r0
 800d82a:	4313      	orrs	r3, r2
 800d82c:	3401      	adds	r4, #1
 800d82e:	9304      	str	r3, [sp, #16]
 800d830:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d834:	4825      	ldr	r0, [pc, #148]	; (800d8cc <_svfiprintf_r+0x1ec>)
 800d836:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d83a:	2206      	movs	r2, #6
 800d83c:	f7f2 fcc8 	bl	80001d0 <memchr>
 800d840:	2800      	cmp	r0, #0
 800d842:	d038      	beq.n	800d8b6 <_svfiprintf_r+0x1d6>
 800d844:	4b22      	ldr	r3, [pc, #136]	; (800d8d0 <_svfiprintf_r+0x1f0>)
 800d846:	bb1b      	cbnz	r3, 800d890 <_svfiprintf_r+0x1b0>
 800d848:	9b03      	ldr	r3, [sp, #12]
 800d84a:	3307      	adds	r3, #7
 800d84c:	f023 0307 	bic.w	r3, r3, #7
 800d850:	3308      	adds	r3, #8
 800d852:	9303      	str	r3, [sp, #12]
 800d854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d856:	4433      	add	r3, r6
 800d858:	9309      	str	r3, [sp, #36]	; 0x24
 800d85a:	e768      	b.n	800d72e <_svfiprintf_r+0x4e>
 800d85c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d860:	460c      	mov	r4, r1
 800d862:	2001      	movs	r0, #1
 800d864:	e7a6      	b.n	800d7b4 <_svfiprintf_r+0xd4>
 800d866:	2300      	movs	r3, #0
 800d868:	3401      	adds	r4, #1
 800d86a:	9305      	str	r3, [sp, #20]
 800d86c:	4619      	mov	r1, r3
 800d86e:	f04f 0c0a 	mov.w	ip, #10
 800d872:	4620      	mov	r0, r4
 800d874:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d878:	3a30      	subs	r2, #48	; 0x30
 800d87a:	2a09      	cmp	r2, #9
 800d87c:	d903      	bls.n	800d886 <_svfiprintf_r+0x1a6>
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d0c6      	beq.n	800d810 <_svfiprintf_r+0x130>
 800d882:	9105      	str	r1, [sp, #20]
 800d884:	e7c4      	b.n	800d810 <_svfiprintf_r+0x130>
 800d886:	fb0c 2101 	mla	r1, ip, r1, r2
 800d88a:	4604      	mov	r4, r0
 800d88c:	2301      	movs	r3, #1
 800d88e:	e7f0      	b.n	800d872 <_svfiprintf_r+0x192>
 800d890:	ab03      	add	r3, sp, #12
 800d892:	9300      	str	r3, [sp, #0]
 800d894:	462a      	mov	r2, r5
 800d896:	4b0f      	ldr	r3, [pc, #60]	; (800d8d4 <_svfiprintf_r+0x1f4>)
 800d898:	a904      	add	r1, sp, #16
 800d89a:	4638      	mov	r0, r7
 800d89c:	f7fd fdb2 	bl	800b404 <_printf_float>
 800d8a0:	1c42      	adds	r2, r0, #1
 800d8a2:	4606      	mov	r6, r0
 800d8a4:	d1d6      	bne.n	800d854 <_svfiprintf_r+0x174>
 800d8a6:	89ab      	ldrh	r3, [r5, #12]
 800d8a8:	065b      	lsls	r3, r3, #25
 800d8aa:	f53f af2d 	bmi.w	800d708 <_svfiprintf_r+0x28>
 800d8ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d8b0:	b01d      	add	sp, #116	; 0x74
 800d8b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8b6:	ab03      	add	r3, sp, #12
 800d8b8:	9300      	str	r3, [sp, #0]
 800d8ba:	462a      	mov	r2, r5
 800d8bc:	4b05      	ldr	r3, [pc, #20]	; (800d8d4 <_svfiprintf_r+0x1f4>)
 800d8be:	a904      	add	r1, sp, #16
 800d8c0:	4638      	mov	r0, r7
 800d8c2:	f7fe f843 	bl	800b94c <_printf_i>
 800d8c6:	e7eb      	b.n	800d8a0 <_svfiprintf_r+0x1c0>
 800d8c8:	0800e994 	.word	0x0800e994
 800d8cc:	0800e99e 	.word	0x0800e99e
 800d8d0:	0800b405 	.word	0x0800b405
 800d8d4:	0800d62d 	.word	0x0800d62d
 800d8d8:	0800e99a 	.word	0x0800e99a

0800d8dc <__sfputc_r>:
 800d8dc:	6893      	ldr	r3, [r2, #8]
 800d8de:	3b01      	subs	r3, #1
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	b410      	push	{r4}
 800d8e4:	6093      	str	r3, [r2, #8]
 800d8e6:	da08      	bge.n	800d8fa <__sfputc_r+0x1e>
 800d8e8:	6994      	ldr	r4, [r2, #24]
 800d8ea:	42a3      	cmp	r3, r4
 800d8ec:	db01      	blt.n	800d8f2 <__sfputc_r+0x16>
 800d8ee:	290a      	cmp	r1, #10
 800d8f0:	d103      	bne.n	800d8fa <__sfputc_r+0x1e>
 800d8f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d8f6:	f7fe bacc 	b.w	800be92 <__swbuf_r>
 800d8fa:	6813      	ldr	r3, [r2, #0]
 800d8fc:	1c58      	adds	r0, r3, #1
 800d8fe:	6010      	str	r0, [r2, #0]
 800d900:	7019      	strb	r1, [r3, #0]
 800d902:	4608      	mov	r0, r1
 800d904:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d908:	4770      	bx	lr

0800d90a <__sfputs_r>:
 800d90a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d90c:	4606      	mov	r6, r0
 800d90e:	460f      	mov	r7, r1
 800d910:	4614      	mov	r4, r2
 800d912:	18d5      	adds	r5, r2, r3
 800d914:	42ac      	cmp	r4, r5
 800d916:	d101      	bne.n	800d91c <__sfputs_r+0x12>
 800d918:	2000      	movs	r0, #0
 800d91a:	e007      	b.n	800d92c <__sfputs_r+0x22>
 800d91c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d920:	463a      	mov	r2, r7
 800d922:	4630      	mov	r0, r6
 800d924:	f7ff ffda 	bl	800d8dc <__sfputc_r>
 800d928:	1c43      	adds	r3, r0, #1
 800d92a:	d1f3      	bne.n	800d914 <__sfputs_r+0xa>
 800d92c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d930 <_vfiprintf_r>:
 800d930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d934:	460d      	mov	r5, r1
 800d936:	b09d      	sub	sp, #116	; 0x74
 800d938:	4614      	mov	r4, r2
 800d93a:	4698      	mov	r8, r3
 800d93c:	4606      	mov	r6, r0
 800d93e:	b118      	cbz	r0, 800d948 <_vfiprintf_r+0x18>
 800d940:	6a03      	ldr	r3, [r0, #32]
 800d942:	b90b      	cbnz	r3, 800d948 <_vfiprintf_r+0x18>
 800d944:	f7fe f99e 	bl	800bc84 <__sinit>
 800d948:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d94a:	07d9      	lsls	r1, r3, #31
 800d94c:	d405      	bmi.n	800d95a <_vfiprintf_r+0x2a>
 800d94e:	89ab      	ldrh	r3, [r5, #12]
 800d950:	059a      	lsls	r2, r3, #22
 800d952:	d402      	bmi.n	800d95a <_vfiprintf_r+0x2a>
 800d954:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d956:	f7fe fc15 	bl	800c184 <__retarget_lock_acquire_recursive>
 800d95a:	89ab      	ldrh	r3, [r5, #12]
 800d95c:	071b      	lsls	r3, r3, #28
 800d95e:	d501      	bpl.n	800d964 <_vfiprintf_r+0x34>
 800d960:	692b      	ldr	r3, [r5, #16]
 800d962:	b99b      	cbnz	r3, 800d98c <_vfiprintf_r+0x5c>
 800d964:	4629      	mov	r1, r5
 800d966:	4630      	mov	r0, r6
 800d968:	f7fe fad0 	bl	800bf0c <__swsetup_r>
 800d96c:	b170      	cbz	r0, 800d98c <_vfiprintf_r+0x5c>
 800d96e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d970:	07dc      	lsls	r4, r3, #31
 800d972:	d504      	bpl.n	800d97e <_vfiprintf_r+0x4e>
 800d974:	f04f 30ff 	mov.w	r0, #4294967295
 800d978:	b01d      	add	sp, #116	; 0x74
 800d97a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d97e:	89ab      	ldrh	r3, [r5, #12]
 800d980:	0598      	lsls	r0, r3, #22
 800d982:	d4f7      	bmi.n	800d974 <_vfiprintf_r+0x44>
 800d984:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d986:	f7fe fbfe 	bl	800c186 <__retarget_lock_release_recursive>
 800d98a:	e7f3      	b.n	800d974 <_vfiprintf_r+0x44>
 800d98c:	2300      	movs	r3, #0
 800d98e:	9309      	str	r3, [sp, #36]	; 0x24
 800d990:	2320      	movs	r3, #32
 800d992:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d996:	f8cd 800c 	str.w	r8, [sp, #12]
 800d99a:	2330      	movs	r3, #48	; 0x30
 800d99c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800db50 <_vfiprintf_r+0x220>
 800d9a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d9a4:	f04f 0901 	mov.w	r9, #1
 800d9a8:	4623      	mov	r3, r4
 800d9aa:	469a      	mov	sl, r3
 800d9ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d9b0:	b10a      	cbz	r2, 800d9b6 <_vfiprintf_r+0x86>
 800d9b2:	2a25      	cmp	r2, #37	; 0x25
 800d9b4:	d1f9      	bne.n	800d9aa <_vfiprintf_r+0x7a>
 800d9b6:	ebba 0b04 	subs.w	fp, sl, r4
 800d9ba:	d00b      	beq.n	800d9d4 <_vfiprintf_r+0xa4>
 800d9bc:	465b      	mov	r3, fp
 800d9be:	4622      	mov	r2, r4
 800d9c0:	4629      	mov	r1, r5
 800d9c2:	4630      	mov	r0, r6
 800d9c4:	f7ff ffa1 	bl	800d90a <__sfputs_r>
 800d9c8:	3001      	adds	r0, #1
 800d9ca:	f000 80a9 	beq.w	800db20 <_vfiprintf_r+0x1f0>
 800d9ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d9d0:	445a      	add	r2, fp
 800d9d2:	9209      	str	r2, [sp, #36]	; 0x24
 800d9d4:	f89a 3000 	ldrb.w	r3, [sl]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	f000 80a1 	beq.w	800db20 <_vfiprintf_r+0x1f0>
 800d9de:	2300      	movs	r3, #0
 800d9e0:	f04f 32ff 	mov.w	r2, #4294967295
 800d9e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d9e8:	f10a 0a01 	add.w	sl, sl, #1
 800d9ec:	9304      	str	r3, [sp, #16]
 800d9ee:	9307      	str	r3, [sp, #28]
 800d9f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d9f4:	931a      	str	r3, [sp, #104]	; 0x68
 800d9f6:	4654      	mov	r4, sl
 800d9f8:	2205      	movs	r2, #5
 800d9fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9fe:	4854      	ldr	r0, [pc, #336]	; (800db50 <_vfiprintf_r+0x220>)
 800da00:	f7f2 fbe6 	bl	80001d0 <memchr>
 800da04:	9a04      	ldr	r2, [sp, #16]
 800da06:	b9d8      	cbnz	r0, 800da40 <_vfiprintf_r+0x110>
 800da08:	06d1      	lsls	r1, r2, #27
 800da0a:	bf44      	itt	mi
 800da0c:	2320      	movmi	r3, #32
 800da0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800da12:	0713      	lsls	r3, r2, #28
 800da14:	bf44      	itt	mi
 800da16:	232b      	movmi	r3, #43	; 0x2b
 800da18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800da1c:	f89a 3000 	ldrb.w	r3, [sl]
 800da20:	2b2a      	cmp	r3, #42	; 0x2a
 800da22:	d015      	beq.n	800da50 <_vfiprintf_r+0x120>
 800da24:	9a07      	ldr	r2, [sp, #28]
 800da26:	4654      	mov	r4, sl
 800da28:	2000      	movs	r0, #0
 800da2a:	f04f 0c0a 	mov.w	ip, #10
 800da2e:	4621      	mov	r1, r4
 800da30:	f811 3b01 	ldrb.w	r3, [r1], #1
 800da34:	3b30      	subs	r3, #48	; 0x30
 800da36:	2b09      	cmp	r3, #9
 800da38:	d94d      	bls.n	800dad6 <_vfiprintf_r+0x1a6>
 800da3a:	b1b0      	cbz	r0, 800da6a <_vfiprintf_r+0x13a>
 800da3c:	9207      	str	r2, [sp, #28]
 800da3e:	e014      	b.n	800da6a <_vfiprintf_r+0x13a>
 800da40:	eba0 0308 	sub.w	r3, r0, r8
 800da44:	fa09 f303 	lsl.w	r3, r9, r3
 800da48:	4313      	orrs	r3, r2
 800da4a:	9304      	str	r3, [sp, #16]
 800da4c:	46a2      	mov	sl, r4
 800da4e:	e7d2      	b.n	800d9f6 <_vfiprintf_r+0xc6>
 800da50:	9b03      	ldr	r3, [sp, #12]
 800da52:	1d19      	adds	r1, r3, #4
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	9103      	str	r1, [sp, #12]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	bfbb      	ittet	lt
 800da5c:	425b      	neglt	r3, r3
 800da5e:	f042 0202 	orrlt.w	r2, r2, #2
 800da62:	9307      	strge	r3, [sp, #28]
 800da64:	9307      	strlt	r3, [sp, #28]
 800da66:	bfb8      	it	lt
 800da68:	9204      	strlt	r2, [sp, #16]
 800da6a:	7823      	ldrb	r3, [r4, #0]
 800da6c:	2b2e      	cmp	r3, #46	; 0x2e
 800da6e:	d10c      	bne.n	800da8a <_vfiprintf_r+0x15a>
 800da70:	7863      	ldrb	r3, [r4, #1]
 800da72:	2b2a      	cmp	r3, #42	; 0x2a
 800da74:	d134      	bne.n	800dae0 <_vfiprintf_r+0x1b0>
 800da76:	9b03      	ldr	r3, [sp, #12]
 800da78:	1d1a      	adds	r2, r3, #4
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	9203      	str	r2, [sp, #12]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	bfb8      	it	lt
 800da82:	f04f 33ff 	movlt.w	r3, #4294967295
 800da86:	3402      	adds	r4, #2
 800da88:	9305      	str	r3, [sp, #20]
 800da8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800db60 <_vfiprintf_r+0x230>
 800da8e:	7821      	ldrb	r1, [r4, #0]
 800da90:	2203      	movs	r2, #3
 800da92:	4650      	mov	r0, sl
 800da94:	f7f2 fb9c 	bl	80001d0 <memchr>
 800da98:	b138      	cbz	r0, 800daaa <_vfiprintf_r+0x17a>
 800da9a:	9b04      	ldr	r3, [sp, #16]
 800da9c:	eba0 000a 	sub.w	r0, r0, sl
 800daa0:	2240      	movs	r2, #64	; 0x40
 800daa2:	4082      	lsls	r2, r0
 800daa4:	4313      	orrs	r3, r2
 800daa6:	3401      	adds	r4, #1
 800daa8:	9304      	str	r3, [sp, #16]
 800daaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800daae:	4829      	ldr	r0, [pc, #164]	; (800db54 <_vfiprintf_r+0x224>)
 800dab0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dab4:	2206      	movs	r2, #6
 800dab6:	f7f2 fb8b 	bl	80001d0 <memchr>
 800daba:	2800      	cmp	r0, #0
 800dabc:	d03f      	beq.n	800db3e <_vfiprintf_r+0x20e>
 800dabe:	4b26      	ldr	r3, [pc, #152]	; (800db58 <_vfiprintf_r+0x228>)
 800dac0:	bb1b      	cbnz	r3, 800db0a <_vfiprintf_r+0x1da>
 800dac2:	9b03      	ldr	r3, [sp, #12]
 800dac4:	3307      	adds	r3, #7
 800dac6:	f023 0307 	bic.w	r3, r3, #7
 800daca:	3308      	adds	r3, #8
 800dacc:	9303      	str	r3, [sp, #12]
 800dace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dad0:	443b      	add	r3, r7
 800dad2:	9309      	str	r3, [sp, #36]	; 0x24
 800dad4:	e768      	b.n	800d9a8 <_vfiprintf_r+0x78>
 800dad6:	fb0c 3202 	mla	r2, ip, r2, r3
 800dada:	460c      	mov	r4, r1
 800dadc:	2001      	movs	r0, #1
 800dade:	e7a6      	b.n	800da2e <_vfiprintf_r+0xfe>
 800dae0:	2300      	movs	r3, #0
 800dae2:	3401      	adds	r4, #1
 800dae4:	9305      	str	r3, [sp, #20]
 800dae6:	4619      	mov	r1, r3
 800dae8:	f04f 0c0a 	mov.w	ip, #10
 800daec:	4620      	mov	r0, r4
 800daee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800daf2:	3a30      	subs	r2, #48	; 0x30
 800daf4:	2a09      	cmp	r2, #9
 800daf6:	d903      	bls.n	800db00 <_vfiprintf_r+0x1d0>
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d0c6      	beq.n	800da8a <_vfiprintf_r+0x15a>
 800dafc:	9105      	str	r1, [sp, #20]
 800dafe:	e7c4      	b.n	800da8a <_vfiprintf_r+0x15a>
 800db00:	fb0c 2101 	mla	r1, ip, r1, r2
 800db04:	4604      	mov	r4, r0
 800db06:	2301      	movs	r3, #1
 800db08:	e7f0      	b.n	800daec <_vfiprintf_r+0x1bc>
 800db0a:	ab03      	add	r3, sp, #12
 800db0c:	9300      	str	r3, [sp, #0]
 800db0e:	462a      	mov	r2, r5
 800db10:	4b12      	ldr	r3, [pc, #72]	; (800db5c <_vfiprintf_r+0x22c>)
 800db12:	a904      	add	r1, sp, #16
 800db14:	4630      	mov	r0, r6
 800db16:	f7fd fc75 	bl	800b404 <_printf_float>
 800db1a:	4607      	mov	r7, r0
 800db1c:	1c78      	adds	r0, r7, #1
 800db1e:	d1d6      	bne.n	800dace <_vfiprintf_r+0x19e>
 800db20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800db22:	07d9      	lsls	r1, r3, #31
 800db24:	d405      	bmi.n	800db32 <_vfiprintf_r+0x202>
 800db26:	89ab      	ldrh	r3, [r5, #12]
 800db28:	059a      	lsls	r2, r3, #22
 800db2a:	d402      	bmi.n	800db32 <_vfiprintf_r+0x202>
 800db2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800db2e:	f7fe fb2a 	bl	800c186 <__retarget_lock_release_recursive>
 800db32:	89ab      	ldrh	r3, [r5, #12]
 800db34:	065b      	lsls	r3, r3, #25
 800db36:	f53f af1d 	bmi.w	800d974 <_vfiprintf_r+0x44>
 800db3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800db3c:	e71c      	b.n	800d978 <_vfiprintf_r+0x48>
 800db3e:	ab03      	add	r3, sp, #12
 800db40:	9300      	str	r3, [sp, #0]
 800db42:	462a      	mov	r2, r5
 800db44:	4b05      	ldr	r3, [pc, #20]	; (800db5c <_vfiprintf_r+0x22c>)
 800db46:	a904      	add	r1, sp, #16
 800db48:	4630      	mov	r0, r6
 800db4a:	f7fd feff 	bl	800b94c <_printf_i>
 800db4e:	e7e4      	b.n	800db1a <_vfiprintf_r+0x1ea>
 800db50:	0800e994 	.word	0x0800e994
 800db54:	0800e99e 	.word	0x0800e99e
 800db58:	0800b405 	.word	0x0800b405
 800db5c:	0800d90b 	.word	0x0800d90b
 800db60:	0800e99a 	.word	0x0800e99a

0800db64 <__sflush_r>:
 800db64:	898a      	ldrh	r2, [r1, #12]
 800db66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db6a:	4605      	mov	r5, r0
 800db6c:	0710      	lsls	r0, r2, #28
 800db6e:	460c      	mov	r4, r1
 800db70:	d458      	bmi.n	800dc24 <__sflush_r+0xc0>
 800db72:	684b      	ldr	r3, [r1, #4]
 800db74:	2b00      	cmp	r3, #0
 800db76:	dc05      	bgt.n	800db84 <__sflush_r+0x20>
 800db78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	dc02      	bgt.n	800db84 <__sflush_r+0x20>
 800db7e:	2000      	movs	r0, #0
 800db80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800db86:	2e00      	cmp	r6, #0
 800db88:	d0f9      	beq.n	800db7e <__sflush_r+0x1a>
 800db8a:	2300      	movs	r3, #0
 800db8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800db90:	682f      	ldr	r7, [r5, #0]
 800db92:	6a21      	ldr	r1, [r4, #32]
 800db94:	602b      	str	r3, [r5, #0]
 800db96:	d032      	beq.n	800dbfe <__sflush_r+0x9a>
 800db98:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800db9a:	89a3      	ldrh	r3, [r4, #12]
 800db9c:	075a      	lsls	r2, r3, #29
 800db9e:	d505      	bpl.n	800dbac <__sflush_r+0x48>
 800dba0:	6863      	ldr	r3, [r4, #4]
 800dba2:	1ac0      	subs	r0, r0, r3
 800dba4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dba6:	b10b      	cbz	r3, 800dbac <__sflush_r+0x48>
 800dba8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dbaa:	1ac0      	subs	r0, r0, r3
 800dbac:	2300      	movs	r3, #0
 800dbae:	4602      	mov	r2, r0
 800dbb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dbb2:	6a21      	ldr	r1, [r4, #32]
 800dbb4:	4628      	mov	r0, r5
 800dbb6:	47b0      	blx	r6
 800dbb8:	1c43      	adds	r3, r0, #1
 800dbba:	89a3      	ldrh	r3, [r4, #12]
 800dbbc:	d106      	bne.n	800dbcc <__sflush_r+0x68>
 800dbbe:	6829      	ldr	r1, [r5, #0]
 800dbc0:	291d      	cmp	r1, #29
 800dbc2:	d82b      	bhi.n	800dc1c <__sflush_r+0xb8>
 800dbc4:	4a29      	ldr	r2, [pc, #164]	; (800dc6c <__sflush_r+0x108>)
 800dbc6:	410a      	asrs	r2, r1
 800dbc8:	07d6      	lsls	r6, r2, #31
 800dbca:	d427      	bmi.n	800dc1c <__sflush_r+0xb8>
 800dbcc:	2200      	movs	r2, #0
 800dbce:	6062      	str	r2, [r4, #4]
 800dbd0:	04d9      	lsls	r1, r3, #19
 800dbd2:	6922      	ldr	r2, [r4, #16]
 800dbd4:	6022      	str	r2, [r4, #0]
 800dbd6:	d504      	bpl.n	800dbe2 <__sflush_r+0x7e>
 800dbd8:	1c42      	adds	r2, r0, #1
 800dbda:	d101      	bne.n	800dbe0 <__sflush_r+0x7c>
 800dbdc:	682b      	ldr	r3, [r5, #0]
 800dbde:	b903      	cbnz	r3, 800dbe2 <__sflush_r+0x7e>
 800dbe0:	6560      	str	r0, [r4, #84]	; 0x54
 800dbe2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dbe4:	602f      	str	r7, [r5, #0]
 800dbe6:	2900      	cmp	r1, #0
 800dbe8:	d0c9      	beq.n	800db7e <__sflush_r+0x1a>
 800dbea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dbee:	4299      	cmp	r1, r3
 800dbf0:	d002      	beq.n	800dbf8 <__sflush_r+0x94>
 800dbf2:	4628      	mov	r0, r5
 800dbf4:	f7ff f952 	bl	800ce9c <_free_r>
 800dbf8:	2000      	movs	r0, #0
 800dbfa:	6360      	str	r0, [r4, #52]	; 0x34
 800dbfc:	e7c0      	b.n	800db80 <__sflush_r+0x1c>
 800dbfe:	2301      	movs	r3, #1
 800dc00:	4628      	mov	r0, r5
 800dc02:	47b0      	blx	r6
 800dc04:	1c41      	adds	r1, r0, #1
 800dc06:	d1c8      	bne.n	800db9a <__sflush_r+0x36>
 800dc08:	682b      	ldr	r3, [r5, #0]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d0c5      	beq.n	800db9a <__sflush_r+0x36>
 800dc0e:	2b1d      	cmp	r3, #29
 800dc10:	d001      	beq.n	800dc16 <__sflush_r+0xb2>
 800dc12:	2b16      	cmp	r3, #22
 800dc14:	d101      	bne.n	800dc1a <__sflush_r+0xb6>
 800dc16:	602f      	str	r7, [r5, #0]
 800dc18:	e7b1      	b.n	800db7e <__sflush_r+0x1a>
 800dc1a:	89a3      	ldrh	r3, [r4, #12]
 800dc1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc20:	81a3      	strh	r3, [r4, #12]
 800dc22:	e7ad      	b.n	800db80 <__sflush_r+0x1c>
 800dc24:	690f      	ldr	r7, [r1, #16]
 800dc26:	2f00      	cmp	r7, #0
 800dc28:	d0a9      	beq.n	800db7e <__sflush_r+0x1a>
 800dc2a:	0793      	lsls	r3, r2, #30
 800dc2c:	680e      	ldr	r6, [r1, #0]
 800dc2e:	bf08      	it	eq
 800dc30:	694b      	ldreq	r3, [r1, #20]
 800dc32:	600f      	str	r7, [r1, #0]
 800dc34:	bf18      	it	ne
 800dc36:	2300      	movne	r3, #0
 800dc38:	eba6 0807 	sub.w	r8, r6, r7
 800dc3c:	608b      	str	r3, [r1, #8]
 800dc3e:	f1b8 0f00 	cmp.w	r8, #0
 800dc42:	dd9c      	ble.n	800db7e <__sflush_r+0x1a>
 800dc44:	6a21      	ldr	r1, [r4, #32]
 800dc46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dc48:	4643      	mov	r3, r8
 800dc4a:	463a      	mov	r2, r7
 800dc4c:	4628      	mov	r0, r5
 800dc4e:	47b0      	blx	r6
 800dc50:	2800      	cmp	r0, #0
 800dc52:	dc06      	bgt.n	800dc62 <__sflush_r+0xfe>
 800dc54:	89a3      	ldrh	r3, [r4, #12]
 800dc56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc5a:	81a3      	strh	r3, [r4, #12]
 800dc5c:	f04f 30ff 	mov.w	r0, #4294967295
 800dc60:	e78e      	b.n	800db80 <__sflush_r+0x1c>
 800dc62:	4407      	add	r7, r0
 800dc64:	eba8 0800 	sub.w	r8, r8, r0
 800dc68:	e7e9      	b.n	800dc3e <__sflush_r+0xda>
 800dc6a:	bf00      	nop
 800dc6c:	dfbffffe 	.word	0xdfbffffe

0800dc70 <_fflush_r>:
 800dc70:	b538      	push	{r3, r4, r5, lr}
 800dc72:	690b      	ldr	r3, [r1, #16]
 800dc74:	4605      	mov	r5, r0
 800dc76:	460c      	mov	r4, r1
 800dc78:	b913      	cbnz	r3, 800dc80 <_fflush_r+0x10>
 800dc7a:	2500      	movs	r5, #0
 800dc7c:	4628      	mov	r0, r5
 800dc7e:	bd38      	pop	{r3, r4, r5, pc}
 800dc80:	b118      	cbz	r0, 800dc8a <_fflush_r+0x1a>
 800dc82:	6a03      	ldr	r3, [r0, #32]
 800dc84:	b90b      	cbnz	r3, 800dc8a <_fflush_r+0x1a>
 800dc86:	f7fd fffd 	bl	800bc84 <__sinit>
 800dc8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d0f3      	beq.n	800dc7a <_fflush_r+0xa>
 800dc92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dc94:	07d0      	lsls	r0, r2, #31
 800dc96:	d404      	bmi.n	800dca2 <_fflush_r+0x32>
 800dc98:	0599      	lsls	r1, r3, #22
 800dc9a:	d402      	bmi.n	800dca2 <_fflush_r+0x32>
 800dc9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dc9e:	f7fe fa71 	bl	800c184 <__retarget_lock_acquire_recursive>
 800dca2:	4628      	mov	r0, r5
 800dca4:	4621      	mov	r1, r4
 800dca6:	f7ff ff5d 	bl	800db64 <__sflush_r>
 800dcaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dcac:	07da      	lsls	r2, r3, #31
 800dcae:	4605      	mov	r5, r0
 800dcb0:	d4e4      	bmi.n	800dc7c <_fflush_r+0xc>
 800dcb2:	89a3      	ldrh	r3, [r4, #12]
 800dcb4:	059b      	lsls	r3, r3, #22
 800dcb6:	d4e1      	bmi.n	800dc7c <_fflush_r+0xc>
 800dcb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dcba:	f7fe fa64 	bl	800c186 <__retarget_lock_release_recursive>
 800dcbe:	e7dd      	b.n	800dc7c <_fflush_r+0xc>

0800dcc0 <__swhatbuf_r>:
 800dcc0:	b570      	push	{r4, r5, r6, lr}
 800dcc2:	460c      	mov	r4, r1
 800dcc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcc8:	2900      	cmp	r1, #0
 800dcca:	b096      	sub	sp, #88	; 0x58
 800dccc:	4615      	mov	r5, r2
 800dcce:	461e      	mov	r6, r3
 800dcd0:	da0d      	bge.n	800dcee <__swhatbuf_r+0x2e>
 800dcd2:	89a3      	ldrh	r3, [r4, #12]
 800dcd4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800dcd8:	f04f 0100 	mov.w	r1, #0
 800dcdc:	bf0c      	ite	eq
 800dcde:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800dce2:	2340      	movne	r3, #64	; 0x40
 800dce4:	2000      	movs	r0, #0
 800dce6:	6031      	str	r1, [r6, #0]
 800dce8:	602b      	str	r3, [r5, #0]
 800dcea:	b016      	add	sp, #88	; 0x58
 800dcec:	bd70      	pop	{r4, r5, r6, pc}
 800dcee:	466a      	mov	r2, sp
 800dcf0:	f000 f848 	bl	800dd84 <_fstat_r>
 800dcf4:	2800      	cmp	r0, #0
 800dcf6:	dbec      	blt.n	800dcd2 <__swhatbuf_r+0x12>
 800dcf8:	9901      	ldr	r1, [sp, #4]
 800dcfa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800dcfe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800dd02:	4259      	negs	r1, r3
 800dd04:	4159      	adcs	r1, r3
 800dd06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dd0a:	e7eb      	b.n	800dce4 <__swhatbuf_r+0x24>

0800dd0c <__smakebuf_r>:
 800dd0c:	898b      	ldrh	r3, [r1, #12]
 800dd0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dd10:	079d      	lsls	r5, r3, #30
 800dd12:	4606      	mov	r6, r0
 800dd14:	460c      	mov	r4, r1
 800dd16:	d507      	bpl.n	800dd28 <__smakebuf_r+0x1c>
 800dd18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dd1c:	6023      	str	r3, [r4, #0]
 800dd1e:	6123      	str	r3, [r4, #16]
 800dd20:	2301      	movs	r3, #1
 800dd22:	6163      	str	r3, [r4, #20]
 800dd24:	b002      	add	sp, #8
 800dd26:	bd70      	pop	{r4, r5, r6, pc}
 800dd28:	ab01      	add	r3, sp, #4
 800dd2a:	466a      	mov	r2, sp
 800dd2c:	f7ff ffc8 	bl	800dcc0 <__swhatbuf_r>
 800dd30:	9900      	ldr	r1, [sp, #0]
 800dd32:	4605      	mov	r5, r0
 800dd34:	4630      	mov	r0, r6
 800dd36:	f7fd fa39 	bl	800b1ac <_malloc_r>
 800dd3a:	b948      	cbnz	r0, 800dd50 <__smakebuf_r+0x44>
 800dd3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd40:	059a      	lsls	r2, r3, #22
 800dd42:	d4ef      	bmi.n	800dd24 <__smakebuf_r+0x18>
 800dd44:	f023 0303 	bic.w	r3, r3, #3
 800dd48:	f043 0302 	orr.w	r3, r3, #2
 800dd4c:	81a3      	strh	r3, [r4, #12]
 800dd4e:	e7e3      	b.n	800dd18 <__smakebuf_r+0xc>
 800dd50:	89a3      	ldrh	r3, [r4, #12]
 800dd52:	6020      	str	r0, [r4, #0]
 800dd54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd58:	81a3      	strh	r3, [r4, #12]
 800dd5a:	9b00      	ldr	r3, [sp, #0]
 800dd5c:	6163      	str	r3, [r4, #20]
 800dd5e:	9b01      	ldr	r3, [sp, #4]
 800dd60:	6120      	str	r0, [r4, #16]
 800dd62:	b15b      	cbz	r3, 800dd7c <__smakebuf_r+0x70>
 800dd64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dd68:	4630      	mov	r0, r6
 800dd6a:	f000 f81d 	bl	800dda8 <_isatty_r>
 800dd6e:	b128      	cbz	r0, 800dd7c <__smakebuf_r+0x70>
 800dd70:	89a3      	ldrh	r3, [r4, #12]
 800dd72:	f023 0303 	bic.w	r3, r3, #3
 800dd76:	f043 0301 	orr.w	r3, r3, #1
 800dd7a:	81a3      	strh	r3, [r4, #12]
 800dd7c:	89a3      	ldrh	r3, [r4, #12]
 800dd7e:	431d      	orrs	r5, r3
 800dd80:	81a5      	strh	r5, [r4, #12]
 800dd82:	e7cf      	b.n	800dd24 <__smakebuf_r+0x18>

0800dd84 <_fstat_r>:
 800dd84:	b538      	push	{r3, r4, r5, lr}
 800dd86:	4d07      	ldr	r5, [pc, #28]	; (800dda4 <_fstat_r+0x20>)
 800dd88:	2300      	movs	r3, #0
 800dd8a:	4604      	mov	r4, r0
 800dd8c:	4608      	mov	r0, r1
 800dd8e:	4611      	mov	r1, r2
 800dd90:	602b      	str	r3, [r5, #0]
 800dd92:	f000 f8bd 	bl	800df10 <_fstat>
 800dd96:	1c43      	adds	r3, r0, #1
 800dd98:	d102      	bne.n	800dda0 <_fstat_r+0x1c>
 800dd9a:	682b      	ldr	r3, [r5, #0]
 800dd9c:	b103      	cbz	r3, 800dda0 <_fstat_r+0x1c>
 800dd9e:	6023      	str	r3, [r4, #0]
 800dda0:	bd38      	pop	{r3, r4, r5, pc}
 800dda2:	bf00      	nop
 800dda4:	20002814 	.word	0x20002814

0800dda8 <_isatty_r>:
 800dda8:	b538      	push	{r3, r4, r5, lr}
 800ddaa:	4d06      	ldr	r5, [pc, #24]	; (800ddc4 <_isatty_r+0x1c>)
 800ddac:	2300      	movs	r3, #0
 800ddae:	4604      	mov	r4, r0
 800ddb0:	4608      	mov	r0, r1
 800ddb2:	602b      	str	r3, [r5, #0]
 800ddb4:	f000 f8bc 	bl	800df30 <_isatty>
 800ddb8:	1c43      	adds	r3, r0, #1
 800ddba:	d102      	bne.n	800ddc2 <_isatty_r+0x1a>
 800ddbc:	682b      	ldr	r3, [r5, #0]
 800ddbe:	b103      	cbz	r3, 800ddc2 <_isatty_r+0x1a>
 800ddc0:	6023      	str	r3, [r4, #0]
 800ddc2:	bd38      	pop	{r3, r4, r5, pc}
 800ddc4:	20002814 	.word	0x20002814

0800ddc8 <__assert_func>:
 800ddc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ddca:	4614      	mov	r4, r2
 800ddcc:	461a      	mov	r2, r3
 800ddce:	4b09      	ldr	r3, [pc, #36]	; (800ddf4 <__assert_func+0x2c>)
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	4605      	mov	r5, r0
 800ddd4:	68d8      	ldr	r0, [r3, #12]
 800ddd6:	b14c      	cbz	r4, 800ddec <__assert_func+0x24>
 800ddd8:	4b07      	ldr	r3, [pc, #28]	; (800ddf8 <__assert_func+0x30>)
 800ddda:	9100      	str	r1, [sp, #0]
 800dddc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dde0:	4906      	ldr	r1, [pc, #24]	; (800ddfc <__assert_func+0x34>)
 800dde2:	462b      	mov	r3, r5
 800dde4:	f000 f872 	bl	800decc <fiprintf>
 800dde8:	f7fd f9a8 	bl	800b13c <abort>
 800ddec:	4b04      	ldr	r3, [pc, #16]	; (800de00 <__assert_func+0x38>)
 800ddee:	461c      	mov	r4, r3
 800ddf0:	e7f3      	b.n	800ddda <__assert_func+0x12>
 800ddf2:	bf00      	nop
 800ddf4:	20000070 	.word	0x20000070
 800ddf8:	0800e9af 	.word	0x0800e9af
 800ddfc:	0800e9bc 	.word	0x0800e9bc
 800de00:	0800e9ea 	.word	0x0800e9ea

0800de04 <_calloc_r>:
 800de04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800de06:	fba1 2402 	umull	r2, r4, r1, r2
 800de0a:	b94c      	cbnz	r4, 800de20 <_calloc_r+0x1c>
 800de0c:	4611      	mov	r1, r2
 800de0e:	9201      	str	r2, [sp, #4]
 800de10:	f7fd f9cc 	bl	800b1ac <_malloc_r>
 800de14:	9a01      	ldr	r2, [sp, #4]
 800de16:	4605      	mov	r5, r0
 800de18:	b930      	cbnz	r0, 800de28 <_calloc_r+0x24>
 800de1a:	4628      	mov	r0, r5
 800de1c:	b003      	add	sp, #12
 800de1e:	bd30      	pop	{r4, r5, pc}
 800de20:	220c      	movs	r2, #12
 800de22:	6002      	str	r2, [r0, #0]
 800de24:	2500      	movs	r5, #0
 800de26:	e7f8      	b.n	800de1a <_calloc_r+0x16>
 800de28:	4621      	mov	r1, r4
 800de2a:	f7fe f8e1 	bl	800bff0 <memset>
 800de2e:	e7f4      	b.n	800de1a <_calloc_r+0x16>

0800de30 <__ascii_mbtowc>:
 800de30:	b082      	sub	sp, #8
 800de32:	b901      	cbnz	r1, 800de36 <__ascii_mbtowc+0x6>
 800de34:	a901      	add	r1, sp, #4
 800de36:	b142      	cbz	r2, 800de4a <__ascii_mbtowc+0x1a>
 800de38:	b14b      	cbz	r3, 800de4e <__ascii_mbtowc+0x1e>
 800de3a:	7813      	ldrb	r3, [r2, #0]
 800de3c:	600b      	str	r3, [r1, #0]
 800de3e:	7812      	ldrb	r2, [r2, #0]
 800de40:	1e10      	subs	r0, r2, #0
 800de42:	bf18      	it	ne
 800de44:	2001      	movne	r0, #1
 800de46:	b002      	add	sp, #8
 800de48:	4770      	bx	lr
 800de4a:	4610      	mov	r0, r2
 800de4c:	e7fb      	b.n	800de46 <__ascii_mbtowc+0x16>
 800de4e:	f06f 0001 	mvn.w	r0, #1
 800de52:	e7f8      	b.n	800de46 <__ascii_mbtowc+0x16>

0800de54 <_realloc_r>:
 800de54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de58:	4680      	mov	r8, r0
 800de5a:	4614      	mov	r4, r2
 800de5c:	460e      	mov	r6, r1
 800de5e:	b921      	cbnz	r1, 800de6a <_realloc_r+0x16>
 800de60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de64:	4611      	mov	r1, r2
 800de66:	f7fd b9a1 	b.w	800b1ac <_malloc_r>
 800de6a:	b92a      	cbnz	r2, 800de78 <_realloc_r+0x24>
 800de6c:	f7ff f816 	bl	800ce9c <_free_r>
 800de70:	4625      	mov	r5, r4
 800de72:	4628      	mov	r0, r5
 800de74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de78:	f000 f83a 	bl	800def0 <_malloc_usable_size_r>
 800de7c:	4284      	cmp	r4, r0
 800de7e:	4607      	mov	r7, r0
 800de80:	d802      	bhi.n	800de88 <_realloc_r+0x34>
 800de82:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800de86:	d812      	bhi.n	800deae <_realloc_r+0x5a>
 800de88:	4621      	mov	r1, r4
 800de8a:	4640      	mov	r0, r8
 800de8c:	f7fd f98e 	bl	800b1ac <_malloc_r>
 800de90:	4605      	mov	r5, r0
 800de92:	2800      	cmp	r0, #0
 800de94:	d0ed      	beq.n	800de72 <_realloc_r+0x1e>
 800de96:	42bc      	cmp	r4, r7
 800de98:	4622      	mov	r2, r4
 800de9a:	4631      	mov	r1, r6
 800de9c:	bf28      	it	cs
 800de9e:	463a      	movcs	r2, r7
 800dea0:	f7fe f972 	bl	800c188 <memcpy>
 800dea4:	4631      	mov	r1, r6
 800dea6:	4640      	mov	r0, r8
 800dea8:	f7fe fff8 	bl	800ce9c <_free_r>
 800deac:	e7e1      	b.n	800de72 <_realloc_r+0x1e>
 800deae:	4635      	mov	r5, r6
 800deb0:	e7df      	b.n	800de72 <_realloc_r+0x1e>

0800deb2 <__ascii_wctomb>:
 800deb2:	b149      	cbz	r1, 800dec8 <__ascii_wctomb+0x16>
 800deb4:	2aff      	cmp	r2, #255	; 0xff
 800deb6:	bf85      	ittet	hi
 800deb8:	238a      	movhi	r3, #138	; 0x8a
 800deba:	6003      	strhi	r3, [r0, #0]
 800debc:	700a      	strbls	r2, [r1, #0]
 800debe:	f04f 30ff 	movhi.w	r0, #4294967295
 800dec2:	bf98      	it	ls
 800dec4:	2001      	movls	r0, #1
 800dec6:	4770      	bx	lr
 800dec8:	4608      	mov	r0, r1
 800deca:	4770      	bx	lr

0800decc <fiprintf>:
 800decc:	b40e      	push	{r1, r2, r3}
 800dece:	b503      	push	{r0, r1, lr}
 800ded0:	4601      	mov	r1, r0
 800ded2:	ab03      	add	r3, sp, #12
 800ded4:	4805      	ldr	r0, [pc, #20]	; (800deec <fiprintf+0x20>)
 800ded6:	f853 2b04 	ldr.w	r2, [r3], #4
 800deda:	6800      	ldr	r0, [r0, #0]
 800dedc:	9301      	str	r3, [sp, #4]
 800dede:	f7ff fd27 	bl	800d930 <_vfiprintf_r>
 800dee2:	b002      	add	sp, #8
 800dee4:	f85d eb04 	ldr.w	lr, [sp], #4
 800dee8:	b003      	add	sp, #12
 800deea:	4770      	bx	lr
 800deec:	20000070 	.word	0x20000070

0800def0 <_malloc_usable_size_r>:
 800def0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800def4:	1f18      	subs	r0, r3, #4
 800def6:	2b00      	cmp	r3, #0
 800def8:	bfbc      	itt	lt
 800defa:	580b      	ldrlt	r3, [r1, r0]
 800defc:	18c0      	addlt	r0, r0, r3
 800defe:	4770      	bx	lr

0800df00 <_close>:
 800df00:	4b02      	ldr	r3, [pc, #8]	; (800df0c <_close+0xc>)
 800df02:	2258      	movs	r2, #88	; 0x58
 800df04:	601a      	str	r2, [r3, #0]
 800df06:	f04f 30ff 	mov.w	r0, #4294967295
 800df0a:	4770      	bx	lr
 800df0c:	20002814 	.word	0x20002814

0800df10 <_fstat>:
 800df10:	4b02      	ldr	r3, [pc, #8]	; (800df1c <_fstat+0xc>)
 800df12:	2258      	movs	r2, #88	; 0x58
 800df14:	601a      	str	r2, [r3, #0]
 800df16:	f04f 30ff 	mov.w	r0, #4294967295
 800df1a:	4770      	bx	lr
 800df1c:	20002814 	.word	0x20002814

0800df20 <_getpid>:
 800df20:	4b02      	ldr	r3, [pc, #8]	; (800df2c <_getpid+0xc>)
 800df22:	2258      	movs	r2, #88	; 0x58
 800df24:	601a      	str	r2, [r3, #0]
 800df26:	f04f 30ff 	mov.w	r0, #4294967295
 800df2a:	4770      	bx	lr
 800df2c:	20002814 	.word	0x20002814

0800df30 <_isatty>:
 800df30:	4b02      	ldr	r3, [pc, #8]	; (800df3c <_isatty+0xc>)
 800df32:	2258      	movs	r2, #88	; 0x58
 800df34:	601a      	str	r2, [r3, #0]
 800df36:	2000      	movs	r0, #0
 800df38:	4770      	bx	lr
 800df3a:	bf00      	nop
 800df3c:	20002814 	.word	0x20002814

0800df40 <_kill>:
 800df40:	4b02      	ldr	r3, [pc, #8]	; (800df4c <_kill+0xc>)
 800df42:	2258      	movs	r2, #88	; 0x58
 800df44:	601a      	str	r2, [r3, #0]
 800df46:	f04f 30ff 	mov.w	r0, #4294967295
 800df4a:	4770      	bx	lr
 800df4c:	20002814 	.word	0x20002814

0800df50 <_lseek>:
 800df50:	4b02      	ldr	r3, [pc, #8]	; (800df5c <_lseek+0xc>)
 800df52:	2258      	movs	r2, #88	; 0x58
 800df54:	601a      	str	r2, [r3, #0]
 800df56:	f04f 30ff 	mov.w	r0, #4294967295
 800df5a:	4770      	bx	lr
 800df5c:	20002814 	.word	0x20002814

0800df60 <_sbrk>:
 800df60:	4a04      	ldr	r2, [pc, #16]	; (800df74 <_sbrk+0x14>)
 800df62:	6811      	ldr	r1, [r2, #0]
 800df64:	4603      	mov	r3, r0
 800df66:	b909      	cbnz	r1, 800df6c <_sbrk+0xc>
 800df68:	4903      	ldr	r1, [pc, #12]	; (800df78 <_sbrk+0x18>)
 800df6a:	6011      	str	r1, [r2, #0]
 800df6c:	6810      	ldr	r0, [r2, #0]
 800df6e:	4403      	add	r3, r0
 800df70:	6013      	str	r3, [r2, #0]
 800df72:	4770      	bx	lr
 800df74:	2000281c 	.word	0x2000281c
 800df78:	20002820 	.word	0x20002820

0800df7c <_exit>:
 800df7c:	e7fe      	b.n	800df7c <_exit>
	...

0800df80 <_init>:
 800df80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df82:	bf00      	nop
 800df84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df86:	bc08      	pop	{r3}
 800df88:	469e      	mov	lr, r3
 800df8a:	4770      	bx	lr

0800df8c <_fini>:
 800df8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df8e:	bf00      	nop
 800df90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df92:	bc08      	pop	{r3}
 800df94:	469e      	mov	lr, r3
 800df96:	4770      	bx	lr
